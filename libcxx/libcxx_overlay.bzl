# This build file will be put into the llvm-raw repository.
LIBCXX_BUILD_FILE = """load("@rules_ll//ll:defs.bzl", "ll_bootstrap_library")

filegroup(
    name = "libcxx_headers",
    srcs = glob(["include/**"]),
    visibility = ["//visibility:public"],
)

ll_bootstrap_library(
    name = "libll_cxx",
    deps = ["//libcxx/src:src"],
    transitive_hdrs = [":libcxx_headers"],
    visibility = ["//visibility:public"],
)"""

LIBCXX_SRC_BUILD_FILE = """load("@rules_ll//ll:defs.bzl", "ll_bootstrap_library")

# These headers are required to build libcxxabi, but are not part of the public
# libc++ api.
filegroup(
    name = "libcxx_src_headers",
    srcs = glob(["include/**"]),
    visibility = ["//visibility:public"],
)

ll_bootstrap_library(
    name = "src",
    srcs = [
        "algorithm.cpp",
        "any.cpp",
        "atomic.cpp",
        "barrier.cpp",
        "bind.cpp",
        "charconv.cpp",
        "chrono.cpp",
        "condition_variable.cpp",
        "condition_variable_destructor.cpp",
        "exception.cpp",
        "functional.cpp",
        "future.cpp",
        "hash.cpp",
        "legacy_pointer_safety.cpp",
        "memory.cpp",
        "mutex.cpp",
        "mutex_destructor.cpp",
        "new.cpp",
        "optional.cpp",
        "random_shuffle.cpp",
        "ryu/d2fixed.cpp",
        "ryu/d2s.cpp",
        "ryu/f2s.cpp",
        "shared_mutex.cpp",
        "stdexcept.cpp",
        "string.cpp",
        "system_error.cpp",
        "thread.cpp",
        "typeinfo.cpp",
        "utility.cpp",
        "valarray.cpp",
        "variant.cpp",
        "vector.cpp",

        "ios.cpp",
        "ios.instantiations.cpp",
        "iostream.cpp",
        "locale.cpp",
        "regex.cpp",
        "strstream.cpp",
    ],
    hdrs = [
        # Files in src/include.
        "include/apple_availability.h",
        "include/atomic_support.h",
        "include/config_elast.h",
        "include/refstring.h",
        "include/ryu/common.h",
        "include/ryu/d2fixed.h",
        "include/ryu/d2fixed_full_table.h",
        "include/ryu/d2s.h",
        "include/ryu/d2s_full_table.h",
        "include/ryu/d2s_intrinsics.h",
        "include/ryu/digit_table.h",
        "include/ryu/f2s.h",
        "include/ryu/ryu.h",
        "include/to_chars_floating_point.h",

        # Support ipp files.
        "support/runtime/exception_fallback.ipp",
        "support/runtime/exception_glibcxx.ipp",
        "support/runtime/exception_libcxxabi.ipp",
        "support/runtime/exception_libcxxrt.ipp",
        "support/runtime/exception_msvc.ipp",
        "support/runtime/exception_pointer_cxxabi.ipp",
        "support/runtime/exception_pointer_glibcxx.ipp",
        "support/runtime/exception_pointer_msvc.ipp",
        "support/runtime/exception_pointer_unimplemented.ipp",
        "support/runtime/new_handler_fallback.ipp",
        "support/runtime/stdexcept_default.ipp",
        "support/runtime/stdexcept_vcruntime.ipp",

        # Headers for building iostream.
        "include/sso_allocator.h",
        "iostream_init.h",

        "//libcxx:libcxx_headers"
    ],
    includes = ["external/llvm-project/libcxx/src"],
    defines = [
        "CHAR_BIT=8",
        "MB_LEN_MAX=1",
        "CHAR_MAX=127",
        "INT_MAX=+2147483647",
        "NDEBUG",
        "LIBCXX_BUILDING_LIBCXXABI",
        "_LIBCPP_BUILDING_LIBRARY",
        "_LIBCPP_DISABLE_NEW_DELETE_DEFINITIONS",
        "_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER",
        "_LIBCPP_LINK_PTHREAD",
        "_LIBCPP_LINK_RT_LIB",
        "__STDC_CONSTANT_MACROS",
        "__STDC_FORMAT_MACROS",
        "__STDC_LIMIT_MACROS",
    ],
    compile_flags = [
        "-nostdinc++",
        "-std=c++20",
        "-faligned-allocation",
        "-funwind-tables",
        "-fstrict-aliasing",
        "-fvisibility-inlines-hidden",
        "-Wno-user-defined-literals",
    ],
    deps = ["//libcxxabi:libll_cxxabi"],
    visibility = ["//visibility:public"],
)"""

# Autogenerated file that is usually generated from
# "libcxx/include/__config_site.in". This file needs to be copied to
# "libcxx/include/__config_site".
LIBCXX_CONFIG_SITE = """//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CONFIG_SITE
#define _LIBCPP_CONFIG_SITE

/* #undef _LIBCPP_ABI_VERSION */
/* #undef _LIBCPP_ABI_UNSTABLE */
/* #undef _LIBCPP_ABI_FORCE_ITANIUM */
/* #undef _LIBCPP_ABI_FORCE_MICROSOFT */
/* #undef _LIBCPP_HIDE_FROM_ABI_PER_TU_BY_DEFAULT */
/* #undef _LIBCPP_HAS_NO_THREADS */
/* #undef _LIBCPP_HAS_NO_MONOTONIC_CLOCK */
/* #undef _LIBCPP_HAS_MUSL_LIBC */
/* #undef _LIBCPP_HAS_THREAD_API_PTHREAD */
/* #undef _LIBCPP_HAS_THREAD_API_EXTERNAL */
/* #undef _LIBCPP_HAS_THREAD_API_WIN32 */
/* #undef _LIBCPP_HAS_THREAD_LIBRARY_EXTERNAL */
/* #undef _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS */
#define _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS
/* #undef _LIBCPP_NO_VCRUNTIME */
/* #undef _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION */
/* #undef _LIBCPP_ABI_NAMESPACE */
/* #undef _LIBCPP_HAS_NO_FILESYSTEM_LIBRARY */
/* #undef _LIBCPP_HAS_PARALLEL_ALGORITHMS */
/* #undef _LIBCPP_HAS_NO_RANDOM_DEVICE */
/* #undef _LIBCPP_HAS_NO_LOCALIZATION */
/* #undef _LIBCPP_HAS_NO_WIDE_CHARACTERS */
/* #undef _LIBCPP_HAS_NO_INCOMPLETE_FORMAT */
/* #undef _LIBCPP_HAS_NO_INCOMPLETE_RANGES */

#endif // _LIBCPP_CONFIG_SITE"""
