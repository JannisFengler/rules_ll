diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/BUILD.bazel b/utils/bazel/llvm-project-overlay/clang-tools-extra/BUILD.bazel
new file mode 100644
index 000000000000..b160d1074150
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/BUILD.bazel
@@ -0,0 +1 @@
+# Empty, but patches break if there is no line here.
diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/BUILD.bazel b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/BUILD.bazel
new file mode 100644
index 000000000000..9ca69086e485
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/BUILD.bazel
@@ -0,0 +1,345 @@
+load(
+    "@llvm-project//clang-tools-extra/clang-tidy:clang_tidy_module.bzl",
+    "clang_tidy_module",
+)
+load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
+
+cc_library(
+    name = "clang_tidy",
+    srcs = [
+        "ClangTidy.cpp",
+        "ClangTidyCheck.cpp",
+        "ClangTidyDiagnosticConsumer.cpp",
+        "ClangTidyModule.cpp",
+        "ClangTidyOptions.cpp",
+        "ClangTidyProfiling.cpp",
+        "ExpandModularHeadersPPCallbacks.cpp",
+        "GlobList.cpp",
+        "NoLintDirectiveHandler.cpp",
+    ],
+    hdrs = [
+        "ClangTidy.h",
+        "ClangTidyCheck.h",
+        "ClangTidyDiagnosticConsumer.h",
+        "ClangTidyForceLinker.h",
+        "ClangTidyModule.h",
+        "ClangTidyModuleRegistry.h",
+        "ClangTidyOptions.h",
+        "ClangTidyProfiling.h",
+        "ExpandModularHeadersPPCallbacks.h",
+        "GlobList.h",
+        "NoLintDirectiveHandler.h",
+
+        # Added manually to the overlay.
+        "clang-tidy-config.h",
+    ],
+    copts = [
+        "-O3",
+    ],
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:format",
+        "@llvm-project//clang:frontend",
+        "@llvm-project//clang:frontend_rewrite",
+        "@llvm-project//clang:lex",
+        "@llvm-project//clang:rewrite",
+        "@llvm-project//clang:sema",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:static_analyzer_core",
+        "@llvm-project//clang:static_analyzer_frontend",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:tooling_core",
+        "@llvm-project//llvm:FrontendOpenMP",
+        "@llvm-project//llvm:Support",
+    ],
+)
+
+cc_library(
+    name = "clang_tidy_utils",
+    srcs = glob(["utils/*.cpp"]),
+    hdrs = glob(["utils/*.h"]),
+    copts = [
+        "-O3",
+    ],
+    deps = [
+        ":clang_tidy",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:lex",
+        "@llvm-project//clang:sema",
+        "@llvm-project//clang:transformer",
+    ],
+)
+
+clang_tidy_module(
+    name = "abseil",
+    deps = [
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:transformer",
+    ],
+)
+
+clang_tidy_module(
+    name = "altera",
+    deps = [
+        "@llvm-project//clang:analysis",
+    ],
+)
+
+clang_tidy_module(name = "android")
+
+clang_tidy_module(name = "boost")
+
+clang_tidy_module(
+    name = "concurrency",
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(name = "darwin")
+
+clang_tidy_module(
+    name = "readability",
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "google",
+    deps = [":readability"],
+)
+
+clang_tidy_module(
+    name = "fuchsia",
+    deps = [":google"],
+)
+
+clang_tidy_module(name = "linuxkernel")
+
+clang_tidy_module(
+    name = "llvm",
+    deps = [":readability"],
+)
+
+clang_tidy_module(
+    name = "portability",
+    deps = ["@llvm-project//clang:tooling"],
+)
+
+clang_tidy_module(
+    name = "llvmlibc",
+    deps = [":portability"],
+)
+
+cc_binary(
+    name = "make_confusable_table",
+    srcs = [
+        "misc/ConfusableTable/BuildConfusableTable.cpp",
+    ],
+    deps = [
+        "@llvm-project//llvm:Support",
+    ],
+)
+
+genrule(
+    name = "confusables_inc",
+    srcs = ["misc/ConfusableTable/confusables.txt"],
+    outs = ["Confusables.inc"],
+    cmd = "$(location :make_confusable_table) $< $@",
+    message = "Generating confusables table.",
+    tools = [":make_confusable_table"],
+)
+
+cc_library(
+    name = "confusables_gen",
+    hdrs = [":confusables_inc"],
+    include_prefix = ".",
+)
+
+clang_tidy_module(
+    name = "misc",
+    deps = [
+        ":confusables_gen",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "modernize",
+    deps = [
+        ":readability",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "mpi",
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:static_analyzer_checkers",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(name = "objc")
+
+clang_tidy_module(name = "openmp")
+
+clang_tidy_module(
+    name = "performance",
+    deps = ["@llvm-project//clang:analysis"],
+)
+
+clang_tidy_module(name = "zircon")
+
+clang_tidy_module(
+    name = "cppcoreguidelines",
+    deps = [
+        ":misc",
+        ":modernize",
+        ":readability",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "bugprone",
+    deps = [
+        ":cppcoreguidelines",
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:transformer",
+    ],
+)
+
+clang_tidy_module(
+    name = "cert",
+    deps = [
+        ":bugprone",
+        ":concurrency",
+        ":google",
+        ":misc",
+        ":performance",
+        ":readability",
+    ],
+)
+
+clang_tidy_module(
+    name = "hicpp",
+    deps = [
+        ":bugprone",
+        ":cppcoreguidelines",
+        ":google",
+        ":misc",
+        ":modernize",
+        ":performance",
+        ":readability",
+        "@llvm-project//clang:serialization",
+    ],
+)
+
+ALL_CLANG_TIDY_CHECKS = [
+    ":android",
+    ":abseil",
+    ":altera",
+    ":boost",
+    ":bugprone",
+    ":cert",
+    ":concurrency",
+    ":cppcoreguidelines",
+    ":darwin",
+    ":fuchsia",
+    ":google",
+    ":hicpp",
+    ":linuxkernel",
+    ":llvm",
+    ":llvmlibc",
+    ":misc",
+    ":modernize",
+    ":mpi",
+    ":objc",
+    ":openmp",
+    ":performance",
+    ":portability",
+    ":readability",
+    ":zircon",
+]
+
+cc_binary(
+    name = "clang_tidy_plugin",
+    srcs = ["plugin/ClangTidyPlugin.cpp"],
+    copts = [
+        "-O3",
+    ],
+    linkshared = True,
+    visibility = ["//visibility:public"],
+    deps = ALL_CLANG_TIDY_CHECKS + [
+        ":clang_tidy",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:frontend",
+        "@llvm-project//clang:sema",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+cc_library(
+    name = "clang_tidy_main",
+    srcs = [
+        "tool/ClangTidyMain.cpp",
+    ],
+    hdrs = [
+        "tool/ClangTidyMain.h",
+    ],
+    copts = [
+        "-O3",
+    ],
+    deps = [
+        ":clang_tidy",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:tooling_core",
+    ],
+)
+
+cc_binary(
+    name = "clang-tidy",
+    srcs = [
+        "tool/ClangTidyToolMain.cpp",
+    ],
+    copts = [
+        "-O3",
+    ],
+    visibility = ["//visibility:public"],
+    deps = ALL_CLANG_TIDY_CHECKS + [
+        ":clang_tidy",
+        ":clang_tidy_main",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:tooling_core",
+    ],
+)
+
+native_binary(
+    name = "run-clang-tidy",
+    src = "tool/run-clang-tidy.py",
+    out = "run-clang-tidy",
+    data = [":clang-tidy"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang-tidy-config.h b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang-tidy-config.h
new file mode 100644
index 000000000000..d19ac4250a21
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang-tidy-config.h
@@ -0,0 +1,8 @@
+#ifdef CLANG_TIDY_CONFIG_H
+#error clang-tidy-config.h can only be included once
+#else
+#define CLANG_TIDY_CONFIG_H
+
+#define CLANG_TIDY_ENABLE_STATIC_ANALYZER 1
+
+#endif
diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang_tidy_module.bzl b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang_tidy_module.bzl
new file mode 100644
index 000000000000..2ff01aa5006e
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang_tidy_module.bzl
@@ -0,0 +1,21 @@
+def clang_tidy_module(name, deps = []):
+    """Wrapper around cc_library to shorten deps."""
+    native.cc_library(
+        name = name,
+        srcs = native.glob([name + "/*.cpp"]),
+        hdrs = native.glob([name + "/*.h", name + "/*.inc"]),
+        deps = deps + [
+            ":clang_tidy",
+            ":clang_tidy_utils",
+            "@llvm-project//clang:ast",
+            "@llvm-project//clang:ast_matchers",
+            "@llvm-project//clang:basic",
+            "@llvm-project//clang:lex",
+            "@llvm-project//llvm:FrontendOpenMP",
+            "@llvm-project//llvm:Support",
+        ],
+        alwayslink = True,
+        copts = [
+            "-O3",
+        ],
+    )
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/BUILD.bazel
new file mode 100644
index 000000000000..9641252aa551
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/BUILD.bazel
@@ -0,0 +1,11 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+ll_library(
+    name = "libll_compiler-rt",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/builtins",
+        "//compiler-rt/lib/crt",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/BUILD.bazel
new file mode 100644
index 000000000000..1bb8bf6d7fd4
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/BUILD.bazel
@@ -0,0 +1 @@
+# empty
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/asan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/asan/BUILD.bazel
new file mode 100644
index 000000000000..e4652c7dcc3f
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/asan/BUILD.bazel
@@ -0,0 +1,245 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "asan_headers",
+    srcs = [
+        "asan_activation.h",
+        "asan_activation_flags.inc",
+        "asan_allocator.h",
+        "asan_descriptions.h",
+        "asan_errors.h",
+        "asan_fake_stack.h",
+        "asan_flags.h",
+        "asan_flags.inc",
+        "asan_init_version.h",
+        "asan_interceptors.h",
+        "asan_interceptors_memintrinsics.h",
+        "asan_interface.inc",
+        "asan_interface_internal.h",
+        "asan_internal.h",
+        "asan_lock.h",
+        "asan_mapping.h",
+        "asan_poisoning.h",
+        "asan_premap_shadow.h",
+        "asan_report.h",
+        "asan_scariness_score.h",
+        "asan_stack.h",
+        "asan_stats.h",
+        "asan_suppressions.h",
+        "asan_thread.h",
+    ],
+)
+
+filegroup(
+    name = "asan_sources",
+    srcs = [
+        "asan_activation.cpp",
+        "asan_allocator.cpp",
+        "asan_debugging.cpp",
+        "asan_descriptions.cpp",
+        "asan_errors.cpp",
+        "asan_fake_stack.cpp",
+        "asan_flags.cpp",
+        "asan_fuchsia.cpp",
+        "asan_globals.cpp",
+        "asan_globals_win.cpp",
+        "asan_interceptors.cpp",
+        "asan_interceptors_memintrinsics.cpp",
+        "asan_interceptors_vfork.S",  # Not Win32 and not Apple.
+        "asan_linux.cpp",
+        "asan_mac.cpp",
+        "asan_malloc_linux.cpp",
+        "asan_malloc_mac.cpp",
+        "asan_malloc_win.cpp",
+        "asan_memory_profile.cpp",
+        "asan_poisoning.cpp",
+        "asan_posix.cpp",
+        "asan_premap_shadow.cpp",
+        "asan_report.cpp",
+        "asan_rtl.cpp",
+        "asan_shadow_setup.cpp",
+        "asan_stack.cpp",
+        "asan_stats.cpp",
+        "asan_suppressions.cpp",
+        "asan_thread.cpp",
+        "asan_win.cpp",
+    ],
+)
+
+filegroup(
+    name = "asan_cxx_sources",
+    srcs = [
+        "asan_new_delete.cpp",
+    ],
+)
+
+filegroup(
+    name = "asan_static_sources",
+    srcs = [
+        "asan_rtl_static.cpp",
+        "asan_rtl_x86_64.S",  # Not Win32 and not Apple.
+    ],
+)
+
+filegroup(
+    name = "asan_preinit_sources",
+    srcs = [
+        "asan_preinit.cpp",
+    ],
+)
+
+ll_library(
+    name = "RTAsan_dynamic",
+    srcs = [
+        ":asan_cxx_sources",
+        ":asan_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/lsan:lsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-fvisibility=hidden",
+    ],
+    defines = ["ASAN_DYNAMIC=1"],
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan",
+    srcs = [
+        ":asan_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/lsan:lsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan_cxx",
+    srcs = [
+        ":asan_cxx_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan_static",
+    srcs = [
+        "asan_rtl_static.cpp",
+        "asan_rtl_x86_64.S",  # Not Win32 and not Apple.
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan_preinit",
+    srcs = [
+        ":asan_preinit_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.asan",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan",
+        ":RTAsan_preinit",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/lsan:RTLSanCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+    ],
+)
+
+ll_library(
+    # We want the output library to be named libasan.so. Otherwise it will not
+    # be recognized by IsDynamicRTName in asan_linux.cpp.
+    name = "libasan",
+    compilation_mode = "bootstrap",
+    emit = ["shared_object"],
+    shared_object_link_flags = [
+        "--eh-frame-hdr",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_dynamic",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/lsan:RTLSanCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.asan_cxx",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_cxx",
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.asan_static",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_static",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.asan-preinit",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_preinit",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/builtins/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/builtins/BUILD.bazel
new file mode 100644
index 000000000000..68e031bef550
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/builtins/BUILD.bazel
@@ -0,0 +1,225 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+GENERIC_SOURCES = [
+    "absvdi2.c",
+    "absvsi2.c",
+    "absvti2.c",
+    "adddf3.c",
+    "addsf3.c",
+    "addvdi3.c",
+    "addvsi3.c",
+    "addvti3.c",
+    "apple_versioning.c",
+    "ashldi3.c",
+    "ashlti3.c",
+    "ashrdi3.c",
+    "ashrti3.c",
+    "bswapdi2.c",
+    "bswapsi2.c",
+    "clzdi2.c",
+    "clzsi2.c",
+    "clzti2.c",
+    "cmpdi2.c",
+    "cmpti2.c",
+    "comparedf2.c",
+    "comparesf2.c",
+    "ctzdi2.c",
+    "ctzsi2.c",
+    "ctzti2.c",
+    "divdc3.c",
+    "divdf3.c",
+    "divdi3.c",
+    "divmoddi4.c",
+    "divmodsi4.c",
+    "divmodti4.c",
+    "divsc3.c",
+    "divsf3.c",
+    "divsi3.c",
+    "divti3.c",
+    "extendsfdf2.c",
+    "extendhfsf2.c",
+    "ffsdi2.c",
+    "ffssi2.c",
+    "ffsti2.c",
+    "fixdfdi.c",
+    "fixdfsi.c",
+    "fixdfti.c",
+    "fixsfdi.c",
+    "fixsfsi.c",
+    "fixsfti.c",
+    "fixunsdfdi.c",
+    "fixunsdfsi.c",
+    "fixunsdfti.c",
+    "fixunssfdi.c",
+    "fixunssfsi.c",
+    "fixunssfti.c",
+    "floatdidf.c",
+    "floatdisf.c",
+    "floatsidf.c",
+    "floatsisf.c",
+    "floattidf.c",
+    "floattisf.c",
+    "floatundidf.c",
+    "floatundisf.c",
+    "floatunsidf.c",
+    "floatunsisf.c",
+    "floatuntidf.c",
+    "floatuntisf.c",
+    "fp_mode.c",
+    "int_util.c",
+    "lshrdi3.c",
+    "lshrti3.c",
+    "moddi3.c",
+    "modsi3.c",
+    "modti3.c",
+    "muldc3.c",
+    "muldf3.c",
+    "muldi3.c",
+    "mulodi4.c",
+    "mulosi4.c",
+    "muloti4.c",
+    "mulsc3.c",
+    "mulsf3.c",
+    "multi3.c",
+    "mulvdi3.c",
+    "mulvsi3.c",
+    "mulvti3.c",
+    "negdf2.c",
+    "negdi2.c",
+    "negsf2.c",
+    "negti2.c",
+    "negvdi2.c",
+    "negvsi2.c",
+    "negvti2.c",
+    "os_version_check.c",
+    "paritydi2.c",
+    "paritysi2.c",
+    "parityti2.c",
+    "popcountdi2.c",
+    "popcountsi2.c",
+    "popcountti2.c",
+    "powidf2.c",
+    "powisf2.c",
+    "subdf3.c",
+    "subsf3.c",
+    "subvdi3.c",
+    "subvsi3.c",
+    "subvti3.c",
+    "trampoline_setup.c",
+    "truncdfhf2.c",
+    "truncdfsf2.c",
+    "truncsfhf2.c",
+    "ucmpdi2.c",
+    "ucmpti2.c",
+    "udivdi3.c",
+    "udivmoddi4.c",
+    "udivmodsi4.c",
+    "udivmodti4.c",
+    "udivsi3.c",
+    "udivti3.c",
+    "umoddi3.c",
+    "umodsi3.c",
+    "umodti3.c",
+
+    # Not Fuchsia and not a bare-metal build.
+    "emutls.c",
+    "enable_execute_stack.c",
+    "eprintf.c",
+
+    # Not sure whether we want atomic in this or separately.
+    "atomic.c",
+
+    # Not sure whether this is for libunwind or gcc_s. gotta check.
+    "gcc_personality_v0.c",
+
+    # Not Fuchsia.
+    "clear_cache.c",
+]
+
+GENERIC_TF_SOURCES = [
+    "addtf3.c",
+    "comparetf2.c",
+    "divtc3.c",
+    "divtf3.c",
+    "extenddftf2.c",
+    "extendhftf2.c",
+    "extendsftf2.c",
+    "fixtfdi.c",
+    "fixtfsi.c",
+    "fixtfti.c",
+    "fixunstfdi.c",
+    "fixunstfsi.c",
+    "fixunstfti.c",
+    "floatditf.c",
+    "floatsitf.c",
+    "floattitf.c",
+    "floatunditf.c",
+    "floatunsitf.c",
+    "floatuntitf.c",
+    "multc3.c",
+    "multf3.c",
+    "powitf2.c",
+    "subtf3.c",
+    "trunctfdf2.c",
+    "trunctfhf2.c",
+    "trunctfsf2.c",
+]
+
+X86_ARCH_SOURCES = [
+    "cpu_model.c",
+    "i386/fp_mode.c",  # Used on 64-bit as well.
+]
+
+X86_80_BIT_SOURCES = [
+    "divxc3.c",
+    "fixxfdi.c",
+    "fixxfti.c",
+    "fixunsxfdi.c",
+    "fixunsxfsi.c",
+    "fixunsxfti.c",
+    "floatdixf.c",
+    "floattixf.c",
+    "floatundixf.c",
+    "floatuntixf.c",
+    "mulxc3.c",
+    "powixf2.c",
+]
+
+X86_64_SOURCES = GENERIC_SOURCES + GENERIC_TF_SOURCES + X86_ARCH_SOURCES + X86_80_BIT_SOURCES + [
+    "x86_64/floatdidf.c",
+    "x86_64/floatdisf.c",
+    "x86_64/floatundidf.S",
+    "x86_64/floatundisf.S",
+    "x86_64/floatdixf.c",
+    "x86_64/floatundixf.S",
+]
+
+ll_library(
+    name = "builtins",
+    srcs = X86_64_SOURCES,
+    hdrs = [
+        "assembly.h",
+        "fp_add_impl.inc",
+        "fp_compare_impl.inc",
+        "fp_div_impl.inc",
+        "fp_extend.h",
+        "fp_extend_impl.inc",
+        "fp_fixint_impl.inc",
+        "fp_fixuint_impl.inc",
+        "fp_lib.h",
+        "fp_mode.h",
+        "fp_mul_impl.inc",
+        "fp_trunc.h",
+        "fp_trunc_impl.inc",
+        "int_div_impl.inc",
+        "int_endianness.h",
+        "int_lib.h",
+        "int_math.h",
+        "int_mulo_impl.inc",
+        "int_mulv_impl.inc",
+        "int_types.h",
+        "int_util.h",
+    ],
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/crt/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/crt/BUILD.bazel
new file mode 100644
index 000000000000..fc768e047e7e
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/crt/BUILD.bazel
@@ -0,0 +1,28 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+ll_library(
+    name = "crtbegin",
+    srcs = ["crtbegin.c"],
+    compilation_mode = "bootstrap",
+    defines = ["EH_USE_FRAME_REGISTRY"],
+    emit = ["objects"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "crtend",
+    srcs = ["crtend.c"],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "crt",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":crtbegin",
+        ":crtend",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/interception/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/interception/BUILD.bazel
new file mode 100644
index 000000000000..831b2eb68fdb
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/interception/BUILD.bazel
@@ -0,0 +1,29 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "interception_headers",
+    srcs = [
+        "interception.h",
+        "interception_linux.h",
+        "interception_mac.h",
+        "interception_win.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTInterception",
+    srcs = [
+        "interception_linux.cpp",
+        "interception_mac.cpp",
+        "interception_type_test.cpp",
+        "interception_win.cpp",
+    ],
+    hdrs = [
+        ":interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/lsan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/lsan/BUILD.bazel
new file mode 100644
index 000000000000..7188ec5653b4
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/lsan/BUILD.bazel
@@ -0,0 +1,63 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "lsan_headers",
+    srcs = [
+        "lsan.h",
+        "lsan_allocator.h",
+        "lsan_common.h",
+        "lsan_flags.inc",
+        "lsan_posix.h",  # Missing in CMake.
+        "lsan_thread.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTLSanCommon",
+    srcs = [
+        "lsan_common.cpp",
+        "lsan_common_fuchsia.cpp",
+        "lsan_common_linux.cpp",
+        "lsan_common_mac.cpp",
+    ],
+    hdrs = [
+        ":lsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.lsan",
+    srcs = [
+        "lsan.cpp",
+        "lsan_allocator.cpp",
+        "lsan_fuchsia.cpp",
+        "lsan_interceptors.cpp",
+        "lsan_linux.cpp",
+        "lsan_mac.cpp",
+        "lsan_malloc_mac.cpp",
+        "lsan_posix.cpp",
+        "lsan_preinit.cpp",
+        "lsan_thread.cpp",
+    ],
+    hdrs = [
+        ":lsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTLSanCommon",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/msan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/msan/BUILD.bazel
new file mode 100644
index 000000000000..cba7a625a65f
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/msan/BUILD.bazel
@@ -0,0 +1,74 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "msan_headers",
+    srcs = [
+        "msan.h",
+        "msan_allocator.h",
+        "msan_chained_origin_depot.h",
+        "msan_flags.h",
+        "msan_flags.inc",
+        "msan_interface_internal.h",
+        "msan_origin.h",
+        "msan_poisoning.h",
+        "msan_report.h",
+        "msan_thread.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.msan",
+    srcs = [
+        "msan.cpp",
+        "msan_allocator.cpp",
+        "msan_chained_origin_depot.cpp",
+        "msan_interceptors.cpp",
+        "msan_linux.cpp",
+        "msan_poisoning.cpp",
+        "msan_report.cpp",
+        "msan_thread.cpp",
+    ],
+    hdrs = [
+        ":msan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-ffreestanding",
+    ],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.msan_cxx",
+    srcs = [
+        "msan_new_delete.cpp",
+    ],
+    hdrs = [
+        ":msan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-ffreestanding",
+    ],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/sanitizer_common/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/sanitizer_common/BUILD.bazel
new file mode 100644
index 000000000000..7f48882b7893
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/sanitizer_common/BUILD.bazel
@@ -0,0 +1,246 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "sanitizer_impl_headers",
+    srcs = [
+        "sancov_flags.h",
+        "sancov_flags.inc",
+        "sanitizer_addrhashmap.h",
+        "sanitizer_allocator.h",
+        "sanitizer_allocator_checks.h",
+        "sanitizer_allocator_combined.h",
+        "sanitizer_allocator_dlsym.h",
+        "sanitizer_allocator_interface.h",
+        "sanitizer_allocator_internal.h",
+        "sanitizer_allocator_local_cache.h",
+        "sanitizer_allocator_primary32.h",
+        "sanitizer_allocator_primary64.h",
+        "sanitizer_allocator_report.h",
+        "sanitizer_allocator_secondary.h",
+        "sanitizer_allocator_size_class_map.h",
+        "sanitizer_allocator_stats.h",
+        "sanitizer_asm.h",
+        "sanitizer_atomic.h",
+        "sanitizer_atomic_clang.h",
+        "sanitizer_atomic_clang_mips.h",
+        "sanitizer_atomic_clang_other.h",
+        "sanitizer_atomic_clang_x86.h",
+        "sanitizer_atomic_msvc.h",
+        "sanitizer_bitvector.h",
+        "sanitizer_bvgraph.h",
+        "sanitizer_chained_origin_depot.h",
+        "sanitizer_common.h",
+        "sanitizer_common_interceptors.inc",
+        "sanitizer_common_interceptors_format.inc",
+        "sanitizer_common_interceptors_ioctl.inc",
+        "sanitizer_common_interceptors_netbsd_compat.inc",  # Missing in CMake.
+
+        # Always linux. Missing in CMake.
+        "sanitizer_common_interceptors_vfork_aarch64.inc.S",
+        "sanitizer_common_interceptors_vfork_arm.inc.S",
+        "sanitizer_common_interceptors_vfork_i386.inc.S",
+        "sanitizer_common_interceptors_vfork_loongarch64.inc.S",
+        "sanitizer_common_interceptors_vfork_riscv64.inc.S",
+        "sanitizer_common_interceptors_vfork_x86_64.inc.S",
+        "sanitizer_common_interface.inc",
+        "sanitizer_common_interface_posix.inc",
+        "sanitizer_common_syscalls.inc",
+        "sanitizer_coverage_interface.inc",
+        "sanitizer_dbghelp.h",
+        "sanitizer_deadlock_detector.h",
+        "sanitizer_deadlock_detector_interface.h",
+        "sanitizer_dense_map.h",
+        "sanitizer_dense_map_info.h",
+        "sanitizer_errno.h",
+        "sanitizer_errno_codes.h",
+        "sanitizer_file.h",
+        "sanitizer_flag_parser.h",
+        "sanitizer_flags.h",
+        "sanitizer_flags.inc",
+        "sanitizer_flat_map.h",
+        "sanitizer_freebsd.h",
+        "sanitizer_fuchsia.h",
+        "sanitizer_getauxval.h",
+        "sanitizer_glibc_version.h",  # Missing in CMake.
+        "sanitizer_hash.h",
+        "sanitizer_interceptors_ioctl_netbsd.inc",
+        "sanitizer_interface_internal.h",
+        "sanitizer_internal_defs.h",
+        "sanitizer_leb128.h",
+        "sanitizer_lfstack.h",
+        "sanitizer_libc.h",
+        "sanitizer_libignore.h",
+        "sanitizer_linux.h",
+        "sanitizer_list.h",
+        "sanitizer_local_address_space_view.h",
+        "sanitizer_lzw.h",
+        "sanitizer_mac.h",
+        "sanitizer_malloc_mac.inc",
+        "sanitizer_mutex.h",
+        "sanitizer_placement_new.h",
+        "sanitizer_platform.h",
+        "sanitizer_platform_interceptors.h",
+        "sanitizer_platform_limits_freebsd.h",  # Missing in CMake.
+        "sanitizer_platform_limits_netbsd.h",
+        "sanitizer_platform_limits_posix.h",
+        "sanitizer_platform_limits_solaris.h",
+        "sanitizer_posix.h",
+        "sanitizer_procmaps.h",
+        "sanitizer_ptrauth.h",
+        "sanitizer_quarantine.h",
+        "sanitizer_report_decorator.h",
+        "sanitizer_ring_buffer.h",
+        "sanitizer_signal_interceptors.inc",
+        "sanitizer_solaris.h",
+        "sanitizer_stack_store.h",
+        "sanitizer_stackdepot.h",
+        "sanitizer_stackdepotbase.h",
+        "sanitizer_stacktrace.h",
+        "sanitizer_stacktrace_printer.h",
+        "sanitizer_stoptheworld.h",
+        "sanitizer_suppressions.h",
+        "sanitizer_symbolizer.h",
+        "sanitizer_symbolizer_fuchsia.h",
+        "sanitizer_symbolizer_internal.h",
+        "sanitizer_symbolizer_libbacktrace.h",
+        "sanitizer_symbolizer_mac.h",
+        "sanitizer_syscall_generic.inc",
+        "sanitizer_syscall_linux_aarch64.inc",
+        "sanitizer_syscall_linux_arm.inc",
+        "sanitizer_syscall_linux_riscv64.inc",
+        "sanitizer_syscall_linux_x86_64.inc",
+        "sanitizer_syscalls_netbsd.inc",
+        "sanitizer_thread_registry.h",
+        "sanitizer_thread_safety.h",
+        "sanitizer_tls_get_addr.h",
+        "sanitizer_type_traits.h",  # Missing in CMake.
+        "sanitizer_vector.h",
+        "sanitizer_win.h",
+        "sanitizer_win_defs.h",
+        "sanitizer_win_dll_thunk.h",
+        "sanitizer_win_weak_interception.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+# TODO: Architecture-specific names as in CMake.
+ll_library(
+    name = "RTSanitizerCommon",
+    srcs = [
+        "sanitizer_allocator.cpp",
+        "sanitizer_common.cpp",
+        "sanitizer_deadlock_detector1.cpp",
+        "sanitizer_deadlock_detector2.cpp",
+        "sanitizer_errno.cpp",
+        "sanitizer_file.cpp",
+        "sanitizer_flags.cpp",
+        "sanitizer_flag_parser.cpp",
+        "sanitizer_fuchsia.cpp",
+        "sanitizer_libc.cpp",
+        "sanitizer_libignore.cpp",
+        "sanitizer_linux.cpp",
+        "sanitizer_linux_s390.cpp",
+        "sanitizer_mac.cpp",
+        "sanitizer_mutex.cpp",
+        "sanitizer_netbsd.cpp",
+        "sanitizer_platform_limits_freebsd.cpp",
+        "sanitizer_platform_limits_linux.cpp",
+        "sanitizer_platform_limits_netbsd.cpp",
+        "sanitizer_platform_limits_posix.cpp",
+        "sanitizer_platform_limits_solaris.cpp",
+        "sanitizer_posix.cpp",
+        "sanitizer_printf.cpp",
+        "sanitizer_procmaps_common.cpp",
+        "sanitizer_procmaps_bsd.cpp",
+        "sanitizer_procmaps_fuchsia.cpp",
+        "sanitizer_procmaps_linux.cpp",
+        "sanitizer_procmaps_mac.cpp",
+        "sanitizer_procmaps_solaris.cpp",
+        "sanitizer_solaris.cpp",
+        "sanitizer_stoptheworld_fuchsia.cpp",
+        "sanitizer_stoptheworld_mac.cpp",
+        "sanitizer_stoptheworld_win.cpp",
+        "sanitizer_suppressions.cpp",
+        "sanitizer_tls_get_addr.cpp",
+        "sanitizer_thread_registry.cpp",
+        "sanitizer_type_traits.cpp",
+        "sanitizer_win.cpp",
+
+        # Always termination.
+        "sanitizer_termination.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonNoLibc",
+    srcs = [
+        "sanitizer_common_nolibc.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonLibc",
+    srcs = [
+        "sanitizer_allocator_checks.cpp",
+        "sanitizer_common_libcdep.cpp",
+        "sanitizer_linux_libcdep.cpp",
+        "sanitizer_mac_libcdep.cpp",
+        "sanitizer_posix_libcdep.cpp",
+        "sanitizer_stoptheworld_linux_libcdep.cpp",
+        "sanitizer_stoptheworld_netbsd_libcdep.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonCoverage",
+    srcs = [
+        "sancov_flags.cpp",
+        "sanitizer_coverage_fuchsia.cpp",
+        "sanitizer_coverage_libcdep_new.cpp",
+        "sanitizer_coverage_win_sections.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonSymbolizer",
+    srcs = [
+        "sanitizer_allocator_report.cpp",
+        "sanitizer_chained_origin_depot.cpp",
+        "sanitizer_stack_store.cpp",
+        "sanitizer_stackdepot.cpp",
+        "sanitizer_stacktrace.cpp",
+        "sanitizer_stacktrace_libcdep.cpp",
+        "sanitizer_stacktrace_printer.cpp",
+        "sanitizer_stacktrace_sparc.cpp",
+        "sanitizer_symbolizer.cpp",
+        "sanitizer_symbolizer_libbacktrace.cpp",
+        "sanitizer_symbolizer_libcdep.cpp",
+        "sanitizer_symbolizer_mac.cpp",
+        "sanitizer_symbolizer_markup.cpp",
+        "sanitizer_symbolizer_posix_libcdep.cpp",
+        "sanitizer_symbolizer_report.cpp",
+        "sanitizer_symbolizer_win.cpp",
+        "sanitizer_unwind_linux_libcdep.cpp",
+        "sanitizer_unwind_win.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/tsan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/tsan/BUILD.bazel
new file mode 100644
index 000000000000..45becbca839a
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/tsan/BUILD.bazel
@@ -0,0 +1,114 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "tsan_headers",
+    srcs = [
+        "rtl/tsan_defs.h",
+        "rtl/tsan_dense_alloc.h",
+        "rtl/tsan_fd.h",
+        "rtl/tsan_flags.h",
+        "rtl/tsan_flags.inc",
+        "rtl/tsan_ignoreset.h",
+        "rtl/tsan_ilist.h",
+        "rtl/tsan_interceptors.h",
+        "rtl/tsan_interface.h",
+        "rtl/tsan_interface.inc",
+        "rtl/tsan_interface_ann.h",
+        "rtl/tsan_interface_java.h",
+        "rtl/tsan_mman.h",
+        "rtl/tsan_mutexset.h",
+        "rtl/tsan_platform.h",
+        "rtl/tsan_ppc_regs.h",
+        "rtl/tsan_report.h",
+        "rtl/tsan_rtl.h",
+        "rtl/tsan_shadow.h",
+        "rtl/tsan_stack_trace.h",
+        "rtl/tsan_suppressions.h",
+        "rtl/tsan_symbolize.h",
+        "rtl/tsan_sync.h",
+        "rtl/tsan_trace.h",
+        "rtl/tsan_vector_clock.h",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.tsan",
+    srcs = [
+        # TSAN_SOURCES.
+        "rtl/tsan_debugging.cpp",
+        "rtl/tsan_external.cpp",
+        "rtl/tsan_fd.cpp",
+        "rtl/tsan_flags.cpp",
+        "rtl/tsan_ignoreset.cpp",
+        "rtl/tsan_interceptors_posix.cpp",
+        "rtl/tsan_interface.cpp",
+        "rtl/tsan_interface_ann.cpp",
+        "rtl/tsan_interface_atomic.cpp",
+        "rtl/tsan_interface_java.cpp",
+        "rtl/tsan_malloc_mac.cpp",
+        "rtl/tsan_md5.cpp",
+        "rtl/tsan_mman.cpp",
+        "rtl/tsan_mutexset.cpp",
+        "rtl/tsan_report.cpp",
+        "rtl/tsan_rtl.cpp",
+        "rtl/tsan_rtl_access.cpp",
+        "rtl/tsan_rtl_mutex.cpp",
+        "rtl/tsan_rtl_proc.cpp",
+        "rtl/tsan_rtl_report.cpp",
+        "rtl/tsan_rtl_thread.cpp",
+        "rtl/tsan_stack_trace.cpp",
+        "rtl/tsan_suppressions.cpp",
+        "rtl/tsan_symbolize.cpp",
+        "rtl/tsan_sync.cpp",
+        "rtl/tsan_vector_clock.cpp",
+
+        # TSAN_ASM_SOURCES.
+        "rtl/tsan_rtl_amd64.S",
+
+        # TSAN_PREINIT_SOURCES.
+        "rtl/tsan_preinit.cpp",
+
+        # Linux sources.
+        "rtl/tsan_platform_linux.cpp",
+        "rtl/tsan_platform_posix.cpp",
+    ],
+    hdrs = [
+        ":tsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = ["-msse4.2"],
+    relative_angled_includes = ["compiler-rt/lib"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.tsan_cxx",
+    srcs = [
+        "rtl/tsan_new_delete.cpp",
+    ],
+    hdrs = [
+        ":tsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = ["-msse4.2"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/ubsan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/ubsan/BUILD.bazel
new file mode 100644
index 000000000000..736606a26b3d
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/ubsan/BUILD.bazel
@@ -0,0 +1,109 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "ubsan_headers",
+    srcs = [
+        "ubsan_checks.inc",
+        "ubsan_diag.h",
+        "ubsan_flags.h",
+        "ubsan_flags.inc",
+        "ubsan_handlers.h",
+        "ubsan_handlers_cxx.h",
+        "ubsan_init.h",
+        "ubsan_interface.inc",
+        "ubsan_monitor.h",
+        "ubsan_platform.h",
+        "ubsan_signals_standalone.h",
+        "ubsan_type_hash.h",
+        "ubsan_value.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTUbsan",
+    srcs = [
+        "ubsan_diag.cpp",
+        "ubsan_flags.cpp",
+        "ubsan_handlers.cpp",
+        "ubsan_init.cpp",
+        "ubsan_monitor.cpp",
+        "ubsan_value.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    defines = [
+        "UBSAN_CAN_USE_CXXABI",
+    ],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTUbsan_cxx",
+    srcs = [
+        "ubsan_handlers_cxx.cpp",
+        "ubsan_type_hash.cpp",
+        "ubsan_type_hash_itanium.cpp",
+        "ubsan_type_hash_win.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTUbsan_standalone",
+    srcs = [
+        "ubsan_diag_standalone.cpp",
+        "ubsan_init_standalone.cpp",
+        "ubsan_signals_standalone.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.ubsan_standalone",
+    srcs = [
+        "ubsan_init_standalone_preinit.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTUbsan",
+        ":RTUbsan_standalone",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.ubsan_standalone_cxx",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTUbsan_cxx",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/libcxx/BUILD.bazel b/utils/bazel/llvm-project-overlay/libcxx/BUILD.bazel
new file mode 100644
index 000000000000..2b69c9ccce89
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxx/BUILD.bazel
@@ -0,0 +1,129 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "libcxx_headers",
+    srcs = glob(["include/**/*"]),
+    visibility = ["//visibility:public"],
+)
+
+filegroup(
+    name = "libcxx_sources",
+    srcs = glob(["src/**/*"]),
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "libll_cxx",
+    srcs = [
+        "src/algorithm.cpp",
+        "src/any.cpp",
+        "src/atomic.cpp",
+        "src/barrier.cpp",
+        "src/bind.cpp",
+        "src/charconv.cpp",
+        "src/chrono.cpp",
+        "src/condition_variable.cpp",
+        "src/condition_variable_destructor.cpp",
+        "src/exception.cpp",
+        "src/filesystem/directory_iterator.cpp",
+        "src/filesystem/operations.cpp",
+        "src/format.cpp",
+        "src/functional.cpp",
+        "src/future.cpp",
+        "src/hash.cpp",
+        "src/ios.cpp",
+        "src/ios.instantiations.cpp",
+        "src/iostream.cpp",
+        "src/legacy_pointer_safety.cpp",
+        "src/locale.cpp",
+        "src/memory.cpp",
+        "src/mutex.cpp",
+        "src/mutex_destructor.cpp",
+        "src/new.cpp",
+        "src/optional.cpp",
+        "src/random.cpp",
+        "src/random_shuffle.cpp",
+        "src/regex.cpp",
+        "src/ryu/d2fixed.cpp",
+        "src/ryu/d2s.cpp",
+        "src/ryu/f2s.cpp",
+        "src/shared_mutex.cpp",
+        "src/stdexcept.cpp",
+        "src/string.cpp",
+        "src/strstream.cpp",
+        "src/system_error.cpp",
+        "src/thread.cpp",
+        "src/typeinfo.cpp",
+        "src/utility.cpp",
+        "src/valarray.cpp",
+        "src/variant.cpp",
+        "src/vector.cpp",
+    ],
+    hdrs = [
+        # Files in src/include.
+        "src/include/apple_availability.h",
+        "src/include/atomic_support.h",
+        "src/include/config_elast.h",
+        "src/include/refstring.h",
+        "src/include/ryu/common.h",
+        "src/include/ryu/d2fixed.h",
+        "src/include/ryu/d2fixed_full_table.h",
+        "src/include/ryu/d2s.h",
+        "src/include/ryu/d2s_full_table.h",
+        "src/include/ryu/d2s_intrinsics.h",
+        "src/include/ryu/digit_table.h",
+        "src/include/ryu/f2s.h",
+        "src/include/ryu/ryu.h",
+        "src/include/to_chars_floating_point.h",
+
+        # Filesystem files.
+        "src/filesystem/filesystem_common.h",
+        "src/filesystem/posix_compat.h",
+
+        # Support ipp files.
+        "src/support/runtime/exception_fallback.ipp",
+        "src/support/runtime/exception_glibcxx.ipp",
+        "src/support/runtime/exception_libcxxabi.ipp",
+        "src/support/runtime/exception_libcxxrt.ipp",
+        "src/support/runtime/exception_msvc.ipp",
+        "src/support/runtime/exception_pointer_cxxabi.ipp",
+        "src/support/runtime/exception_pointer_glibcxx.ipp",
+        "src/support/runtime/exception_pointer_msvc.ipp",
+        "src/support/runtime/exception_pointer_unimplemented.ipp",
+        "src/support/runtime/new_handler_fallback.ipp",
+        "src/support/runtime/stdexcept_default.ipp",
+        "src/support/runtime/stdexcept_vcruntime.ipp",
+
+        # Headers for building iostream.
+        "src/include/sso_allocator.h",
+        "src/iostream_init.h",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-std=c++20",
+        "-faligned-allocation",
+        "-fno-omit-frame-pointer",
+        "-funwind-tables",
+        "-fstrict-aliasing",
+        "-fvisibility-inlines-hidden",
+        "-Wno-user-defined-literals",
+    ],
+    # Adding libcxx headers via the data field lets us include them via
+    # a custom CPLUS_INCLUDE_PATH setting in the compilation environment for
+    # ll_bootstrap_library. So no include attribute needed to match this.
+    data = [
+        "//libcxx:libcxx_headers",
+        "//libcxxabi:libcxxabi_headers",
+    ],
+    defines = [
+        "_LIBCPP_BUILDING_LIBRARY",
+        "_LIBCPP_DISABLE_NEW_DELETE_DEFINITIONS",
+        "_LIBCPP_ENABLE_EXPERIMENTAL",
+        "_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER",
+        "_LIBCPP_LINK_PTHREAD_LIB",
+        "_LIBCPP_LINK_RT_LIB",
+        "_LIBCXXABI_BUILDING_LIBRARY",
+        "LIBCXX_BUILDING_LIBCXXABI",
+    ],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/libcxx/include/__config_site b/utils/bazel/llvm-project-overlay/libcxx/include/__config_site
new file mode 100644
index 000000000000..1a57f6ab5f6b
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxx/include/__config_site
@@ -0,0 +1,48 @@
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef _LIBCPP___CONFIG_SITE
+#define _LIBCPP___CONFIG_SITE
+
+#define _LIBCPP_ABI_VERSION 1
+#define _LIBCPP_ABI_NAMESPACE __1
+/* #undef _LIBCPP_ABI_FORCE_ITANIUM */
+/* #undef _LIBCPP_ABI_FORCE_MICROSOFT */
+/* #undef _LIBCPP_HAS_NO_THREADS */
+/* #undef _LIBCPP_HAS_NO_MONOTONIC_CLOCK */
+/* #undef _LIBCPP_HAS_MUSL_LIBC */
+/* #undef _LIBCPP_HAS_THREAD_API_PTHREAD */
+/* #undef _LIBCPP_HAS_THREAD_API_EXTERNAL */
+/* #undef _LIBCPP_HAS_THREAD_API_WIN32 */
+/* #undef _LIBCPP_HAS_THREAD_LIBRARY_EXTERNAL */
+/* #undef _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS */
+#define _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS
+/* #undef _LIBCPP_NO_VCRUNTIME */
+/* #define _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION */
+/* #undef _LIBCPP_HAS_NO_FILESYSTEM_LIBRARY */
+/* #undef _LIBCPP_HAS_PARALLEL_ALGORITHMS */
+/* #undef _LIBCPP_HAS_NO_RANDOM_DEVICE */
+/* #undef _LIBCPP_HAS_NO_LOCALIZATION */
+/* #undef _LIBCPP_HAS_NO_WIDE_CHARACTERS */
+#define _LIBCPP_ENABLE_ASSERTIONS_DEFAULT 0
+/* #undef _LIBCPP_ENABLE_DEBUG_MODE */
+
+// __USE_MINGW_ANSI_STDIO gets redefined on MinGW
+#ifdef __clang__
+#  pragma clang diagnostic push
+#  pragma clang diagnostic ignored "-Wmacro-redefined"
+#endif
+
+
+
+
+#ifdef __clang__
+#  pragma clang diagnostic pop
+#endif
+
+#endif // _LIBCPP___CONFIG_SITE
diff --git a/utils/bazel/llvm-project-overlay/libcxx/include/module.modulemap b/utils/bazel/llvm-project-overlay/libcxx/include/module.modulemap
new file mode 100644
index 000000000000..c48427885af0
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxx/include/module.modulemap
@@ -0,0 +1,1401 @@
+// define the module for __config outside of the top level 'std' module
+// since __config may be included from C headers which may create an
+// include cycle.
+module std_config [system] [extern_c] {
+  header "__config"
+  export *
+}
+
+module std [system] {
+  export std_config
+  // FIXME: The standard does not require that each of these submodules
+  // re-exports its imported modules. We should provide an alternative form of
+  // export that issues a warning if a name from the submodule is used, and
+  // use that to provide a 'strict mode' for libc++.
+
+  // Deprecated C-compatibility headers. These can all be included from within
+  // an 'extern "C"' context.
+  module depr [extern_c] {
+    // <assert.h> provided by C library.
+    module ctype_h {
+      header "ctype.h"
+      export *
+    }
+    module errno_h {
+      header "errno.h"
+      export *
+    }
+    module fenv_h {
+      header "fenv.h"
+      export *
+    }
+    // <float.h> provided by compiler or C library.
+    module inttypes_h {
+      header "inttypes.h"
+      export stdint_h
+      export *
+    }
+    // <iso646.h> provided by compiler.
+    // <limits.h> provided by compiler or C library.
+    module locale_h {
+
+      header "locale.h"
+      export *
+    }
+    module math_h {
+      header "math.h"
+      export *
+    }
+    module setjmp_h {
+      header "setjmp.h"
+      export *
+    }
+    module stdatomic_h {
+
+      requires cplusplus23
+      header "stdatomic.h"
+      export *
+    }
+    // FIXME: <stdalign.h> is missing.
+    // <signal.h> provided by C library.
+    // <stdarg.h> provided by compiler.
+    module stdbool_h {
+      // <stdbool.h>'s __bool_true_false_are_defined macro requires textual inclusion.
+      textual header "stdbool.h"
+    }
+    module stddef_h {
+      // <stddef.h>'s __need_* macros require textual inclusion.
+      textual header "stddef.h"
+    }
+    module stdint_h {
+      header "stdint.h"
+      export *
+      // FIXME: This module only exists on OS X and for some reason the
+      // wildcard above doesn't export it.
+      export Darwin.C.stdint
+    }
+    module stdio_h {
+      // <stdio.h>'s __need_* macros require textual inclusion.
+      textual header "stdio.h"
+      export *
+      export Darwin.C.stdio
+    }
+    module stdlib_h {
+      // <stdlib.h>'s __need_* macros require textual inclusion.
+      textual header "stdlib.h"
+      export *
+    }
+    module string_h {
+      header "string.h"
+      export *
+    }
+    module uchar_h {
+      header "uchar.h"
+      export *
+    }
+    // <time.h> provided by C library.
+    module wchar_h {
+
+      // <wchar.h>'s __need_* macros require textual inclusion.
+      textual header "wchar.h"
+      export *
+    }
+    module wctype_h {
+
+      header "wctype.h"
+      export *
+    }
+  }
+
+  // <complex.h> and <tgmath.h> are not C headers in any real sense, do not
+  // allow their use in extern "C" contexts.
+  module complex_h {
+    header "complex.h"
+    export ccomplex
+    export *
+  }
+  module tgmath_h {
+    header "tgmath.h"
+    export ccomplex
+    export cmath
+    export *
+  }
+
+  // C compatibility headers.
+  module compat {
+    module cassert {
+      // <cassert>'s use of NDEBUG requires textual inclusion.
+      textual header "cassert"
+    }
+    module ccomplex {
+      header "ccomplex"
+      export complex
+      export *
+    }
+    module cctype {
+      header "cctype"
+      export *
+    }
+    module cerrno {
+      header "cerrno"
+      export *
+    }
+    module cfenv {
+      header "cfenv"
+      export *
+    }
+    module cfloat {
+      header "cfloat"
+      export *
+    }
+    module cinttypes {
+      header "cinttypes"
+      export cstdint
+      export *
+    }
+    module ciso646 {
+      header "ciso646"
+      export *
+    }
+    module climits {
+      header "climits"
+      export *
+    }
+    module clocale {
+
+      header "clocale"
+      export *
+    }
+    module cmath {
+      header "cmath"
+      export *
+    }
+    module csetjmp {
+      header "csetjmp"
+      export *
+    }
+    module csignal {
+      header "csignal"
+      export *
+    }
+    // FIXME: <cstdalign> is missing.
+    module cstdarg {
+      header "cstdarg"
+      export *
+    }
+    module cstdbool {
+      header "cstdbool"
+      export *
+    }
+    module cstddef {
+      header "cstddef"
+      export *
+    }
+    module cstdint {
+      header "cstdint"
+      export depr.stdint_h
+      export *
+    }
+    module cstdio {
+      header "cstdio"
+      export *
+    }
+    module cstdlib {
+      header "cstdlib"
+      export *
+    }
+    module cstring {
+      header "cstring"
+      export *
+    }
+    module ctgmath {
+      header "ctgmath"
+      export ccomplex
+      export cmath
+      export *
+    }
+    module ctime {
+      header "ctime"
+      export *
+    }
+    module cuchar {
+      header "cuchar"
+      export *
+    }
+    module cwchar {
+
+      header "cwchar"
+      export depr.stdio_h
+      export *
+    }
+    module cwctype {
+
+      header "cwctype"
+      export *
+    }
+  }
+
+  module algorithm {
+    header "algorithm"
+    export initializer_list
+    export *
+
+    module __algorithm {
+      module adjacent_find                   { private header "__algorithm/adjacent_find.h" }
+      module all_of                          { private header "__algorithm/all_of.h" }
+      module any_of                          { private header "__algorithm/any_of.h" }
+      module binary_search                   { private header "__algorithm/binary_search.h" }
+      module clamp                           { private header "__algorithm/clamp.h" }
+      module comp                            { private header "__algorithm/comp.h" }
+      module comp_ref_type                   { private header "__algorithm/comp_ref_type.h" }
+      module copy                            { private header "__algorithm/copy.h" }
+      module copy_backward                   { private header "__algorithm/copy_backward.h" }
+      module copy_if                         { private header "__algorithm/copy_if.h" }
+      module copy_n                          { private header "__algorithm/copy_n.h" }
+      module count                           { private header "__algorithm/count.h" }
+      module count_if                        { private header "__algorithm/count_if.h" }
+      module equal                           { private header "__algorithm/equal.h" }
+      module equal_range                     { private header "__algorithm/equal_range.h" }
+      module fill                            { private header "__algorithm/fill.h" }
+      module fill_n                          { private header "__algorithm/fill_n.h" }
+      module find                            { private header "__algorithm/find.h" }
+      module find_end                        { private header "__algorithm/find_end.h" }
+      module find_first_of                   { private header "__algorithm/find_first_of.h" }
+      module find_if                         { private header "__algorithm/find_if.h" }
+      module find_if_not                     { private header "__algorithm/find_if_not.h" }
+      module for_each                        { private header "__algorithm/for_each.h" }
+      module for_each_n                      { private header "__algorithm/for_each_n.h" }
+      module generate                        { private header "__algorithm/generate.h" }
+      module generate_n                      { private header "__algorithm/generate_n.h" }
+      module half_positive                   { private header "__algorithm/half_positive.h" }
+      module in_found_result                 { private header "__algorithm/in_found_result.h" }
+      module in_fun_result                   { private header "__algorithm/in_fun_result.h" }
+      module in_in_out_result                { private header "__algorithm/in_in_out_result.h" }
+      module in_in_result                    { private header "__algorithm/in_in_result.h" }
+      module in_out_out_result               { private header "__algorithm/in_out_out_result.h" }
+      module in_out_result                   { private header "__algorithm/in_out_result.h" }
+      module includes                        { private header "__algorithm/includes.h" }
+      module inplace_merge                   { private header "__algorithm/inplace_merge.h" }
+      module is_heap                         { private header "__algorithm/is_heap.h" }
+      module is_heap_until                   { private header "__algorithm/is_heap_until.h" }
+      module is_partitioned                  { private header "__algorithm/is_partitioned.h" }
+      module is_permutation                  { private header "__algorithm/is_permutation.h" }
+      module is_sorted                       { private header "__algorithm/is_sorted.h" }
+      module is_sorted_until                 { private header "__algorithm/is_sorted_until.h" }
+      module iter_swap                       { private header "__algorithm/iter_swap.h" }
+      module iterator_operations             { private header "__algorithm/iterator_operations.h" }
+      module lexicographical_compare         { private header "__algorithm/lexicographical_compare.h" }
+      module lower_bound                     { private header "__algorithm/lower_bound.h" }
+      module make_heap                       { private header "__algorithm/make_heap.h" }
+      module make_projected                  { private header "__algorithm/make_projected.h" }
+      module max                             { private header "__algorithm/max.h" }
+      module max_element                     { private header "__algorithm/max_element.h" }
+      module merge                           { private header "__algorithm/merge.h" }
+      module min                             { private header "__algorithm/min.h" }
+      module min_element                     { private header "__algorithm/min_element.h" }
+      module min_max_result                  { private header "__algorithm/min_max_result.h" }
+      module minmax                          { private header "__algorithm/minmax.h" }
+      module minmax_element                  { private header "__algorithm/minmax_element.h" }
+      module mismatch                        { private header "__algorithm/mismatch.h" }
+      module move                            { private header "__algorithm/move.h" }
+      module move_backward                   { private header "__algorithm/move_backward.h" }
+      module next_permutation                { private header "__algorithm/next_permutation.h" }
+      module none_of                         { private header "__algorithm/none_of.h" }
+      module nth_element                     { private header "__algorithm/nth_element.h" }
+      module partial_sort                    { private header "__algorithm/partial_sort.h" }
+      module partial_sort_copy               { private header "__algorithm/partial_sort_copy.h" }
+      module partition                       { private header "__algorithm/partition.h" }
+      module partition_copy                  { private header "__algorithm/partition_copy.h" }
+      module partition_point                 { private header "__algorithm/partition_point.h" }
+      module pop_heap                        { private header "__algorithm/pop_heap.h" }
+      module prev_permutation                { private header "__algorithm/prev_permutation.h" }
+      module push_heap                       { private header "__algorithm/push_heap.h" }
+      module ranges_adjacent_find            { private header "__algorithm/ranges_adjacent_find.h" }
+      module ranges_all_of                   { private header "__algorithm/ranges_all_of.h" }
+      module ranges_any_of                   { private header "__algorithm/ranges_any_of.h" }
+      module ranges_binary_search            { private header "__algorithm/ranges_binary_search.h" }
+      module ranges_clamp                    { private header "__algorithm/ranges_clamp.h" }
+      module ranges_copy                     { private header "__algorithm/ranges_copy.h" }
+      module ranges_copy_backward            { private header "__algorithm/ranges_copy_backward.h" }
+      module ranges_copy_if                  { private header "__algorithm/ranges_copy_if.h" }
+      module ranges_copy_n                   { private header "__algorithm/ranges_copy_n.h" }
+      module ranges_count                    { private header "__algorithm/ranges_count.h" }
+      module ranges_count_if                 { private header "__algorithm/ranges_count_if.h" }
+      module ranges_equal                    { private header "__algorithm/ranges_equal.h" }
+      module ranges_equal_range              { private header "__algorithm/ranges_equal_range.h" }
+      module ranges_fill                     { private header "__algorithm/ranges_fill.h" }
+      module ranges_fill_n                   { private header "__algorithm/ranges_fill_n.h" }
+      module ranges_find                     { private header "__algorithm/ranges_find.h" }
+      module ranges_find_end                 { private header "__algorithm/ranges_find_end.h" }
+      module ranges_find_first_of            { private header "__algorithm/ranges_find_first_of.h" }
+      module ranges_find_if                  { private header "__algorithm/ranges_find_if.h" }
+      module ranges_find_if_not              { private header "__algorithm/ranges_find_if_not.h" }
+      module ranges_for_each                 { private header "__algorithm/ranges_for_each.h" }
+      module ranges_for_each_n               { private header "__algorithm/ranges_for_each_n.h" }
+      module ranges_generate                 { private header "__algorithm/ranges_generate.h" }
+      module ranges_generate_n               { private header "__algorithm/ranges_generate_n.h" }
+      module ranges_includes                 { private header "__algorithm/ranges_includes.h" }
+      module ranges_inplace_merge            { private header "__algorithm/ranges_inplace_merge.h" }
+      module ranges_is_heap                  { private header "__algorithm/ranges_is_heap.h" }
+      module ranges_is_heap_until            { private header "__algorithm/ranges_is_heap_until.h" }
+      module ranges_is_partitioned           { private header "__algorithm/ranges_is_partitioned.h" }
+      module ranges_is_permutation           { private header "__algorithm/ranges_is_permutation.h" }
+      module ranges_is_sorted                { private header "__algorithm/ranges_is_sorted.h" }
+      module ranges_is_sorted_until          { private header "__algorithm/ranges_is_sorted_until.h" }
+      module ranges_iterator_concept         { private header "__algorithm/ranges_iterator_concept.h" }
+      module ranges_lexicographical_compare  { private header "__algorithm/ranges_lexicographical_compare.h" }
+      module ranges_lower_bound              { private header "__algorithm/ranges_lower_bound.h" }
+      module ranges_make_heap                { private header "__algorithm/ranges_make_heap.h" }
+      module ranges_max                      { private header "__algorithm/ranges_max.h" }
+      module ranges_max_element              { private header "__algorithm/ranges_max_element.h" }
+      module ranges_merge                    { private header "__algorithm/ranges_merge.h" }
+      module ranges_min                      { private header "__algorithm/ranges_min.h" }
+      module ranges_min_element              { private header "__algorithm/ranges_min_element.h" }
+      module ranges_minmax                   { private header "__algorithm/ranges_minmax.h" }
+      module ranges_minmax_element           { private header "__algorithm/ranges_minmax_element.h" }
+      module ranges_mismatch                 { private header "__algorithm/ranges_mismatch.h" }
+      module ranges_move                     { private header "__algorithm/ranges_move.h" }
+      module ranges_move_backward            { private header "__algorithm/ranges_move_backward.h" }
+      module ranges_next_permutation         { private header "__algorithm/ranges_next_permutation.h" }
+      module ranges_none_of                  { private header "__algorithm/ranges_none_of.h" }
+      module ranges_nth_element              { private header "__algorithm/ranges_nth_element.h" }
+      module ranges_partial_sort             { private header "__algorithm/ranges_partial_sort.h" }
+      module ranges_partial_sort_copy        { private header "__algorithm/ranges_partial_sort_copy.h" }
+      module ranges_partition                { private header "__algorithm/ranges_partition.h" }
+      module ranges_partition_copy           { private header "__algorithm/ranges_partition_copy.h" }
+      module ranges_partition_point          { private header "__algorithm/ranges_partition_point.h" }
+      module ranges_pop_heap                 { private header "__algorithm/ranges_pop_heap.h" }
+      module ranges_prev_permutation         { private header "__algorithm/ranges_prev_permutation.h" }
+      module ranges_push_heap                { private header "__algorithm/ranges_push_heap.h" }
+      module ranges_remove                   { private header "__algorithm/ranges_remove.h" }
+      module ranges_remove_copy              { private header "__algorithm/ranges_remove_copy.h" }
+      module ranges_remove_copy_if           { private header "__algorithm/ranges_remove_copy_if.h" }
+      module ranges_remove_if                { private header "__algorithm/ranges_remove_if.h" }
+      module ranges_replace                  { private header "__algorithm/ranges_replace.h" }
+      module ranges_replace_copy             { private header "__algorithm/ranges_replace_copy.h" }
+      module ranges_replace_copy_if          { private header "__algorithm/ranges_replace_copy_if.h" }
+      module ranges_replace_if               { private header "__algorithm/ranges_replace_if.h" }
+      module ranges_reverse                  { private header "__algorithm/ranges_reverse.h" }
+      module ranges_reverse_copy             { private header "__algorithm/ranges_reverse_copy.h" }
+      module ranges_rotate                   { private header "__algorithm/ranges_rotate.h" }
+      module ranges_rotate_copy              { private header "__algorithm/ranges_rotate_copy.h" }
+      module ranges_sample                   { private header "__algorithm/ranges_sample.h" }
+      module ranges_search                   { private header "__algorithm/ranges_search.h" }
+      module ranges_search_n                 { private header "__algorithm/ranges_search_n.h" }
+      module ranges_set_difference           { private header "__algorithm/ranges_set_difference.h" }
+      module ranges_set_intersection         { private header "__algorithm/ranges_set_intersection.h" }
+      module ranges_set_symmetric_difference { private header "__algorithm/ranges_set_symmetric_difference.h" }
+      module ranges_set_union                { private header "__algorithm/ranges_set_union.h" }
+      module ranges_shuffle                  { private header "__algorithm/ranges_shuffle.h" }
+      module ranges_sort                     { private header "__algorithm/ranges_sort.h" }
+      module ranges_sort_heap                { private header "__algorithm/ranges_sort_heap.h" }
+      module ranges_stable_partition         { private header "__algorithm/ranges_stable_partition.h" }
+      module ranges_stable_sort              { private header "__algorithm/ranges_stable_sort.h" }
+      module ranges_swap_ranges              { private header "__algorithm/ranges_swap_ranges.h" }
+      module ranges_transform                { private header "__algorithm/ranges_transform.h" }
+      module uniform_random_bit_generator_adaptor {
+        private header "__algorithm/uniform_random_bit_generator_adaptor.h"
+      }
+      module ranges_unique                   { private header "__algorithm/ranges_unique.h" }
+      module ranges_unique_copy              { private header "__algorithm/ranges_unique_copy.h" }
+      module ranges_upper_bound              { private header "__algorithm/ranges_upper_bound.h" }
+      module remove                          { private header "__algorithm/remove.h" }
+      module remove_copy                     { private header "__algorithm/remove_copy.h" }
+      module remove_copy_if                  { private header "__algorithm/remove_copy_if.h" }
+      module remove_if                       { private header "__algorithm/remove_if.h" }
+      module replace                         { private header "__algorithm/replace.h" }
+      module replace_copy                    { private header "__algorithm/replace_copy.h" }
+      module replace_copy_if                 { private header "__algorithm/replace_copy_if.h" }
+      module replace_if                      { private header "__algorithm/replace_if.h" }
+      module reverse                         { private header "__algorithm/reverse.h" }
+      module reverse_copy                    { private header "__algorithm/reverse_copy.h" }
+      module rotate                          { private header "__algorithm/rotate.h" }
+      module rotate_copy                     { private header "__algorithm/rotate_copy.h" }
+      module sample                          { private header "__algorithm/sample.h" }
+      module search                          { private header "__algorithm/search.h" }
+      module search_n                        { private header "__algorithm/search_n.h" }
+      module set_difference                  { private header "__algorithm/set_difference.h" }
+      module set_intersection                { private header "__algorithm/set_intersection.h" }
+      module set_symmetric_difference        { private header "__algorithm/set_symmetric_difference.h" }
+      module set_union                       { private header "__algorithm/set_union.h" }
+      module shift_left                      { private header "__algorithm/shift_left.h" }
+      module shift_right                     { private header "__algorithm/shift_right.h" }
+      module shuffle                         { private header "__algorithm/shuffle.h" }
+      module sift_down                       { private header "__algorithm/sift_down.h" }
+      module sort                            { private header "__algorithm/sort.h" }
+      module sort_heap                       { private header "__algorithm/sort_heap.h" }
+      module stable_partition                { private header "__algorithm/stable_partition.h" }
+      module stable_sort                     { private header "__algorithm/stable_sort.h" }
+      module swap_ranges                     { private header "__algorithm/swap_ranges.h" }
+      module transform                       { private header "__algorithm/transform.h" }
+      module unique                          { private header "__algorithm/unique.h" }
+      module unique_copy                     { private header "__algorithm/unique_copy.h" }
+      module unwrap_iter                     { private header "__algorithm/unwrap_iter.h" }
+      module unwrap_range                    { private header "__algorithm/unwrap_range.h" }
+      module upper_bound                     { private header "__algorithm/upper_bound.h" }
+    }
+  }
+  module any {
+    header "any"
+    export *
+  }
+  module array {
+    header "array"
+    export initializer_list
+    export *
+  }
+  module atomic {
+    header "atomic"
+    export *
+  }
+  module barrier {
+
+    header "barrier"
+    export *
+  }
+  module bit {
+    header "bit"
+    export *
+
+    module __bit {
+      module bit_cast { private header "__bit/bit_cast.h" }
+      module byteswap { private header "__bit/byteswap.h" }
+    }
+  }
+  module bitset {
+    header "bitset"
+    export string
+    export iosfwd
+    export *
+  }
+  // No submodule for cassert. It fundamentally needs repeated, textual inclusion.
+  module charconv {
+    header "charconv"
+    export *
+
+    module __charconv {
+      module chars_format      { private header "__charconv/chars_format.h" }
+      module from_chars_result { private header "__charconv/from_chars_result.h" }
+      module tables            { private header "__charconv/tables.h" }
+      module to_chars_base_10  { private header "__charconv/to_chars_base_10.h" }
+      module to_chars_result   { private header "__charconv/to_chars_result.h" }
+    }
+
+  }
+  module chrono {
+    header "chrono"
+    export *
+
+    module __chrono {
+      module calendar              { private header "__chrono/calendar.h" }
+      module convert_to_timespec   { private header "__chrono/convert_to_timespec.h" }
+      module day                   { private header "__chrono/day.h" }
+      module duration              { private header "__chrono/duration.h" }
+      module file_clock            { private header "__chrono/file_clock.h" }
+      module hh_mm_ss              { private header "__chrono/hh_mm_ss.h" }
+      module high_resolution_clock {
+        private header "__chrono/high_resolution_clock.h"
+        export steady_clock
+        export system_clock
+      }
+      module literals              { private header "__chrono/literals.h" }
+      module month                 { private header "__chrono/month.h" }
+      module month_weekday         { private header "__chrono/month_weekday.h" }
+      module monthday              { private header "__chrono/monthday.h" }
+      module steady_clock          { private header "__chrono/steady_clock.h" }
+      module system_clock          { private header "__chrono/system_clock.h" }
+      module time_point            { private header "__chrono/time_point.h" }
+      module weekday               { private header "__chrono/weekday.h" }
+      module year                  { private header "__chrono/year.h" }
+      module year_month            { private header "__chrono/year_month.h" }
+      module year_month_day        { private header "__chrono/year_month_day.h" }
+      module year_month_weekday    { private header "__chrono/year_month_weekday.h" }
+    }
+  }
+  module codecvt {
+
+    header "codecvt"
+    export *
+  }
+  module compare {
+    header "compare"
+    export *
+
+    module __compare {
+      module common_comparison_category     { private header "__compare/common_comparison_category.h" }
+      module compare_partial_order_fallback { private header "__compare/compare_partial_order_fallback.h" }
+      module compare_strong_order_fallback  { private header "__compare/compare_strong_order_fallback.h" }
+      module compare_three_way              { private header "__compare/compare_three_way.h" }
+      module compare_three_way_result       { private header "__compare/compare_three_way_result.h" }
+      module compare_weak_order_fallback    { private header "__compare/compare_weak_order_fallback.h" }
+      module is_eq                          { private header "__compare/is_eq.h" }
+      module ordering                       { private header "__compare/ordering.h" }
+      module partial_order                  { private header "__compare/partial_order.h" }
+      module strong_order                   { private header "__compare/strong_order.h" }
+      module synth_three_way                { private header "__compare/synth_three_way.h" }
+      module three_way_comparable           { private header "__compare/three_way_comparable.h" }
+      module weak_order                     { private header "__compare/weak_order.h" }
+    }
+  }
+  module complex {
+    header "complex"
+    export *
+  }
+  module concepts {
+    header "concepts"
+    export *
+
+    module __concepts {
+      module arithmetic                 { private header "__concepts/arithmetic.h" }
+      module assignable                 { private header "__concepts/assignable.h" }
+      module boolean_testable           { private header "__concepts/boolean_testable.h" }
+      module class_or_enum              { private header "__concepts/class_or_enum.h" }
+      module common_reference_with      { private header "__concepts/common_reference_with.h" }
+      module common_with                { private header "__concepts/common_with.h" }
+      module constructible              { private header "__concepts/constructible.h" }
+      module convertible_to             { private header "__concepts/convertible_to.h" }
+      module copyable                   { private header "__concepts/copyable.h" }
+      module derived_from               { private header "__concepts/derived_from.h" }
+      module destructible               { private header "__concepts/destructible.h" }
+      module different_from             { private header "__concepts/different_from.h" }
+      module equality_comparable        { private header "__concepts/equality_comparable.h" }
+      module invocable                  { private header "__concepts/invocable.h" }
+      module movable                    { private header "__concepts/movable.h" }
+      module predicate                  { private header "__concepts/predicate.h" }
+      module regular                    { private header "__concepts/regular.h" }
+      module relation                   { private header "__concepts/relation.h" }
+      module same_as                    { private header "__concepts/same_as.h" }
+      module semiregular                { private header "__concepts/semiregular.h" }
+      module swappable                  { private header "__concepts/swappable.h" }
+      module totally_ordered            { private header "__concepts/totally_ordered.h" }
+    }
+  }
+  module condition_variable {
+    header "condition_variable"
+    export *
+  }
+  module coroutine {
+    requires coroutines
+    header "coroutine"
+    export compare
+    export *
+
+    module __coroutine {
+      module coroutine_handle           { private header "__coroutine/coroutine_handle.h" }
+      module coroutine_traits           { private header "__coroutine/coroutine_traits.h" }
+      module noop_coroutine_handle      { private header "__coroutine/noop_coroutine_handle.h" }
+      module trivial_awaitables         { private header "__coroutine/trivial_awaitables.h" }
+    }
+  }
+  module deque {
+    header "deque"
+    export initializer_list
+    export *
+  }
+  module exception {
+    header "exception"
+    export *
+  }
+  module execution {
+    header "execution"
+    export *
+  }
+  module filesystem {
+
+    header "filesystem"
+    export *
+
+    module __filesystem {
+      module copy_options                 { private header "__filesystem/copy_options.h" }
+      module directory_entry              { private header "__filesystem/directory_entry.h" }
+      module directory_iterator           { private header "__filesystem/directory_iterator.h" }
+      module directory_options            { private header "__filesystem/directory_options.h" }
+      module file_status                  { private header "__filesystem/file_status.h" }
+      module file_time_type               { private header "__filesystem/file_time_type.h" }
+      module file_type                    { private header "__filesystem/file_type.h" }
+      module filesystem_error             { private header "__filesystem/filesystem_error.h" }
+      module operations                   { private header "__filesystem/operations.h" }
+      module path                         { private header "__filesystem/path.h" }
+      module path_iterator                { private header "__filesystem/path_iterator.h" }
+      module perm_options                 { private header "__filesystem/perm_options.h" }
+      module perms                        { private header "__filesystem/perms.h" }
+      module recursive_directory_iterator { private header "__filesystem/recursive_directory_iterator.h" }
+      module space_info                   { private header "__filesystem/space_info.h" }
+      module u8path                       { private header "__filesystem/u8path.h" }
+    }
+  }
+  module format {
+    header "format"
+    export *
+
+    module __format {
+      module buffer                          { private header "__format/buffer.h" }
+      module concepts                        { private header "__format/concepts.h" }
+      module enable_insertable               { private header "__format/enable_insertable.h" }
+      module extended_grapheme_cluster_table { private header "__format/extended_grapheme_cluster_table.h" }
+      module format_arg                      { private header "__format/format_arg.h" }
+      module format_arg_store                { private header "__format/format_arg_store.h" }
+      module format_args                     { private header "__format/format_args.h" }
+      module format_context {
+        private header "__format/format_context.h"
+        export optional
+        export locale
+      }
+      module format_error                    { private header "__format/format_error.h" }
+      module format_fwd                      { private header "__format/format_fwd.h" }
+      module format_parse_context            { private header "__format/format_parse_context.h" }
+      module format_string                   { private header "__format/format_string.h" }
+      module format_to_n_result              { private header "__format/format_to_n_result.h" }
+      module formatter                       { private header "__format/formatter.h" }
+      module formatter_bool                  { private header "__format/formatter_bool.h" }
+      module formatter_char                  { private header "__format/formatter_char.h" }
+      module formatter_floating_point        { private header "__format/formatter_floating_point.h" }
+      module formatter_integer               { private header "__format/formatter_integer.h" }
+      module formatter_integral              { private header "__format/formatter_integral.h" }
+      module formatter_output                { private header "__format/formatter_output.h" }
+      module formatter_pointer               { private header "__format/formatter_pointer.h" }
+      module formatter_string                { private header "__format/formatter_string.h" }
+      module parser_std_format_spec          { private header "__format/parser_std_format_spec.h" }
+      module unicode                         { private header "__format/unicode.h" }
+    }
+  }
+  module forward_list {
+    header "forward_list"
+    export initializer_list
+    export *
+  }
+  module fstream {
+
+    header "fstream"
+    export *
+  }
+  module functional {
+    header "functional"
+    export *
+
+    module __functional {
+      module binary_function            { private header "__functional/binary_function.h" }
+      module binary_negate              { private header "__functional/binary_negate.h" }
+      module bind                       { private header "__functional/bind.h" }
+      module bind_back                  { private header "__functional/bind_back.h" }
+      module bind_front                 { private header "__functional/bind_front.h" }
+      module binder1st                  { private header "__functional/binder1st.h" }
+      module binder2nd                  { private header "__functional/binder2nd.h" }
+      module boyer_moore_searcher       { private header "__functional/boyer_moore_searcher.h" }
+      module compose                    { private header "__functional/compose.h" }
+      module default_searcher           { private header "__functional/default_searcher.h" }
+      module function                   { private header "__functional/function.h" }
+      module hash                       { private header "__functional/hash.h" }
+      module identity                   { private header "__functional/identity.h" }
+      module invoke                     { private header "__functional/invoke.h" }
+      module is_transparent             { private header "__functional/is_transparent.h" }
+      module mem_fn                     { private header "__functional/mem_fn.h" }
+      module mem_fun_ref                { private header "__functional/mem_fun_ref.h" }
+      module not_fn                     { private header "__functional/not_fn.h" }
+      module operations                 { private header "__functional/operations.h" }
+      module perfect_forward            { private header "__functional/perfect_forward.h" }
+      module pointer_to_binary_function { private header "__functional/pointer_to_binary_function.h" }
+      module pointer_to_unary_function  { private header "__functional/pointer_to_unary_function.h" }
+      module ranges_operations          { private header "__functional/ranges_operations.h" }
+      module reference_wrapper          { private header "__functional/reference_wrapper.h" }
+      module unary_function             { private header "__functional/unary_function.h" }
+      module unary_negate               { private header "__functional/unary_negate.h" }
+      module unwrap_ref                 { private header "__functional/unwrap_ref.h" }
+      module weak_result_type           { private header "__functional/weak_result_type.h" }
+    }
+  }
+  module future {
+
+    header "future"
+    export *
+  }
+  module initializer_list {
+    header "initializer_list"
+    export *
+  }
+  module iomanip {
+
+    header "iomanip"
+    export *
+  }
+  module ios {
+
+    header "ios"
+    export iosfwd
+    export *
+
+    module __ios {
+      module fpos { private header "__ios/fpos.h" }
+    }
+  }
+  module iosfwd {
+    header "iosfwd"
+    export *
+  }
+  module iostream {
+
+    header "iostream"
+    export ios
+    export streambuf
+    export istream
+    export ostream
+    export *
+  }
+  module istream {
+
+    header "istream"
+    // FIXME: should re-export ios, streambuf?
+    export *
+  }
+  module iterator {
+    header "iterator"
+    export *
+
+    module __iterator {
+      module access                { private header "__iterator/access.h" }
+      module advance               { private header "__iterator/advance.h" }
+      module back_insert_iterator  { private header "__iterator/back_insert_iterator.h" }
+      module bounded_iter          { private header "__iterator/bounded_iter.h" }
+      module common_iterator       { private header "__iterator/common_iterator.h" }
+      module concepts              { private header "__iterator/concepts.h" }
+      module counted_iterator      { private header "__iterator/counted_iterator.h" }
+      module data                  { private header "__iterator/data.h" }
+      module default_sentinel      { private header "__iterator/default_sentinel.h" }
+      module distance              { private header "__iterator/distance.h" }
+      module empty                 { private header "__iterator/empty.h" }
+      module erase_if_container    { private header "__iterator/erase_if_container.h" }
+      module front_insert_iterator { private header "__iterator/front_insert_iterator.h" }
+      module incrementable_traits  { private header "__iterator/incrementable_traits.h" }
+      module indirectly_comparable { private header "__iterator/indirectly_comparable.h" }
+      module insert_iterator       { private header "__iterator/insert_iterator.h" }
+      module istream_iterator      { private header "__iterator/istream_iterator.h" }
+      module istreambuf_iterator   { private header "__iterator/istreambuf_iterator.h" }
+      module iter_move             { private header "__iterator/iter_move.h" }
+      module iter_swap             { private header "__iterator/iter_swap.h" }
+      module iterator              { private header "__iterator/iterator.h" }
+      module iterator_traits       { private header "__iterator/iterator_traits.h" }
+      module mergeable             { private header "__iterator/mergeable.h" }
+      module move_iterator         { private header "__iterator/move_iterator.h" }
+      module move_sentinel         { private header "__iterator/move_sentinel.h" }
+      module next                  { private header "__iterator/next.h" }
+      module ostream_iterator      { private header "__iterator/ostream_iterator.h" }
+      module ostreambuf_iterator   {
+        private header "__iterator/ostreambuf_iterator.h"
+        export iosfwd
+      }
+      module permutable            { private header "__iterator/permutable.h" }
+      module prev                  { private header "__iterator/prev.h" }
+      module projected             { private header "__iterator/projected.h" }
+      module readable_traits       { private header "__iterator/readable_traits.h" }
+      module reverse_access        { private header "__iterator/reverse_access.h" }
+      module reverse_iterator      { private header "__iterator/reverse_iterator.h" }
+      module size                  { private header "__iterator/size.h" }
+      module sortable              { private header "__iterator/sortable.h" }
+      module unreachable_sentinel  { private header "__iterator/unreachable_sentinel.h" }
+      module wrap_iter             { private header "__iterator/wrap_iter.h" }
+    }
+  }
+  module latch {
+
+    header "latch"
+    export *
+  }
+
+  module __debug_utils {
+    module randomize_range { private header "__debug_utils/randomize_range.h" }
+  }
+
+  module limits {
+    header "limits"
+    export *
+  }
+  module list {
+    header "list"
+    export initializer_list
+    export *
+  }
+  module locale {
+
+    header "locale"
+    export *
+  }
+  module map {
+    header "map"
+    export initializer_list
+    export *
+  }
+  module memory {
+    header "memory"
+    export *
+
+    module __memory {
+      module addressof                       { private header "__memory/addressof.h" }
+      module allocate_at_least               { private header "__memory/allocate_at_least.h" }
+      module allocation_guard                { private header "__memory/allocation_guard.h" }
+      module allocator                       { private header "__memory/allocator.h" }
+      module allocator_arg_t                 { private header "__memory/allocator_arg_t.h" }
+      module allocator_traits                { private header "__memory/allocator_traits.h" }
+      module assume_aligned                  { private header "__memory/assume_aligned.h" }
+      module auto_ptr                        { private header "__memory/auto_ptr.h" }
+      module compressed_pair                 { private header "__memory/compressed_pair.h" }
+      module concepts                        { private header "__memory/concepts.h" }
+      module construct_at                    { private header "__memory/construct_at.h" }
+      module pointer_traits                  { private header "__memory/pointer_traits.h" }
+      module ranges_construct_at             { private header "__memory/ranges_construct_at.h" }
+      module ranges_uninitialized_algorithms { private header "__memory/ranges_uninitialized_algorithms.h" }
+      module raw_storage_iterator            { private header "__memory/raw_storage_iterator.h" }
+      module shared_ptr                      { private header "__memory/shared_ptr.h" }
+      module swap_allocator                  { private header "__memory/swap_allocator.h" }
+      module temporary_buffer                { private header "__memory/temporary_buffer.h" }
+      module uninitialized_algorithms        { private header "__memory/uninitialized_algorithms.h" }
+      module unique_ptr                      { private header "__memory/unique_ptr.h" }
+      module uses_allocator                  { private header "__memory/uses_allocator.h" }
+      module voidify                         { private header "__memory/voidify.h" }
+    }
+  }
+  module mutex {
+
+    header "mutex"
+    export *
+  }
+  module new {
+    header "new"
+    export *
+  }
+  module numbers {
+    header "numbers"
+    export *
+  }
+  module numeric {
+    header "numeric"
+    export *
+
+    module __numeric {
+      module accumulate               { private header "__numeric/accumulate.h" }
+      module adjacent_difference      { private header "__numeric/adjacent_difference.h" }
+      module exclusive_scan           { private header "__numeric/exclusive_scan.h" }
+      module gcd_lcm                  { private header "__numeric/gcd_lcm.h" }
+      module inclusive_scan           { private header "__numeric/inclusive_scan.h" }
+      module inner_product            { private header "__numeric/inner_product.h" }
+      module iota                     { private header "__numeric/iota.h" }
+      module midpoint                 { private header "__numeric/midpoint.h" }
+      module partial_sum              { private header "__numeric/partial_sum.h" }
+      module reduce                   { private header "__numeric/reduce.h" }
+      module transform_exclusive_scan { private header "__numeric/transform_exclusive_scan.h" }
+      module transform_inclusive_scan { private header "__numeric/transform_inclusive_scan.h" }
+      module transform_reduce         { private header "__numeric/transform_reduce.h" }
+    }
+  }
+  module optional {
+    header "optional"
+    export *
+  }
+  module ostream {
+
+    header "ostream"
+    // FIXME: should re-export ios, streambuf?
+    export *
+  }
+  module queue {
+    header "queue"
+    export initializer_list
+    export *
+  }
+  module random {
+    header "random"
+    export initializer_list
+    export *
+
+    module __random {
+      module bernoulli_distribution          { private header "__random/bernoulli_distribution.h" }
+      module binomial_distribution           { private header "__random/binomial_distribution.h" }
+      module cauchy_distribution             { private header "__random/cauchy_distribution.h" }
+      module chi_squared_distribution        { private header "__random/chi_squared_distribution.h" }
+      module clamp_to_integral               { private header "__random/clamp_to_integral.h" }
+      module default_random_engine           { private header "__random/default_random_engine.h" }
+      module discard_block_engine            { private header "__random/discard_block_engine.h" }
+      module discrete_distribution           { private header "__random/discrete_distribution.h" }
+      module exponential_distribution        { private header "__random/exponential_distribution.h" }
+      module extreme_value_distribution      { private header "__random/extreme_value_distribution.h" }
+      module fisher_f_distribution           { private header "__random/fisher_f_distribution.h" }
+      module gamma_distribution              { private header "__random/gamma_distribution.h" }
+      module generate_canonical              { private header "__random/generate_canonical.h" }
+      module geometric_distribution          { private header "__random/geometric_distribution.h" }
+      module independent_bits_engine         { private header "__random/independent_bits_engine.h" }
+      module is_seed_sequence                { private header "__random/is_seed_sequence.h" }
+      module is_valid                        { private header "__random/is_valid.h" }
+      module knuth_b                         { private header "__random/knuth_b.h" }
+      module linear_congruential_engine      { private header "__random/linear_congruential_engine.h" }
+      module log2                            { private header "__random/log2.h" }
+      module lognormal_distribution          { private header "__random/lognormal_distribution.h" }
+      module mersenne_twister_engine         { private header "__random/mersenne_twister_engine.h" }
+      module negative_binomial_distribution  { private header "__random/negative_binomial_distribution.h" }
+      module normal_distribution             { private header "__random/normal_distribution.h" }
+      module piecewise_constant_distribution { private header "__random/piecewise_constant_distribution.h" }
+      module piecewise_linear_distribution   { private header "__random/piecewise_linear_distribution.h" }
+      module poisson_distribution            { private header "__random/poisson_distribution.h" }
+      module random_device                   { private header "__random/random_device.h" }
+      module ranlux                          { private header "__random/ranlux.h" }
+      module seed_seq                        { private header "__random/seed_seq.h" }
+      module shuffle_order_engine            { private header "__random/shuffle_order_engine.h" }
+      module student_t_distribution          { private header "__random/student_t_distribution.h" }
+      module subtract_with_carry_engine      { private header "__random/subtract_with_carry_engine.h" }
+      module uniform_int_distribution        { private header "__random/uniform_int_distribution.h" }
+      module uniform_random_bit_generator    { private header "__random/uniform_random_bit_generator.h" }
+      module uniform_real_distribution       { private header "__random/uniform_real_distribution.h" }
+      module weibull_distribution            { private header "__random/weibull_distribution.h" }
+    }
+  }
+  module ranges {
+    header "ranges"
+    export compare
+    export initializer_list
+    export iterator
+    export *
+
+    module __ranges {
+      module access                 { private header "__ranges/access.h" }
+      module all                    {
+        private header "__ranges/all.h"
+        export functional.__functional.compose
+        export functional.__functional.perfect_forward
+      }
+      module common_view            { private header "__ranges/common_view.h" }
+      module concepts               { private header "__ranges/concepts.h" }
+      module copyable_box           { private header "__ranges/copyable_box.h" }
+      module counted                {
+        private header "__ranges/counted.h"
+        export span
+      }
+      module dangling               { private header "__ranges/dangling.h" }
+      module data                   { private header "__ranges/data.h" }
+      module drop_view              { private header "__ranges/drop_view.h" }
+      module empty                  { private header "__ranges/empty.h" }
+      module empty_view             { private header "__ranges/empty_view.h" }
+      module enable_borrowed_range  { private header "__ranges/enable_borrowed_range.h" }
+      module enable_view            { private header "__ranges/enable_view.h" }
+      module filter_view            { private header "__ranges/filter_view.h" }
+      module iota_view              { private header "__ranges/iota_view.h" }
+      module join_view              { private header "__ranges/join_view.h" }
+      module lazy_split_view        { private header "__ranges/lazy_split_view.h" }
+      module non_propagating_cache  { private header "__ranges/non_propagating_cache.h" }
+      module owning_view            { private header "__ranges/owning_view.h" }
+      module range_adaptor          { private header "__ranges/range_adaptor.h" }
+      module rbegin                 { private header "__ranges/rbegin.h" }
+      module ref_view               { private header "__ranges/ref_view.h" }
+      module rend                   { private header "__ranges/rend.h" }
+      module reverse_view           { private header "__ranges/reverse_view.h" }
+      module single_view            { private header "__ranges/single_view.h" }
+      module size                   { private header "__ranges/size.h" }
+      module subrange               { private header "__ranges/subrange.h" }
+      module take_view              { private header "__ranges/take_view.h" }
+      module transform_view         {
+        private header "__ranges/transform_view.h"
+        export functional.__functional.bind_back
+        export functional.__functional.perfect_forward
+      }
+      module view_interface         { private header "__ranges/view_interface.h" }
+      module views                  { private header "__ranges/views.h" }
+      module zip_view               { private header "__ranges/zip_view.h" }
+    }
+  }
+  module ratio {
+    header "ratio"
+    export *
+  }
+  module regex {
+
+    header "regex"
+    export initializer_list
+    export *
+  }
+  module scoped_allocator {
+    header "scoped_allocator"
+    export *
+  }
+  module semaphore {
+
+    header "semaphore"
+    export *
+  }
+  module set {
+    header "set"
+    export initializer_list
+    export *
+  }
+  module shared_mutex {
+
+    header "shared_mutex"
+    export version
+  }
+  module span {
+    header "span"
+    export ranges.__ranges.enable_borrowed_range
+    export version
+    module span_fwd { private header "__fwd/span.h" }
+  }
+  module sstream {
+
+    header "sstream"
+    // FIXME: should re-export istream, ostream, ios, streambuf, string?
+    export *
+  }
+  module stack {
+    header "stack"
+    export initializer_list
+    export *
+  }
+  module stdexcept {
+    header "stdexcept"
+    export *
+  }
+  module streambuf {
+
+    header "streambuf"
+    export *
+  }
+  module string {
+    header "string"
+    export initializer_list
+    export string_view
+    module __string {
+      module char_traits           { private header "__string/char_traits.h" }
+      module extern_template_lists { private header "__string/extern_template_lists.h" }
+    }
+    export *
+  }
+  module string_view {
+    header "string_view"
+    export initializer_list
+    export *
+    module string_view_fwd { private header "__fwd/string_view.h" }
+  }
+  module strstream {
+
+    header "strstream"
+    export *
+  }
+  module system_error {
+    header "system_error"
+    export *
+  }
+  module thread {
+
+    header "thread"
+    export *
+
+    module __thread {
+      module poll_with_backoff    { private header "__thread/poll_with_backoff.h" }
+      module timed_backoff_policy { private header "__thread/timed_backoff_policy.h" }
+    }
+  }
+  module tuple {
+    header "tuple"
+    export *
+  }
+  module type_traits {
+    header "type_traits"
+    export functional.__functional.unwrap_ref
+    export *
+
+    module add_const                          { private header "__type_traits/add_const.h" }
+    module add_cv                             { private header "__type_traits/add_cv.h" }
+    module add_lvalue_reference               { private header "__type_traits/add_lvalue_reference.h" }
+    module add_pointer                        { private header "__type_traits/add_pointer.h" }
+    module add_rvalue_reference               { private header "__type_traits/add_rvalue_reference.h" }
+    module add_volatile                       { private header "__type_traits/add_volatile.h" }
+    module aligned_storage                    { private header "__type_traits/aligned_storage.h" }
+    module aligned_union                      { private header "__type_traits/aligned_union.h" }
+    module alignment_of                       { private header "__type_traits/alignment_of.h" }
+    module apply_cv                           { private header "__type_traits/apply_cv.h" }
+    module common_reference                   { private header "__type_traits/common_reference.h" }
+    module common_type                        { private header "__type_traits/common_type.h" }
+    module conditional                        { private header "__type_traits/conditional.h" }
+    module conjunction                        { private header "__type_traits/conjunction.h" }
+    module copy_cv                            { private header "__type_traits/copy_cv.h" }
+    module copy_cvref                         { private header "__type_traits/copy_cvref.h" }
+    module decay                              { private header "__type_traits/decay.h" }
+    module disjunction                        { private header "__type_traits/disjunction.h" }
+    module enable_if                          { private header "__type_traits/enable_if.h" }
+    module extent                             { private header "__type_traits/extent.h" }
+    module has_unique_object_representation   { private header "__type_traits/has_unique_object_representation.h" }
+    module has_virtual_destructor             { private header "__type_traits/has_virtual_destructor.h" }
+    module integral_constant                  { private header "__type_traits/integral_constant.h" }
+    module is_abstract                        { private header "__type_traits/is_abstract.h" }
+    module is_aggregate                       { private header "__type_traits/is_aggregate.h" }
+    module is_arithmetic                      { private header "__type_traits/is_arithmetic.h" }
+    module is_array                           { private header "__type_traits/is_array.h" }
+    module is_assignable                      { private header "__type_traits/is_assignable.h" }
+    module is_base_of                         { private header "__type_traits/is_base_of.h" }
+    module is_bounded_array                   { private header "__type_traits/is_bounded_array.h" }
+    module is_callable                        { private header "__type_traits/is_callable.h" }
+    module is_class                           { private header "__type_traits/is_class.h" }
+    module is_compound                        { private header "__type_traits/is_compound.h" }
+    module is_const                           { private header "__type_traits/is_const.h" }
+    module is_constant_evaluated              { private header "__type_traits/is_constant_evaluated.h" }
+    module is_constructible                   { private header "__type_traits/is_constructible.h" }
+    module is_convertible                     { private header "__type_traits/is_convertible.h" }
+    module is_copy_assignable                 { private header "__type_traits/is_copy_assignable.h" }
+    module is_copy_constructible              { private header "__type_traits/is_copy_constructible.h" }
+    module is_core_convertible                { private header "__type_traits/is_core_convertible.h" }
+    module is_default_constructible           { private header "__type_traits/is_default_constructible.h" }
+    module is_destructible                    { private header "__type_traits/is_destructible.h" }
+    module is_empty                           { private header "__type_traits/is_empty.h" }
+    module is_enum                            { private header "__type_traits/is_enum.h" }
+    module is_final                           { private header "__type_traits/is_final.h" }
+    module is_floating_point                  { private header "__type_traits/is_floating_point.h" }
+    module is_function                        { private header "__type_traits/is_function.h" }
+    module is_fundamental                     { private header "__type_traits/is_fundamental.h" }
+    module is_integral                        { private header "__type_traits/is_integral.h" }
+    module is_literal_type                    { private header "__type_traits/is_literal_type.h" }
+    module is_member_function_pointer         { private header "__type_traits/is_member_function_pointer.h" }
+    module is_member_object_pointer           { private header "__type_traits/is_member_object_pointer.h" }
+    module is_member_pointer                  { private header "__type_traits/is_member_pointer.h" }
+    module is_move_assignable                 { private header "__type_traits/is_move_assignable.h" }
+    module is_move_constructible              { private header "__type_traits/is_move_constructible.h" }
+    module is_nothrow_assignable              { private header "__type_traits/is_nothrow_assignable.h" }
+    module is_nothrow_constructible           { private header "__type_traits/is_nothrow_constructible.h" }
+    module is_nothrow_convertible             { private header "__type_traits/is_nothrow_convertible.h" }
+    module is_nothrow_copy_assignable         { private header "__type_traits/is_nothrow_copy_assignable.h" }
+    module is_nothrow_copy_constructible      { private header "__type_traits/is_nothrow_copy_constructible.h" }
+    module is_nothrow_default_constructible   { private header "__type_traits/is_nothrow_default_constructible.h" }
+    module is_nothrow_destructible            { private header "__type_traits/is_nothrow_destructible.h" }
+    module is_nothrow_move_assignable         { private header "__type_traits/is_nothrow_move_assignable.h" }
+    module is_nothrow_move_constructible      { private header "__type_traits/is_nothrow_move_constructible.h" }
+    module is_null_pointer                    { private header "__type_traits/is_null_pointer.h" }
+    module is_object                          { private header "__type_traits/is_object.h" }
+    module is_pod                             { private header "__type_traits/is_pod.h" }
+    module is_pointer                         { private header "__type_traits/is_pointer.h" }
+    module is_polymorphic                     { private header "__type_traits/is_polymorphic.h" }
+    module is_primary_template                { private header "__type_traits/is_primary_template.h" }
+    module is_reference                       { private header "__type_traits/is_reference.h" }
+    module is_reference_wrapper               { private header "__type_traits/is_reference_wrapper.h" }
+    module is_referenceable                   { private header "__type_traits/is_referenceable.h" }
+    module is_same                            { private header "__type_traits/is_same.h" }
+    module is_scalar                          { private header "__type_traits/is_scalar.h" }
+    module is_scoped_enum                     { private header "__type_traits/is_scoped_enum.h" }
+    module is_signed                          { private header "__type_traits/is_signed.h" }
+    module is_signed_integer                  { private header "__type_traits/is_signed_integer.h" }
+    module is_standard_layout                 { private header "__type_traits/is_standard_layout.h" }
+    module is_trivial                         { private header "__type_traits/is_trivial.h" }
+    module is_trivially_assignable            { private header "__type_traits/is_trivially_assignable.h" }
+    module is_trivially_constructible         { private header "__type_traits/is_trivially_constructible.h" }
+    module is_trivially_copy_assignable       { private header "__type_traits/is_trivially_copy_assignable.h" }
+    module is_trivially_copy_constructible    { private header "__type_traits/is_trivially_copy_constructible.h" }
+    module is_trivially_copyable              { private header "__type_traits/is_trivially_copyable.h" }
+    module is_trivially_default_constructible { private header "__type_traits/is_trivially_default_constructible.h" }
+    module is_trivially_destructible          { private header "__type_traits/is_trivially_destructible.h" }
+    module is_trivially_move_assignable       { private header "__type_traits/is_trivially_move_assignable.h" }
+    module is_trivially_move_constructible    { private header "__type_traits/is_trivially_move_constructible.h" }
+    module is_unbounded_array                 { private header "__type_traits/is_unbounded_array.h" }
+    module is_union                           { private header "__type_traits/is_union.h" }
+    module is_unsigned                        { private header "__type_traits/is_unsigned.h" }
+    module is_unsigned_integer                { private header "__type_traits/is_unsigned_integer.h" }
+    module is_valid_expansion                 { private header "__type_traits/is_valid_expansion.h" }
+    module is_void                            { private header "__type_traits/is_void.h" }
+    module is_volatile                        { private header "__type_traits/is_volatile.h" }
+    module lazy                               { private header "__type_traits/lazy.h" }
+    module make_32_64_or_128_bit              { private header "__type_traits/make_32_64_or_128_bit.h" }
+    module make_signed                        { private header "__type_traits/make_signed.h" }
+    module make_unsigned                      { private header "__type_traits/make_unsigned.h" }
+    module nat                                { private header "__type_traits/nat.h" }
+    module negation                           { private header "__type_traits/negation.h" }
+    module promote                            { private header "__type_traits/promote.h" }
+    module rank                               { private header "__type_traits/rank.h" }
+    module remove_all_extents                 { private header "__type_traits/remove_all_extents.h" }
+    module remove_const                       { private header "__type_traits/remove_const.h" }
+    module remove_cv                          { private header "__type_traits/remove_cv.h" }
+    module remove_cvref                       { private header "__type_traits/remove_cvref.h" }
+    module remove_extent                      { private header "__type_traits/remove_extent.h" }
+    module remove_pointer                     { private header "__type_traits/remove_pointer.h" }
+    module remove_reference                   { private header "__type_traits/remove_reference.h" }
+    module remove_volatile                    { private header "__type_traits/remove_volatile.h" }
+    module type_identity                      { private header "__type_traits/type_identity.h" }
+    module type_list                          { private header "__type_traits/type_list.h" }
+    module underlying_type                    { private header "__type_traits/underlying_type.h" }
+    module void_t                             { private header "__type_traits/void_t.h" }
+  }
+  module typeindex {
+    header "typeindex"
+    export *
+  }
+  module typeinfo {
+    header "typeinfo"
+    export *
+  }
+  module unordered_map {
+    header "unordered_map"
+    export initializer_list
+    export *
+  }
+  module unordered_set {
+    header "unordered_set"
+    export initializer_list
+    export *
+  }
+  module utility {
+    header "utility"
+    export initializer_list
+    export *
+
+    module __utility {
+      module as_const            { private header "__utility/as_const.h" }
+      module auto_cast           { private header "__utility/auto_cast.h" }
+      module cmp                 { private header "__utility/cmp.h" }
+      module declval             { private header "__utility/declval.h" }
+      module exchange            { private header "__utility/exchange.h" }
+      module forward             { private header "__utility/forward.h" }
+      module in_place            { private header "__utility/in_place.h" }
+      module integer_sequence    { private header "__utility/integer_sequence.h" }
+      module move                { private header "__utility/move.h" }
+      module pair                { private header "__utility/pair.h" }
+      module piecewise_construct { private header "__utility/piecewise_construct.h" }
+      module priority_tag        { private header "__utility/priority_tag.h" }
+      module rel_ops             { private header "__utility/rel_ops.h" }
+      module swap                { private header "__utility/swap.h" }
+      module to_underlying       { private header "__utility/to_underlying.h" }
+      module transaction         { private header "__utility/transaction.h" }
+      module unreachable         { private header "__utility/unreachable.h" }
+    }
+  }
+  module valarray {
+    header "valarray"
+    export initializer_list
+    export *
+  }
+  module variant {
+    header "variant"
+    export *
+
+    module __variant {
+      module monostate { private header "__variant/monostate.h" }
+    }
+  }
+  module vector {
+    header "vector"
+    export initializer_list
+    export *
+  }
+  module version {
+    header "version"
+    export *
+  }
+
+  // FIXME: These should be private.
+  module __assert            {         header "__assert"            export * }
+  module __availability      { private header "__availability"      export * }
+  module __bit_reference     { private header "__bit_reference"     export * }
+  module __bits              { private header "__bits"              export * }
+  module __debug             {         header "__debug"             export * }
+  module __errc              { private header "__errc"              export * }
+  module __hash_table        {         header "__hash_table"        export * }
+  module __locale            {
+
+    private header "__locale" export *
+  }
+  module __mbstate_t         { private header "__mbstate_t.h"       export * }
+  module __mutex_base        { private header "__mutex_base"        export * }
+  module __node_handle       { private header "__node_handle"       export * }
+  module __split_buffer      { private header "__split_buffer"      export * }
+  module __std_stream        {
+
+    private header "__std_stream" export *
+  }
+  module __threading_support {         header "__threading_support" export * }
+  module __tree              {         header "__tree"              export * }
+  module __tuple             { private header "__tuple"             export * }
+  module __undef_macros      {         header "__undef_macros"      export * }
+  module __verbose_abort     {         header "__verbose_abort"     export * }
+
+  module experimental {
+    requires cplusplus11
+
+    module algorithm {
+      header "experimental/algorithm"
+      export *
+    }
+    module coroutine {
+      requires coroutines
+      header "experimental/coroutine"
+      export *
+    }
+    module deque {
+      header "experimental/deque"
+      export *
+    }
+    module forward_list {
+      header "experimental/forward_list"
+      export *
+    }
+    module functional {
+      header "experimental/functional"
+      export *
+    }
+    module iterator {
+      header "experimental/iterator"
+      export *
+    }
+    module list {
+      header "experimental/list"
+      export *
+    }
+    module map {
+      header "experimental/map"
+      export *
+    }
+    module memory_resource {
+      header "experimental/memory_resource"
+      export *
+    }
+    module propagate_const {
+      header "experimental/propagate_const"
+      export *
+    }
+    module regex {
+
+      header "experimental/regex"
+      export *
+    }
+    module simd {
+      header "experimental/simd"
+      export *
+    }
+    module set {
+      header "experimental/set"
+      export *
+    }
+    module span {
+      header "span"
+      export *
+    }
+    module string {
+      header "experimental/string"
+      export *
+    }
+    module type_traits {
+      header "experimental/type_traits"
+      export *
+    }
+    module unordered_map {
+      header "experimental/unordered_map"
+      export *
+    }
+    module unordered_set {
+      header "experimental/unordered_set"
+      export *
+    }
+    module utility {
+      header "experimental/utility"
+      export *
+    }
+    module vector {
+      header "experimental/vector"
+      export *
+    }
+    // FIXME these should be private
+    module __memory {
+      header "experimental/__memory"
+      export *
+    }
+  } // end experimental
+}
diff --git a/utils/bazel/llvm-project-overlay/libcxxabi/BUILD.bazel b/utils/bazel/llvm-project-overlay/libcxxabi/BUILD.bazel
new file mode 100644
index 000000000000..daddb98dbddc
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxxabi/BUILD.bazel
@@ -0,0 +1,89 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "libcxxabi_headers",
+    srcs = [
+        "include/__cxxabi_config.h",
+        "include/cxxabi.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "libll_cxxabi",
+    srcs = [
+        # C++ABI files
+        "src/cxa_aux_runtime.cpp",
+        "src/cxa_default_handlers.cpp",
+        "src/cxa_demangle.cpp",
+        "src/cxa_exception_storage.cpp",
+        "src/cxa_guard.cpp",
+        "src/cxa_handlers.cpp",
+        "src/cxa_thread_atexit.cpp",
+        "src/cxa_vector.cpp",
+        "src/cxa_virtual.cpp",
+
+        # C++ STL files
+        "src/stdlib_exception.cpp",
+        "src/stdlib_stdexcept.cpp",
+        "src/stdlib_typeinfo.cpp",
+
+        # Internal files
+        "src/abort_message.cpp",
+        "src/fallback_malloc.cpp",
+        "src/private_typeinfo.cpp",
+
+        # New/Delete
+        "src/stdlib_new_delete.cpp",
+
+        # Exceptions
+        "src/cxa_exception.cpp",
+        "src/cxa_personality.cpp",
+    ],
+    hdrs = glob(["include/**"]) + [
+        # C++ABI files.
+        "src/cxa_handlers.h",
+        "src/cxa_guard_impl.h",
+
+        # C++ STL files.
+        "src/abort_message.h",
+        "src/fallback_malloc.h",
+        "src/private_typeinfo.h",
+
+        # Exceptions.
+        "src/cxa_exception.h",
+
+        # Demangle
+        "src/demangle/DemangleConfig.h",
+        "src/demangle/ItaniumDemangle.h",
+        "src/demangle/ItaniumNodes.def",
+        "src/demangle/StringView.h",
+        "src/demangle/Utility.h",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-std=c++20",
+        "-faligned-allocation",
+        "-funwind-tables",
+        "-fstrict-aliasing",
+        "-fvisibility-inlines-hidden",
+    ],
+    # Adding these headers via the data field lets us include them via
+    # a custom CPLUS_INCLUDE_PATH setting in the compilation environment for
+    # ll_bootstrap_library. So no include attribute needed to match this.
+    data = [
+        ":libcxxabi_headers",
+        "//libcxx:libcxx_headers",
+        "//libcxx:libcxx_sources",
+    ],
+    defines = [
+        "LIBCXX_BUILDING_LIBCXXABI",
+        "HAVE___CXA_THREAD_ATEXIT_IMPL",  # 3 underscores.
+        "LIBCXXABI_USE_LLVM_UNWINDER",
+        "_LIBCPP_BUILDING_LIBRARY",
+        "_LIBCXXABI_BUILDING_LIBRARY",
+        "_LIBCXXABI_LINK_PTHREAD_LIB",
+    ],
+    exposed_hdrs = [":libcxxabi_headers"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel b/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
index f8448fb0e726..88c1aa2ddced 100644
--- a/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
+++ b/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
@@ -19,3 +19,53 @@ cc_library(
     ],
     strip_include_prefix = "include",
 )
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "libunwind_headers",
+    srcs = glob(["include/**"]),
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "libll_unwind",
+    srcs = [
+        "src/Unwind-EHABI.cpp",
+        "src/Unwind-seh.cpp",
+        "src/Unwind-sjlj.c",
+        "src/UnwindLevel1.c",
+        "src/UnwindLevel1-gcc-ext.c",
+        "src/UnwindRegistersRestore.S",
+        "src/UnwindRegistersSave.S",
+        "src/libunwind.cpp",
+    ],
+    hdrs = [
+        "src/AddressSpace.hpp",
+        "src/CompactUnwinder.hpp",
+        "src/DwarfInstructions.hpp",
+        "src/DwarfParser.hpp",
+        "src/EHHeaderParser.hpp",
+        "src/FrameHeaderCache.hpp",
+        "src/RWMutex.hpp",
+        "src/Registers.hpp",
+        "src/Unwind-EHABI.h",
+        "src/UnwindCursor.hpp",
+        "src/assembly.h",
+        "src/cet_unwind.h",
+        "src/config.h",
+        "src/dwarf2.h",
+        "src/libunwind_ext.h",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-faligned-allocation",
+        "-funwind-tables",
+        "-fstrict-aliasing",
+        "-fvisibility-inlines-hidden",
+    ],
+    exposed_hdrs = [
+        ":libunwind_headers",
+    ],
+    visibility = ["//visibility:public"],
+    deps = ["//compiler-rt:libll_compiler-rt"],
+)
diff --git a/utils/bazel/llvm-project-overlay/openmp/BUILD.bazel b/utils/bazel/llvm-project-overlay/openmp/BUILD.bazel
new file mode 100644
index 000000000000..deba9e001ad8
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/openmp/BUILD.bazel
@@ -0,0 +1,83 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+LIBOMP_SOURCES = [
+    "runtime/src/kmp_alloc.cpp",
+    "runtime/src/kmp_atomic.cpp",
+    "runtime/src/kmp_csupport.cpp",
+    "runtime/src/kmp_debug.cpp",
+    "runtime/src/kmp_itt.cpp",
+    "runtime/src/kmp_environment.cpp",
+    "runtime/src/kmp_error.cpp",
+    "runtime/src/kmp_global.cpp",
+    "runtime/src/kmp_i18n.cpp",
+    "runtime/src/kmp_io.cpp",
+    "runtime/src/kmp_runtime.cpp",
+    "runtime/src/kmp_settings.cpp",
+    "runtime/src/kmp_str.cpp",
+    "runtime/src/kmp_tasking.cpp",
+    "runtime/src/kmp_threadprivate.cpp",
+    "runtime/src/kmp_utility.cpp",
+    "runtime/src/kmp_barrier.cpp",
+    "runtime/src/kmp_wait_release.cpp",
+    "runtime/src/kmp_affinity.cpp",
+    "runtime/src/kmp_dispatch.cpp",
+    "runtime/src/kmp_lock.cpp",
+    "runtime/src/kmp_sched.cpp",
+
+    # Linux specific.
+    "runtime/src/z_Linux_util.cpp",
+    "runtime/src/kmp_gsupport.cpp",
+
+    # Additional files.
+    "runtime/src/thirdparty/ittnotify/ittnotify_static.cpp",  # itt notify.
+    "runtime/src/kmp_debugger.cpp",  # debugger
+    # "runtime/src/kmp_stats.cpp", # stats
+    # "runtime/src/kmp_stats_timing.cpp", # stats
+    "runtime/src/kmp_taskdeps.cpp",
+    "runtime/src/kmp_cancel.cpp",
+
+    # Other.
+    "runtime/src/kmp_ftn_cdecl.cpp",
+    "runtime/src/kmp_ftn_extra.cpp",
+    "runtime/src/kmp_version.cpp",
+    "runtime/src/ompt-general.cpp",  # ompt
+    "runtime/src/ompt-specific.cpp",  # ompt, missing in CMake.
+    "runtime/src/ompd-specific.cpp",  # ompd
+
+    # GNU Asm.
+    "runtime/src/z_Linux_asm.S",
+]
+
+ll_library(
+    name = "libomp",
+    srcs = LIBOMP_SOURCES,
+    # Includes the following manually generated patched-in headers.
+    # We ultimately need these to be generated as part of the build.
+    # "runtime/src/kmp_config.h",
+    # "runtime/src/omp.h",
+    # "runtime/src/omp-tools.h",
+    # "runtime/src/kmp_i18n_default.inc",
+    # "runtime/src/kmp_i18n_id.inc",
+    hdrs = glob([
+        "runtime/src/*.inc",
+        "runtime/src/*.h",
+        "runtime/src/*.inl",
+        "runtime/src/thirdparty/ittnotify/*.h",
+        "runtime/src/thirdparty/ittnotify/legacy/*.h",
+    ]),
+    compile_flags = [
+        "-std=c++17",
+        "-Wno-switch",
+    ],
+    exposed_hdrs = [
+        "runtime/src/include/omp.h",
+    ],
+    exposed_relative_includes = [
+        "openmp/runtime/src/include",
+    ],
+    relative_includes = [
+        "openmp/runtime/src",
+        "openmp/runtime/src/thirdparty/ittnotify",
+    ],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/openmp/runtime/src/include/omp.h b/utils/bazel/llvm-project-overlay/openmp/runtime/src/include/omp.h
new file mode 100644
index 000000000000..618e09de86de
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/openmp/runtime/src/include/omp.h
@@ -0,0 +1,515 @@
+/*
+ * include/omp.h.var
+ */
+
+
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+
+#ifndef __OMP_H
+#   define __OMP_H
+
+#   include <stdlib.h>
+#   include <stdint.h>
+
+#   define KMP_VERSION_MAJOR    5
+#   define KMP_VERSION_MINOR    0
+#   define KMP_VERSION_BUILD    20140926
+#   define KMP_BUILD_DATE       "No_Timestamp"
+
+#   ifdef __cplusplus
+    extern "C" {
+#   endif
+
+#   define omp_set_affinity_format   ompc_set_affinity_format
+#   define omp_get_affinity_format   ompc_get_affinity_format
+#   define omp_display_affinity      ompc_display_affinity
+#   define omp_capture_affinity      ompc_capture_affinity
+
+#   if defined(_WIN32)
+#       define __KAI_KMPC_CONVENTION __cdecl
+#       ifndef __KMP_IMP
+#           define __KMP_IMP __declspec(dllimport)
+#       endif
+#   else
+#       define __KAI_KMPC_CONVENTION
+#       ifndef __KMP_IMP
+#           define __KMP_IMP
+#       endif
+#   endif
+
+    /* schedule kind constants */
+    typedef enum omp_sched_t {
+        omp_sched_static  = 1,
+        omp_sched_dynamic = 2,
+        omp_sched_guided  = 3,
+        omp_sched_auto    = 4,
+        omp_sched_monotonic = 0x80000000
+    } omp_sched_t;
+
+    /* set API functions */
+    extern void   __KAI_KMPC_CONVENTION  omp_set_num_threads (int);
+    extern void   __KAI_KMPC_CONVENTION  omp_set_dynamic     (int);
+    extern void   __KAI_KMPC_CONVENTION  omp_set_nested      (int);
+    extern void   __KAI_KMPC_CONVENTION  omp_set_max_active_levels (int);
+    extern void   __KAI_KMPC_CONVENTION  omp_set_schedule          (omp_sched_t, int);
+
+    /* query API functions */
+    extern int    __KAI_KMPC_CONVENTION  omp_get_num_threads  (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_dynamic      (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_nested       (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_max_threads  (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_thread_num   (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_num_procs    (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_in_parallel      (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_in_final         (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_active_level        (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_level               (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_ancestor_thread_num (int);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_team_size           (int);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_thread_limit        (void);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_max_active_levels   (void);
+    extern void   __KAI_KMPC_CONVENTION  omp_get_schedule            (omp_sched_t *, int *);
+    extern int    __KAI_KMPC_CONVENTION  omp_get_max_task_priority   (void);
+
+    /* lock API functions */
+    typedef struct omp_lock_t {
+        void * _lk;
+    } omp_lock_t;
+
+    extern void   __KAI_KMPC_CONVENTION  omp_init_lock    (omp_lock_t *);
+    extern void   __KAI_KMPC_CONVENTION  omp_set_lock     (omp_lock_t *);
+    extern void   __KAI_KMPC_CONVENTION  omp_unset_lock   (omp_lock_t *);
+    extern void   __KAI_KMPC_CONVENTION  omp_destroy_lock (omp_lock_t *);
+    extern int    __KAI_KMPC_CONVENTION  omp_test_lock    (omp_lock_t *);
+
+    /* nested lock API functions */
+    typedef struct omp_nest_lock_t {
+        void * _lk;
+    } omp_nest_lock_t;
+
+    extern void   __KAI_KMPC_CONVENTION  omp_init_nest_lock    (omp_nest_lock_t *);
+    extern void   __KAI_KMPC_CONVENTION  omp_set_nest_lock     (omp_nest_lock_t *);
+    extern void   __KAI_KMPC_CONVENTION  omp_unset_nest_lock   (omp_nest_lock_t *);
+    extern void   __KAI_KMPC_CONVENTION  omp_destroy_nest_lock (omp_nest_lock_t *);
+    extern int    __KAI_KMPC_CONVENTION  omp_test_nest_lock    (omp_nest_lock_t *);
+
+    /* OpenMP 5.0  Synchronization hints*/
+    typedef enum omp_sync_hint_t {
+        omp_sync_hint_none           = 0,
+        omp_lock_hint_none           = omp_sync_hint_none,
+        omp_sync_hint_uncontended    = 1,
+        omp_lock_hint_uncontended    = omp_sync_hint_uncontended,
+        omp_sync_hint_contended      = (1<<1),
+        omp_lock_hint_contended      = omp_sync_hint_contended,
+        omp_sync_hint_nonspeculative = (1<<2),
+        omp_lock_hint_nonspeculative = omp_sync_hint_nonspeculative,
+        omp_sync_hint_speculative    = (1<<3),
+        omp_lock_hint_speculative    = omp_sync_hint_speculative,
+        kmp_lock_hint_hle            = (1<<16),
+        kmp_lock_hint_rtm            = (1<<17),
+        kmp_lock_hint_adaptive       = (1<<18)
+    } omp_sync_hint_t;
+
+    /* lock hint type for dynamic user lock */
+    typedef omp_sync_hint_t omp_lock_hint_t;
+
+    /* hinted lock initializers */
+    extern void __KAI_KMPC_CONVENTION omp_init_lock_with_hint(omp_lock_t *, omp_lock_hint_t);
+    extern void __KAI_KMPC_CONVENTION omp_init_nest_lock_with_hint(omp_nest_lock_t *, omp_lock_hint_t);
+
+    /* time API functions */
+    extern double __KAI_KMPC_CONVENTION  omp_get_wtime (void);
+    extern double __KAI_KMPC_CONVENTION  omp_get_wtick (void);
+
+    /* OpenMP 4.0 */
+    extern int  __KAI_KMPC_CONVENTION  omp_get_default_device (void);
+    extern void __KAI_KMPC_CONVENTION  omp_set_default_device (int);
+    extern int  __KAI_KMPC_CONVENTION  omp_is_initial_device (void);
+    extern int  __KAI_KMPC_CONVENTION  omp_get_num_devices (void);
+    extern int  __KAI_KMPC_CONVENTION  omp_get_num_teams (void);
+    extern int  __KAI_KMPC_CONVENTION  omp_get_team_num (void);
+    extern int  __KAI_KMPC_CONVENTION  omp_get_cancellation (void);
+
+    /* OpenMP 4.5 */
+    extern int   __KAI_KMPC_CONVENTION  omp_get_initial_device (void);
+    extern void* __KAI_KMPC_CONVENTION  omp_target_alloc(size_t, int);
+    extern void  __KAI_KMPC_CONVENTION  omp_target_free(void *, int);
+    extern int   __KAI_KMPC_CONVENTION  omp_target_is_present(const void *, int);
+    extern int   __KAI_KMPC_CONVENTION  omp_target_memcpy(void *, const void *, size_t, size_t, size_t, int, int);
+    extern int   __KAI_KMPC_CONVENTION  omp_target_memcpy_rect(void *, const void *, size_t, int, const size_t *,
+                                            const size_t *, const size_t *, const size_t *, const size_t *, int, int);
+    extern int   __KAI_KMPC_CONVENTION  omp_target_associate_ptr(const void *, const void *, size_t, size_t, int);
+    extern int   __KAI_KMPC_CONVENTION  omp_target_disassociate_ptr(const void *, int);
+
+    /* OpenMP 5.0 */
+    extern int   __KAI_KMPC_CONVENTION  omp_get_device_num (void);
+    typedef void * omp_depend_t;
+
+    /* OpenMP 5.1 interop */
+    typedef intptr_t omp_intptr_t;
+
+    /* 0..omp_get_num_interop_properties()-1 are reserved for implementation-defined properties */
+    typedef enum omp_interop_property {
+        omp_ipr_fr_id = -1,
+        omp_ipr_fr_name = -2,
+        omp_ipr_vendor = -3,
+        omp_ipr_vendor_name = -4,
+        omp_ipr_device_num = -5,
+        omp_ipr_platform = -6,
+        omp_ipr_device = -7,
+        omp_ipr_device_context = -8,
+        omp_ipr_targetsync = -9,
+        omp_ipr_first = -9
+    } omp_interop_property_t;
+
+    #define omp_interop_none 0
+
+    typedef enum omp_interop_rc {
+        omp_irc_no_value = 1,
+        omp_irc_success = 0,
+        omp_irc_empty = -1,
+        omp_irc_out_of_range = -2,
+        omp_irc_type_int = -3,
+        omp_irc_type_ptr = -4,
+        omp_irc_type_str = -5,
+        omp_irc_other = -6
+    } omp_interop_rc_t;
+
+    typedef enum omp_interop_fr {
+        omp_ifr_cuda = 1,
+        omp_ifr_cuda_driver = 2,
+        omp_ifr_opencl = 3,
+        omp_ifr_sycl = 4,
+        omp_ifr_hip = 5,
+        omp_ifr_level_zero = 6,
+        omp_ifr_last = 7
+    } omp_interop_fr_t;
+
+    typedef void * omp_interop_t;
+
+    /*!
+     * The `omp_get_num_interop_properties` routine retrieves the number of implementation-defined properties available for an `omp_interop_t` object.
+     */
+    extern int          __KAI_KMPC_CONVENTION  omp_get_num_interop_properties(const omp_interop_t);
+    /*!
+     * The `omp_get_interop_int` routine retrieves an integer property from an `omp_interop_t` object.
+     */
+    extern omp_intptr_t __KAI_KMPC_CONVENTION  omp_get_interop_int(const omp_interop_t, omp_interop_property_t, int *);
+    /*!
+     * The `omp_get_interop_ptr` routine retrieves a pointer property from an `omp_interop_t` object.
+     */
+    extern void *       __KAI_KMPC_CONVENTION  omp_get_interop_ptr(const omp_interop_t, omp_interop_property_t, int *);
+    /*!
+     * The `omp_get_interop_str` routine retrieves a string property from an `omp_interop_t` object.
+     */
+    extern const char * __KAI_KMPC_CONVENTION  omp_get_interop_str(const omp_interop_t, omp_interop_property_t, int *);
+    /*!
+     * The `omp_get_interop_name` routine retrieves a property name from an `omp_interop_t` object.
+     */
+    extern const char * __KAI_KMPC_CONVENTION  omp_get_interop_name(const omp_interop_t, omp_interop_property_t);
+    /*!
+     * The `omp_get_interop_type_desc` routine retrieves a description of the type of a property associated with an `omp_interop_t` object.
+     */
+    extern const char * __KAI_KMPC_CONVENTION  omp_get_interop_type_desc(const omp_interop_t, omp_interop_property_t);
+    /*!
+     * The `omp_get_interop_rc_desc` routine retrieves a description of the return code associated with an `omp_interop_t` object.
+     */
+    extern const char * __KAI_KMPC_CONVENTION  omp_get_interop_rc_desc(const omp_interop_t, omp_interop_rc_t);
+
+    /* OpenMP 5.1 device memory routines */
+
+    /*!
+     * The `omp_target_memcpy_async` routine asynchronously performs a copy between any combination of host and device pointers.
+     */
+    extern int    __KAI_KMPC_CONVENTION  omp_target_memcpy_async(void *, const void *, size_t, size_t, size_t, int,
+                                             int, int, omp_depend_t *);
+    /*!
+     * The `omp_target_memcpy_rect_async` routine asynchronously performs a copy between any combination of host and device pointers.
+     */
+    extern int    __KAI_KMPC_CONVENTION  omp_target_memcpy_rect_async(void *, const void *, size_t, int, const size_t *,
+                                             const size_t *, const size_t *, const size_t *, const size_t *, int, int,
+                                             int, omp_depend_t *);
+    /*!
+     * The `omp_get_mapped_ptr` routine returns the device pointer that is associated with a host pointer for a given device.
+     */
+    extern void * __KAI_KMPC_CONVENTION  omp_get_mapped_ptr(const void *, int);
+    extern int    __KAI_KMPC_CONVENTION  omp_target_is_accessible(const void *, size_t, int);
+
+    /* kmp API functions */
+    extern int    __KAI_KMPC_CONVENTION  kmp_get_stacksize          (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_stacksize          (int);
+    extern size_t __KAI_KMPC_CONVENTION  kmp_get_stacksize_s        (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_stacksize_s        (size_t);
+    extern int    __KAI_KMPC_CONVENTION  kmp_get_blocktime          (void);
+    extern int    __KAI_KMPC_CONVENTION  kmp_get_library            (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_blocktime          (int);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_library            (int);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_library_serial     (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_library_turnaround (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_library_throughput (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_defaults           (char const *);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_disp_num_buffers   (int);
+
+    /* Intel affinity API */
+    typedef void * kmp_affinity_mask_t;
+
+    extern int    __KAI_KMPC_CONVENTION  kmp_set_affinity             (kmp_affinity_mask_t *);
+    extern int    __KAI_KMPC_CONVENTION  kmp_get_affinity             (kmp_affinity_mask_t *);
+    extern int    __KAI_KMPC_CONVENTION  kmp_get_affinity_max_proc    (void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_create_affinity_mask     (kmp_affinity_mask_t *);
+    extern void   __KAI_KMPC_CONVENTION  kmp_destroy_affinity_mask    (kmp_affinity_mask_t *);
+    extern int    __KAI_KMPC_CONVENTION  kmp_set_affinity_mask_proc   (int, kmp_affinity_mask_t *);
+    extern int    __KAI_KMPC_CONVENTION  kmp_unset_affinity_mask_proc (int, kmp_affinity_mask_t *);
+    extern int    __KAI_KMPC_CONVENTION  kmp_get_affinity_mask_proc   (int, kmp_affinity_mask_t *);
+
+    /* OpenMP 4.0 affinity API */
+    typedef enum omp_proc_bind_t {
+        omp_proc_bind_false = 0,
+        omp_proc_bind_true = 1,
+        omp_proc_bind_master = 2,
+        omp_proc_bind_close = 3,
+        omp_proc_bind_spread = 4
+    } omp_proc_bind_t;
+
+    extern omp_proc_bind_t __KAI_KMPC_CONVENTION omp_get_proc_bind (void);
+
+    /* OpenMP 4.5 affinity API */
+    extern int  __KAI_KMPC_CONVENTION omp_get_num_places (void);
+    extern int  __KAI_KMPC_CONVENTION omp_get_place_num_procs (int);
+    extern void __KAI_KMPC_CONVENTION omp_get_place_proc_ids (int, int *);
+    extern int  __KAI_KMPC_CONVENTION omp_get_place_num (void);
+    extern int  __KAI_KMPC_CONVENTION omp_get_partition_num_places (void);
+    extern void __KAI_KMPC_CONVENTION omp_get_partition_place_nums (int *);
+
+    extern void * __KAI_KMPC_CONVENTION  kmp_malloc  (size_t);
+    extern void * __KAI_KMPC_CONVENTION  kmp_aligned_malloc  (size_t, size_t);
+    extern void * __KAI_KMPC_CONVENTION  kmp_calloc  (size_t, size_t);
+    extern void * __KAI_KMPC_CONVENTION  kmp_realloc (void *, size_t);
+    extern void   __KAI_KMPC_CONVENTION  kmp_free    (void *);
+
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_warnings_on(void);
+    extern void   __KAI_KMPC_CONVENTION  kmp_set_warnings_off(void);
+
+    /* OpenMP 5.0 Tool Control */
+    typedef enum omp_control_tool_result_t {
+        omp_control_tool_notool = -2,
+        omp_control_tool_nocallback = -1,
+        omp_control_tool_success = 0,
+        omp_control_tool_ignored = 1
+    } omp_control_tool_result_t;
+
+    typedef enum omp_control_tool_t {
+        omp_control_tool_start = 1,
+        omp_control_tool_pause = 2,
+        omp_control_tool_flush = 3,
+        omp_control_tool_end = 4
+    } omp_control_tool_t;
+
+    extern int __KAI_KMPC_CONVENTION omp_control_tool(int, int, void*);
+
+    /* OpenMP 5.0 Memory Management */
+    typedef uintptr_t omp_uintptr_t;
+
+    typedef enum {
+        omp_atk_sync_hint = 1,
+        omp_atk_alignment = 2,
+        omp_atk_access = 3,
+        omp_atk_pool_size = 4,
+        omp_atk_fallback = 5,
+        omp_atk_fb_data = 6,
+        omp_atk_pinned = 7,
+        omp_atk_partition = 8
+    } omp_alloctrait_key_t;
+
+    typedef enum {
+        omp_atv_false = 0,
+        omp_atv_true = 1,
+        omp_atv_contended = 3,
+        omp_atv_uncontended = 4,
+        omp_atv_serialized = 5,
+        omp_atv_sequential = omp_atv_serialized, // (deprecated)
+        omp_atv_private = 6,
+        omp_atv_all = 7,
+        omp_atv_thread = 8,
+        omp_atv_pteam = 9,
+        omp_atv_cgroup = 10,
+        omp_atv_default_mem_fb = 11,
+        omp_atv_null_fb = 12,
+        omp_atv_abort_fb = 13,
+        omp_atv_allocator_fb = 14,
+        omp_atv_environment = 15,
+        omp_atv_nearest = 16,
+        omp_atv_blocked = 17,
+        omp_atv_interleaved = 18
+    } omp_alloctrait_value_t;
+    #define omp_atv_default ((omp_uintptr_t)-1)
+
+    typedef struct {
+        omp_alloctrait_key_t key;
+        omp_uintptr_t value;
+    } omp_alloctrait_t;
+
+#   if defined(_WIN32)
+    // On Windows cl and icl do not support 64-bit enum, let's use integer then.
+    typedef omp_uintptr_t omp_allocator_handle_t;
+    extern __KMP_IMP omp_allocator_handle_t const omp_null_allocator;
+    extern __KMP_IMP omp_allocator_handle_t const omp_default_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_large_cap_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_const_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_high_bw_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_low_lat_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_cgroup_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_pteam_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const omp_thread_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const llvm_omp_target_host_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const llvm_omp_target_shared_mem_alloc;
+    extern __KMP_IMP omp_allocator_handle_t const llvm_omp_target_device_mem_alloc;
+
+    typedef omp_uintptr_t omp_memspace_handle_t;
+    extern __KMP_IMP omp_memspace_handle_t const omp_default_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const omp_large_cap_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const omp_const_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const omp_high_bw_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const omp_low_lat_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const llvm_omp_target_host_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const llvm_omp_target_shared_mem_space;
+    extern __KMP_IMP omp_memspace_handle_t const llvm_omp_target_device_mem_space;
+#   else
+#       if __cplusplus >= 201103
+    typedef enum omp_allocator_handle_t : omp_uintptr_t
+#       else
+    typedef enum omp_allocator_handle_t
+#       endif
+    {
+      omp_null_allocator = 0,
+      omp_default_mem_alloc = 1,
+      omp_large_cap_mem_alloc = 2,
+      omp_const_mem_alloc = 3,
+      omp_high_bw_mem_alloc = 4,
+      omp_low_lat_mem_alloc = 5,
+      omp_cgroup_mem_alloc = 6,
+      omp_pteam_mem_alloc = 7,
+      omp_thread_mem_alloc = 8,
+      llvm_omp_target_host_mem_alloc = 100,
+      llvm_omp_target_shared_mem_alloc = 101,
+      llvm_omp_target_device_mem_alloc = 102,
+      KMP_ALLOCATOR_MAX_HANDLE = UINTPTR_MAX
+    } omp_allocator_handle_t;
+#       if __cplusplus >= 201103
+    typedef enum omp_memspace_handle_t : omp_uintptr_t
+#       else
+    typedef enum omp_memspace_handle_t
+#       endif
+    {
+      omp_default_mem_space = 0,
+      omp_large_cap_mem_space = 1,
+      omp_const_mem_space = 2,
+      omp_high_bw_mem_space = 3,
+      omp_low_lat_mem_space = 4,
+      llvm_omp_target_host_mem_space = 100,
+      llvm_omp_target_shared_mem_space = 101,
+      llvm_omp_target_device_mem_space = 102,
+      KMP_MEMSPACE_MAX_HANDLE = UINTPTR_MAX
+    } omp_memspace_handle_t;
+#   endif
+    extern omp_allocator_handle_t __KAI_KMPC_CONVENTION omp_init_allocator(omp_memspace_handle_t m,
+                                                       int ntraits, omp_alloctrait_t traits[]);
+    extern void __KAI_KMPC_CONVENTION omp_destroy_allocator(omp_allocator_handle_t allocator);
+
+    extern void __KAI_KMPC_CONVENTION omp_set_default_allocator(omp_allocator_handle_t a);
+    extern omp_allocator_handle_t __KAI_KMPC_CONVENTION omp_get_default_allocator(void);
+#   ifdef __cplusplus
+    extern void *__KAI_KMPC_CONVENTION omp_alloc(size_t size, omp_allocator_handle_t a = omp_null_allocator);
+    extern void *__KAI_KMPC_CONVENTION omp_aligned_alloc(size_t align, size_t size,
+                                                         omp_allocator_handle_t a = omp_null_allocator);
+    extern void *__KAI_KMPC_CONVENTION omp_calloc(size_t nmemb, size_t size,
+                                                  omp_allocator_handle_t a = omp_null_allocator);
+    extern void *__KAI_KMPC_CONVENTION omp_aligned_calloc(size_t align, size_t nmemb, size_t size,
+                                                          omp_allocator_handle_t a = omp_null_allocator);
+    extern void *__KAI_KMPC_CONVENTION omp_realloc(void *ptr, size_t size,
+                                                   omp_allocator_handle_t allocator = omp_null_allocator,
+                                                   omp_allocator_handle_t free_allocator = omp_null_allocator);
+    extern void __KAI_KMPC_CONVENTION omp_free(void * ptr, omp_allocator_handle_t a = omp_null_allocator);
+#   else
+    extern void *__KAI_KMPC_CONVENTION omp_alloc(size_t size, omp_allocator_handle_t a);
+    extern void *__KAI_KMPC_CONVENTION omp_aligned_alloc(size_t align, size_t size,
+                                                         omp_allocator_handle_t a);
+    extern void *__KAI_KMPC_CONVENTION omp_calloc(size_t nmemb, size_t size, omp_allocator_handle_t a);
+    extern void *__KAI_KMPC_CONVENTION omp_aligned_calloc(size_t align, size_t nmemb, size_t size,
+                                                          omp_allocator_handle_t a);
+    extern void *__KAI_KMPC_CONVENTION omp_realloc(void *ptr, size_t size, omp_allocator_handle_t allocator,
+                                                   omp_allocator_handle_t free_allocator);
+    extern void __KAI_KMPC_CONVENTION omp_free(void *ptr, omp_allocator_handle_t a);
+#   endif
+
+    /* OpenMP 5.0 Affinity Format */
+    extern void __KAI_KMPC_CONVENTION omp_set_affinity_format(char const *);
+    extern size_t __KAI_KMPC_CONVENTION omp_get_affinity_format(char *, size_t);
+    extern void __KAI_KMPC_CONVENTION omp_display_affinity(char const *);
+    extern size_t __KAI_KMPC_CONVENTION omp_capture_affinity(char *, size_t, char const *);
+
+    /* OpenMP 5.0 events */
+#   if defined(_WIN32)
+    // On Windows cl and icl do not support 64-bit enum, let's use integer then.
+    typedef omp_uintptr_t omp_event_handle_t;
+#   else
+    typedef enum omp_event_handle_t { KMP_EVENT_MAX_HANDLE = UINTPTR_MAX } omp_event_handle_t;
+#   endif
+    extern void __KAI_KMPC_CONVENTION omp_fulfill_event ( omp_event_handle_t event );
+
+    /* OpenMP 5.0 Pause Resources */
+    typedef enum omp_pause_resource_t {
+      omp_pause_resume = 0,
+      omp_pause_soft = 1,
+      omp_pause_hard = 2
+    } omp_pause_resource_t;
+    extern int __KAI_KMPC_CONVENTION omp_pause_resource(omp_pause_resource_t, int);
+    extern int __KAI_KMPC_CONVENTION omp_pause_resource_all(omp_pause_resource_t);
+
+    extern int __KAI_KMPC_CONVENTION omp_get_supported_active_levels(void);
+
+    /* OpenMP 5.1 */
+    extern void __KAI_KMPC_CONVENTION omp_set_num_teams(int num_teams);
+    extern int __KAI_KMPC_CONVENTION omp_get_max_teams(void);
+    extern void __KAI_KMPC_CONVENTION omp_set_teams_thread_limit(int limit);
+    extern int __KAI_KMPC_CONVENTION omp_get_teams_thread_limit(void);
+
+    /* OpenMP 5.1 Display Environment */
+    extern void omp_display_env(int verbose);
+
+#   if defined(_OPENMP) && _OPENMP >= 201811
+    #pragma omp begin declare variant match(device={kind(host)})
+    static inline int omp_is_initial_device(void) { return 1; }
+    #pragma omp end declare variant
+    #pragma omp begin declare variant match(device={kind(nohost)})
+    static inline int omp_is_initial_device(void) { return 0; }
+    #pragma omp end declare variant
+#   endif
+
+    /* OpenMP 5.2 */
+    extern int __KAI_KMPC_CONVENTION omp_in_explicit_task(void);
+
+    /* LLVM Extensions */
+    extern void *llvm_omp_target_dynamic_shared_alloc();
+
+#   undef __KAI_KMPC_CONVENTION
+#   undef __KMP_IMP
+
+    /* Warning:
+       The following typedefs are not standard, deprecated and will be removed in a future release.
+    */
+    typedef int     omp_int_t;
+    typedef double  omp_wtime_t;
+
+#   ifdef __cplusplus
+    }
+#   endif
+
+#endif /* __OMP_H */
diff --git a/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_config.h b/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_config.h
new file mode 100644
index 000000000000..2fe9316a4bc7
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_config.h
@@ -0,0 +1,142 @@
+/*
+ * kmp_config.h -- Feature macros
+ */
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+#ifndef KMP_CONFIG_H
+#define KMP_CONFIG_H
+
+#include "kmp_platform.h"
+
+// cmakedefine01 MACRO will define MACRO as either 0 or 1
+// cmakedefine MACRO 1 will define MACRO as 1 or leave undefined
+#define DEBUG_BUILD 0
+#define RELWITHDEBINFO_BUILD 0
+#define LIBOMP_USE_ITT_NOTIFY 1
+#define USE_ITT_NOTIFY LIBOMP_USE_ITT_NOTIFY
+#if ! LIBOMP_USE_ITT_NOTIFY
+# define INTEL_NO_ITTNOTIFY_API
+#endif
+#define LIBOMP_USE_VERSION_SYMBOLS 1
+#if LIBOMP_USE_VERSION_SYMBOLS
+# define KMP_USE_VERSION_SYMBOLS
+#endif
+#define LIBOMP_HAVE_WEAK_ATTRIBUTE 1
+#define KMP_HAVE_WEAK_ATTRIBUTE LIBOMP_HAVE_WEAK_ATTRIBUTE
+#define LIBOMP_HAVE_PSAPI 0
+#define KMP_HAVE_PSAPI LIBOMP_HAVE_PSAPI
+#define LIBOMP_STATS 0
+#define KMP_STATS_ENABLED LIBOMP_STATS
+#define LIBOMP_HAVE_X86INTRIN_H 0
+#define KMP_HAVE_X86INTRIN_H LIBOMP_HAVE_X86INTRIN_H
+#define LIBOMP_HAVE___BUILTIN_READCYCLECOUNTER 0
+#define KMP_HAVE___BUILTIN_READCYCLECOUNTER LIBOMP_HAVE___BUILTIN_READCYCLECOUNTER
+#define LIBOMP_HAVE___RDTSC 0
+#define KMP_HAVE___RDTSC LIBOMP_HAVE___RDTSC
+#define LIBOMP_USE_DEBUGGER 0
+#define USE_DEBUGGER LIBOMP_USE_DEBUGGER
+#define LIBOMP_OMPT_DEBUG 0
+#define OMPT_DEBUG LIBOMP_OMPT_DEBUG
+#define LIBOMP_OMPT_SUPPORT 1
+#define OMPT_SUPPORT LIBOMP_OMPT_SUPPORT
+#define LIBOMP_OMPD_SUPPORT 1
+#define OMPD_SUPPORT LIBOMP_OMPD_SUPPORT
+#define LIBOMP_PROFILING_SUPPORT 0
+#define OMP_PROFILING_SUPPORT LIBOMP_PROFILING_SUPPORT
+#define LIBOMP_OMPT_OPTIONAL 1
+#define OMPT_OPTIONAL LIBOMP_OMPT_OPTIONAL
+#define LIBOMP_USE_ADAPTIVE_LOCKS 1
+#define KMP_USE_ADAPTIVE_LOCKS LIBOMP_USE_ADAPTIVE_LOCKS
+#define KMP_DEBUG_ADAPTIVE_LOCKS 0
+#define LIBOMP_USE_INTERNODE_ALIGNMENT 0
+#define KMP_USE_INTERNODE_ALIGNMENT LIBOMP_USE_INTERNODE_ALIGNMENT
+#define LIBOMP_ENABLE_ASSERTIONS 0
+#define KMP_USE_ASSERT LIBOMP_ENABLE_ASSERTIONS
+#define LIBOMP_USE_HIER_SCHED 0
+#define KMP_USE_HIER_SCHED LIBOMP_USE_HIER_SCHED
+#define STUBS_LIBRARY 0
+#define LIBOMP_USE_HWLOC 0
+#define KMP_USE_HWLOC LIBOMP_USE_HWLOC
+#define LIBOMP_ENABLE_SHARED 1
+#define KMP_DYNAMIC_LIB LIBOMP_ENABLE_SHARED
+#define KMP_ARCH_STR "Intel(R) 64"
+#define KMP_LIBRARY_FILE "libomp.so"
+#define KMP_VERSION_MAJOR 5
+#define KMP_VERSION_MINOR 0
+#define MSVC 0
+#define KMP_MSVC_COMPAT MSVC
+#define LIBOMP_HAVE_WAITPKG_INTRINSICS 1
+#define KMP_HAVE_WAITPKG_INTRINSICS LIBOMP_HAVE_WAITPKG_INTRINSICS
+#define LIBOMP_HAVE_RTM_INTRINSICS 1
+#define KMP_HAVE_RTM_INTRINSICS LIBOMP_HAVE_RTM_INTRINSICS
+#define LIBOMP_HAVE_IMMINTRIN_H 1
+#define KMP_HAVE_IMMINTRIN_H LIBOMP_HAVE_IMMINTRIN_H
+#define LIBOMP_HAVE_INTRIN_H 0
+#define KMP_HAVE_INTRIN_H LIBOMP_HAVE_INTRIN_H
+#define LIBOMP_HAVE_ATTRIBUTE_WAITPKG 1
+#define KMP_HAVE_ATTRIBUTE_WAITPKG LIBOMP_HAVE_ATTRIBUTE_WAITPKG
+#define LIBOMP_HAVE_ATTRIBUTE_RTM 1
+#define KMP_HAVE_ATTRIBUTE_RTM LIBOMP_HAVE_ATTRIBUTE_RTM
+#define LIBOMP_ARCH_AARCH64_A64FX 0
+#define KMP_ARCH_AARCH64_A64FX LIBOMP_ARCH_AARCH64_A64FX
+#define LIBOMP_HAVE_XMMINTRIN_H 1
+#define KMP_HAVE_XMMINTRIN_H LIBOMP_HAVE_XMMINTRIN_H
+#define LIBOMP_HAVE__MM_MALLOC 1
+#define KMP_HAVE__MM_MALLOC LIBOMP_HAVE__MM_MALLOC
+#define LIBOMP_HAVE_ALIGNED_ALLOC 1
+#define KMP_HAVE_ALIGNED_ALLOC LIBOMP_HAVE_ALIGNED_ALLOC
+#define LIBOMP_HAVE_POSIX_MEMALIGN 1
+#define KMP_HAVE_POSIX_MEMALIGN LIBOMP_HAVE_POSIX_MEMALIGN
+#define LIBOMP_HAVE__ALIGNED_MALLOC 0
+#define KMP_HAVE__ALIGNED_MALLOC LIBOMP_HAVE__ALIGNED_MALLOC
+
+// Configured cache line based on architecture
+#if KMP_ARCH_PPC64
+# define CACHE_LINE 128
+#elif KMP_ARCH_AARCH64_A64FX
+# define CACHE_LINE 256
+#else
+# define CACHE_LINE 64
+#endif
+
+#if ! KMP_32_BIT_ARCH
+# define BUILD_I8 1
+#endif
+
+#define KMP_NESTED_HOT_TEAMS 1
+#define KMP_ADJUST_BLOCKTIME 1
+#define BUILD_PARALLEL_ORDERED 1
+#define KMP_ASM_INTRINS 1
+#define USE_ITT_BUILD LIBOMP_USE_ITT_NOTIFY
+#define INTEL_ITTNOTIFY_PREFIX __kmp_itt_
+#if ! KMP_MIC
+# define USE_LOAD_BALANCE 1
+#endif
+#if ! (KMP_OS_WINDOWS || KMP_OS_DARWIN)
+# define KMP_TDATA_GTID 1
+#endif
+#if STUBS_LIBRARY
+# define KMP_STUB 1
+#endif
+#if DEBUG_BUILD || RELWITHDEBINFO_BUILD
+# define KMP_DEBUG 1
+#endif
+
+#if KMP_OS_WINDOWS
+# define KMP_WIN_CDECL
+#else
+# define BUILD_TV
+# define KMP_GOMP_COMPAT
+#endif
+
+// use shared memory with dynamic library (except Android, where shm_*
+// functions don't exist).
+#if KMP_OS_UNIX && KMP_DYNAMIC_LIB && !__ANDROID__
+#define KMP_USE_SHM
+#endif
+#endif // KMP_CONFIG_H
diff --git a/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_i18n_default.inc b/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_i18n_default.inc
new file mode 100644
index 000000000000..2bb8141ff49e
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_i18n_default.inc
@@ -0,0 +1,486 @@
+// Do not edit this file! //
+// The file was generated from en_US.txt by message-converter.pl on Sat Dec 10 01:22:50 2022. //
+
+static char const *
+__kmp_i18n_default_meta[] =
+    {
+        NULL,
+        "English",
+        "USA",
+        "1033",
+        "2",
+        "20170523",
+        NULL
+    };
+
+static char const *
+__kmp_i18n_default_strings[] =
+    {
+        NULL,
+        "Error",
+        "(unknown file)",
+        "not a number",
+        "bad unit",
+        "illegal characters",
+        "value too large",
+        "value too small",
+        "value is not a multiple of 4k",
+        "Unknown processor topology",
+        "Cannot open /proc/cpuinfo",
+        "/proc/cpuinfo",
+        "cpuinfo file invalid (No processor records)",
+        "cpuinfo file invalid (Too many processor records)",
+        "Cannot rewind cpuinfo file",
+        "cpuinfo file invalid (long line)",
+        "cpuinfo file contains too many entries",
+        "cpuinfo file missing processor field",
+        "cpuinfo file missing physical id field",
+        "cpuinfo file invalid (missing val)",
+        "cpuinfo file invalid (duplicate field)",
+        "Physical node/pkg/core/thread ids not unique",
+        "APIC not present",
+        "Invalid cpuid info",
+        "APIC ids not unique",
+        "Inconsistent cpuid info",
+        "Out of heap memory",
+        "Memory allocation failed",
+        "core",
+        "thread",
+        "package",
+        "node",
+        "<undef>",
+        "decoding legacy APIC ids",
+        "parsing /proc/cpuinfo",
+        "value is not defined",
+        "Effective settings:",
+        "User settings:",
+        "warning: pointers or size don't make sense",
+        "CPU",
+        "TPU",
+        "TPUs per package",
+        "HT enabled",
+        "HT disabled",
+        "decoding x2APIC ids",
+        "cpuid leaf 11 not supported",
+        "cpuid leaf 4 not supported",
+        "thread ids not unique",
+        "using pthread info",
+        "legacy APIC ids not unique",
+        "x2APIC ids not unique",
+        "OPENMP DISPLAY ENVIRONMENT BEGIN",
+        "OPENMP DISPLAY ENVIRONMENT END",
+        "[device]",
+        "[host]",
+        "tile",
+        "tiles",
+        "threads",
+        "cores",
+        "socket",
+        "sockets",
+        "die",
+        "dice",
+        "module",
+        "modules",
+        "L1 cache",
+        "L1 caches",
+        "L2 cache",
+        "L2 caches",
+        "L3 cache",
+        "L3 caches",
+        "NUMA domain",
+        "NUMA domains",
+        "processor group",
+        "processor groups",
+        "unknown",
+        "cpuid leaf 31 not supported",
+        "Hwloc api failure",
+        "LL cache",
+        "LL caches",
+        NULL
+    };
+
+static char const *
+__kmp_i18n_default_formats[] =
+    {
+        NULL,
+        "OMP: Info #%1$d: %2$s\n",
+        "OMP: Warning #%1$d: %2$s\n",
+        "OMP: Error #%1$d: %2$s\n",
+        "OMP: System error #%1$d: %2$s\n",
+        "OMP: Hint %1$s\n",
+        "%1$s pragma (at %2$s:%3$s():%4$s)",
+        NULL
+    };
+
+static char const *
+__kmp_i18n_default_messages[] =
+    {
+        NULL,
+        "Library is \"serial\".",
+        "Cannot open message catalog \"%1$s\":",
+        "Default messages will be used.",
+        "%1$s: Lock is uninitialized",
+        "%1$s: Lock was initialized as simple, but used as nestable",
+        "%1$s: Lock was initialized as nestable, but used as simple",
+        "%1$s: Lock is already owned by requesting thread",
+        "%1$s: Lock is still owned by a thread",
+        "%1$s: Attempt to release a lock not owned by any thread",
+        "%1$s: Attempt to release a lock owned by another thread",
+        "Stack overflow detected for OpenMP thread #%1$d",
+        "Stack overlap detected. ",
+        "Assertion failure at %1$s(%2$d).",
+        "Unable to register a new user thread.",
+        "Initializing %1$s, but found %2$s already initialized.",
+        "Cannot open file \"%1$s\" for reading:",
+        "Getting environment variable \"%1$s\" failed:",
+        "Setting environment variable \"%1$s\" failed:",
+        "Getting environment failed:",
+        "%1$s=\"%2$s\": Wrong value, boolean expected.",
+        "No Helper Thread support built in this OMP library.",
+        "Helper thread failed to soft terminate.",
+        "Buffer overflow detected.",
+        "Real-time scheduling policy is not supported.",
+        "OMP application is running at maximum priority with real-time scheduling policy. ",
+        "Changing priority of the monitor thread failed:",
+        "Deadlocks are highly possible due to monitor thread starvation.",
+        "Unable to set monitor thread stack size to %1$lu bytes:",
+        "Unable to set OMP thread stack size to %1$lu bytes:",
+        "Thread attribute initialization failed:",
+        "Thread attribute destroying failed:",
+        "OMP thread joinable state setting failed:",
+        "Monitor thread joinable state setting failed:",
+        "System unable to allocate necessary resources for OMP thread:",
+        "System unable to allocate necessary resources for the monitor thread:",
+        "Unable to terminate OMP thread:",
+        "Wrong schedule type %1$d, see <omp.h> or <omp_lib.h> file for the list of values supported.",
+        "Unknown scheduling type \"%1$d\".",
+        "%1$s value \"%2$s\" is invalid.",
+        "%1$s value \"%2$s\" is too small.",
+        "%1$s value \"%2$s\" is too large.",
+        "%1$s: \"%2$s\" is an invalid value; ignored.",
+        "%1$s release value \"%2$s\" is invalid.",
+        "%1$s gather value \"%2$s\" is invalid.",
+        "%1$s supported only on debug builds; ignored.",
+        "Syntax error: Usage: %1$s=[ routine=<func> | filename=<file> | range=<lb>:<ub> | excl_range=<lb>:<ub> ],...",
+        "Unbalanced quotes in %1$s.",
+        "Empty string specified for %1$s; ignored.",
+        "%1$s value is too long; ignored.",
+        "%1$s: Invalid clause in \"%2$s\".",
+        "Empty clause in %1$s.",
+        "%1$s value \"%2$s\" is invalid chunk size.",
+        "%1$s value \"%2$s\" is to large chunk size.",
+        "%1$s value \"%2$s\" is ignored.",
+        "Cannot get processor frequency, using zero KMP_ITT_PREPARE_DELAY.",
+        "%1$s must be set prior to first parallel region; ignored.",
+        "%1$s: parameter has been specified already, ignoring \"%2$s\".",
+        "%1$s: parameter invalid, ignoring \"%2$s\".",
+        "%1$s: too many integer parameters specified, ignoring \"%2$s\".",
+        "%1$s: too many integer parameters specified for logical or physical type, ignoring \"%2$d\".",
+        "%1$s: '%2$s' type does not take any integer parameters, ignoring them.",
+        "%1$s: proclist not specified with explicit affinity type, using \"none\".",
+        "%1$s: proclist specified, setting affinity type to \"explicit\".",
+        "%1$s: proclist specified without \"explicit\" affinity type, proclist ignored.",
+        "%1$s: syntax error, not using affinity.",
+        "%1$s: range error (zero stride), not using affinity.",
+        "%1$s: range error (%2$d > %3$d), not using affinity.",
+        "%1$s: range error (%2$d < %3$d & stride < 0), not using affinity.",
+        "%1$s: range error ((%2$d-%3$d)/%4$d too big), not using affinity.",
+        "%1$s: %2$s is defined. %3$s will be ignored.",
+        "%1$s: affinity not supported, using \"disabled\".",
+        "%1$s: affinity only supported for Intel(R) Architecture Processors.",
+        "%1$s: getaffinity system call not supported.",
+        "%1$s: setaffinity system call not supported.",
+        "%1$s: pthread_aff_set_np call not found.",
+        "%1$s: pthread_get_num_resources_np call not found.",
+        "%1$s: the OS kernel does not support affinity.",
+        "%1$s: pthread_get_num_resources_np returned %2$d.",
+        "%1$s: cannot determine proper affinity mask size.",
+        "%1$s=\"%2$s\": %3$s.",
+        "%1$s: extra trailing characters ignored: \"%2$s\".",
+        "%1$s: unknown method \"%2$s\".",
+        "KMP_STATS_TIMER: clock_gettime is undefined, using gettimeofday.",
+        "KMP_STATS_TIMER: \"%1$s\" needs additional parameter, e.g. 'clock_gettime,2'. Using gettimeofday.",
+        "KMP_STATS_TIMER: clock_gettime parameter \"%1$s\" is invalid, using gettimeofday.",
+        "KMP_STATS_TIMER: clock_gettime failed, using gettimeofday.",
+        "KMP_STATS_TIMER: clock function unknown (ignoring value \"%1$s\").",
+        "Unknown scheduling type detected.",
+        "Too many threads to use analytical guided scheduling - switching to iterative guided scheduling.",
+        "ittnotify: Lookup of \"%1$s\" function in \"%2$s\" library failed.",
+        "ittnotify: Loading \"%1$s\" library failed.",
+        "ittnotify: All itt notifications disabled.",
+        "ittnotify: Object state itt notifications disabled.",
+        "ittnotify: Mark itt notifications disabled.",
+        "ittnotify: Unloading \"%1$s\" library failed.",
+        "Cannot form a team with %1$d threads, using %2$d instead.",
+        "Requested number of active parallel levels \"%1$d\" is negative; ignored.",
+        "Requested number of active parallel levels \"%1$d\" exceeds supported limit; the following limit value will be used: \"%1$d\".",
+        "kmp_set_library must only be called from the top level serial thread; ignored.",
+        "Fatal system error detected.",
+        "Out of heap memory.",
+        "Clearing __KMP_REGISTERED_LIB env var failed.",
+        "Registering library with env var failed.",
+        "%1$s value \"%2$d\" will be used.",
+        "%1$s value \"%2$u\" will be used.",
+        "%1$s value \"%2$s\" will be used.",
+        "%1$s value \"%2$s\" will be used.",
+        "Mixing other barrier patterns with dist is prohibited. Using dist for all barrier patterns.",
+        "%1$s maximum value \"%2$d\" will be used.",
+        "%1$s minimum value \"%2$d\" will be used.",
+        "Memory allocation failed.",
+        "File name too long.",
+        "Lock table overflow.",
+        "Too many threads to use threadprivate directive.",
+        "%1$s: invalid mask.",
+        "Wrong definition.",
+        "Windows* OS: TLS Set Value failed.",
+        "Windows* OS: TLS out of indexes.",
+        "PDONE directive must be nested within a DO directive.",
+        "Cannot get number of available CPUs.",
+        "Assumed number of CPUs is 2.",
+        "Error initializing affinity - not using affinity.",
+        "Threads may migrate across all available OS procs (granularity setting too coarse).",
+        "Ignoring invalid OS proc ID %1$d.",
+        "No valid OS proc IDs specified - not using affinity.",
+        "%1$s - using \"flat\" OS <-> physical proc mapping.",
+        "%1$s: %2$s - using \"flat\" OS <-> physical proc mapping.",
+        "%1$s, line %2$d: %3$s - using \"flat\" OS <-> physical proc mapping.",
+        "%1$s: %2$s - exiting.",
+        "%1$s, line %2$d: %3$s - exiting.",
+        "Construct identifier invalid.",
+        "Thread identifier invalid.",
+        "runtime library not initialized.",
+        "Inconsistent THREADPRIVATE common block declarations are non-conforming and are unsupported. Either all threadprivate common blocks must be declared identically, or the largest instance of each threadprivate common block must be referenced first during the run.",
+        "Cannot set thread affinity mask.",
+        "Cannot set thread priority.",
+        "Cannot create thread.",
+        "Cannot create event.",
+        "Cannot set event.",
+        "Cannot close handle.",
+        "Unknown library type: %1$d.",
+        "Monitor did not reap properly.",
+        "Worker thread failed to join.",
+        "Cannot change thread affinity mask.",
+        "%1$s: Threads may migrate across %2$d innermost levels of machine",
+        "%1$s: decrease to %2$d threads",
+        "%1$s: increase to %2$d threads",
+        "%1$s: Internal thread %2$d bound to OS proc set %3$s",
+        "%1$s: Affinity capable, using cpuinfo file",
+        "%1$s: Affinity capable, using global cpuid info",
+        "%1$s: Affinity capable, using default \"flat\" topology",
+        "%1$s: Affinity not capable, using local cpuid info",
+        "%1$s: Affinity not capable, using cpuinfo file",
+        "%1$s: Affinity not capable, assuming \"flat\" topology",
+        "%1$s: Initial OS proc set respected: %2$s",
+        "%1$s: Initial OS proc set not respected: %2$s",
+        "%1$s: %2$d available OS procs",
+        "%1$s: Uniform topology",
+        "%1$s: Nonuniform topology",
+        "%1$s: %2$d packages x %3$d cores/pkg x %4$d threads/core (%5$d total cores)",
+        "%1$s: OS proc to physical thread map ([] => level not in map):",
+        "%1$s: OS proc <n> maps to <n>th package core 0",
+        "%1$s: OS proc %2$d maps to package %3$d [core %4$d] [thread %5$d]",
+        "%1$s: OS proc %2$d maps to [package %3$d] [core %4$d] [thread %5$d]",
+        "%1$s: OS proc %2$d maps to [package %3$d] [core %4$d] thread %5$d",
+        "%1$s: OS proc %2$d maps to [package %3$d] core %4$d [thread %5$d]",
+        "%1$s: OS proc %2$d maps to package %3$d [core %4$d] [thread %5$d]",
+        "%1$s: OS proc %2$d maps to [package %3$d] core %4$d thread %5$d",
+        "%1$s: OS proc %2$d maps to package %3$d core %4$d [thread %5$d]",
+        "%1$s: OS proc %2$d maps to package %3$d [core %4$d] thread %5$d",
+        "%1$s: OS proc %2$d maps to package %3$d core %4$d thread %5$d",
+        "%1$s: OS proc %2$d maps to %3$s",
+        "%1$s: Internal thread %2$d changed affinity mask from %3$s to %4$s",
+        "%1$s: OS proc %2$d maps to package %3$d, CPU %4$d, TPU %5$d",
+        "%1$s: OS proc %2$d maps to package %3$d, CPU %4$d",
+        "%1$s: HT enabled; %2$d packages; %3$d TPU; %4$d TPUs per package",
+        "%1$s: HT disabled; %2$d packages",
+        "Threads encountered barriers in different order. ",
+        "Function %1$s failed:",
+        "%1$s: %2$s packages x %3$d cores/pkg x %4$d threads/core (%5$d total cores)",
+        "Incompatible message catalog \"%1$s\": Version \"%2$s\" found, version \"%3$s\" expected.",
+        "%1$s: ignored because %2$s has been defined",
+        "%1$s: overrides %3$s specified before",
+        "%1$s: Tiles are only supported if KMP_TOPOLOGY_METHOD=hwloc, using granularity=package instead",
+        "%1$s: Tiles requested but were not detected on this HW, using granularity=package instead",
+        "%1$s: %2$d packages x %3$d tiles/pkg x %4$d cores/tile x %5$d threads/core (%6$d total cores)",
+        "%1$s: %2$d packages x %3$d nodes/pkg x %4$d cores/node x %5$d threads/core (%6$d total cores)",
+        "%1$s: %2$d packages x %3$d nodes/pkg x %4$d tiles/node x %5$d cores/tile x %6$d threads/core (%7$d total cores)",
+        "OMPT: Cannot determine workshare type; using the default (loop) instead. This issue is fixed in an up-to-date compiler.",
+        "Allocator %1$s is not available, will use default allocator.",
+        "%1$s: %2$s (%3$d total cores)",
+        "%1$s: granularity setting: %2$s does not exist in topology.  Using granularity=%3$s instead.",
+        "%1$s: hybrid core type detected: %2$d %3$s cores.",
+        "%1$s:   %2$d with core efficiency %3$d.",
+        "%1$s must be bound to a work-sharing or work-queuing construct with an \"ordered\" clause",
+        "Detected end of %1$s without first executing a corresponding beginning.",
+        "Iteration range too large in %1$s.",
+        "%1$s must not have a loop increment that evaluates to zero.",
+        "Expected end of %1$s; %2$s, however, has most recently begun execution.",
+        "%1$s is incorrectly nested within %2$s",
+        "%1$s cannot be executed multiple times during execution of one parallel iteration/section of %2$s",
+        "%1$s is incorrectly nested within %2$s of the same name",
+        "%1$s is incorrectly nested within %2$s that does not have an \"ordered\" clause",
+        "%1$s is incorrectly nested within %2$s but not within any of its \"task\" constructs",
+        "One thread at %1$s while another thread is at %2$s.",
+        "Cannot connect to %1$s",
+        "Cannot connect to %1$s - Using %2$s",
+        "%1$s does not support %2$s. Continuing without using %2$s.",
+        "%1$s does not support %2$s for %3$s. Continuing without using %2$s.",
+        "Static %1$s does not support %2$s. Continuing without using %2$s.",
+        "KMP_DYNAMIC_MODE=irml cannot be used with KMP_USE_IRML=0",
+        "ittnotify: Unknown group \"%2$s\" specified in environment variable \"%1$s\".",
+        "ittnotify: Environment variable \"%1$s\" too long: Actual lengths is %2$lu, max allowed length is %3$lu.",
+        "%1$s: Affinity capable, using global cpuid leaf 11 info",
+        "%1$s: Affinity not capable, using local cpuid leaf 11 info",
+        "%1$s: %2$s.",
+        "%1$s: %2$s - %3$s.",
+        "%1$s: OS proc to physical thread map:",
+        "%1$s: using \"flat\" OS <-> physical proc mapping.",
+        "%1$s: parsing %2$s.",
+        "%1$s - exiting.",
+        "Incompatible %1$s library with version %2$s found.",
+        "ittnotify: Function %1$s failed:",
+        "ittnotify: Error #%1$d.",
+        "%1$s must be set prior to first parallel region or certain API calls; ignored.",
+        "Lock initialized at %1$s(%2$d) was not destroyed",
+        "Cannot determine machine load balance - Using %1$s",
+        "%1$s: Affinity not capable, using pthread info",
+        "%1$s: Affinity capable, using pthread info",
+        "Loading \"%1$s\" library failed:",
+        "Lookup of \"%1$s\" function failed:",
+        "Buffer too small.",
+        "Error #%1$d.",
+        "%1$s: Invalid symbols found. Check the value \"%2$s\".",
+        "%1$s: Spaces between digits are not allowed \"%2$s\".",
+        "%1$s: %2$s - parsing %3$s.",
+        "%1$s cannot be specified via kmp_set_defaults() on this machine because it has more than one processor group.",
+        "Cannot use affinity type \"%1$s\" with multiple Windows* OS processor groups, using \"%2$s\".",
+        "Cannot use affinity granularity \"%1$s\" with multiple Windows* OS processor groups, using \"%2$s\".",
+        "%1$s: Mapping Windows* OS processor group <i> proc <j> to OS proc 64*<i>+<j>.",
+        "%1$s: OS proc %2$d maps to Windows* OS processor group %3$d proc %4$d",
+        "%1$s: Affinity balanced is not available.",
+        "%1$s: granularity=core will be used.",
+        "%1$s must be set prior to first OMP lock call or critical section; ignored.",
+        "futex system call not supported; %1$s=%2$s ignored.",
+        "%1$s: granularity=%2$s will be used.",
+        "%1$s: invalid value \"%2$s\", valid format is \"N<item>[@N][,...][,Nt] (<item> can be S, N, L2, C, T  for Socket, NUMA Node, L2 Cache, Core, Thread)\".",
+        "KMP_HW_SUBSET ignored: unsupported architecture.",
+        "KMP_HW_SUBSET ignored: too many cores requested.",
+        "%1$s: syntax error, using %2$s.",
+        "%1$s: Adaptive locks are not supported; using queuing.",
+        "%1$s: Invalid symbols found. Check the value \"%2$s\".",
+        "%1$s: Spaces between digits are not allowed \"%2$s\".",
+        "%1$s: pid %2$d tid %3$d thread %4$d bound to OS proc set %5$s",
+        "%1$s error: parallel loop increment and condition are inconsistent.",
+        "libgomp cancellation is not currently supported.",
+        "KMP_HW_SUBSET ignored: non-uniform topology.",
+        "KMP_HW_SUBSET ignored: only three-level topology is supported.",
+        "%1$s: granularity=%2$s is not supported with KMP_TOPOLOGY_METHOD=group. Using \"granularity=fine\".",
+        "%1$s: granularity=group is not supported with KMP_AFFINITY=%2$s. Using \"granularity=core\".",
+        "KMP_HW_SUBSET ignored: too many sockets requested.",
+        "KMP_HW_SUBSET \"o\" offset designator deprecated, please use @ prefix for offset value.",
+        "%1$s: Affinity capable, using hwloc.",
+        "%1$s: Ignoring hwloc mechanism.",
+        "%1$s: Hwloc failed in %2$s. Relying on internal affinity mechanisms.",
+        "%1$s must be set prior to OpenMP runtime library initialization; ignored.",
+        "You have enabled the use of umonitor/umwait. If the CPU doesn't have that enabled you'll get an illegal instruction exception.",
+        "%1$s variable deprecated, please use %2$s instead.",
+        "KMP_FORCE_REDUCTION: %1$s method is not supported; using critical.",
+        "KMP_HW_SUBSET ignored: unsupported item requested for non-HWLOC topology method (KMP_TOPOLOGY_METHOD)",
+        "KMP_HW_SUBSET ignored: too many NUMA Nodes requested.",
+        "KMP_HW_SUBSET ignored: too many L2 Caches requested.",
+        "KMP_HW_SUBSET ignored: too many Procs requested.",
+        "Hierarchy ignored: unsupported level: %1$s.",
+        "OMP: pid %1$s tid %2$s thread %3$s bound to OS proc set {%4$s}",
+        "%1$s routine deprecated, please use %2$s instead.",
+        "libgomp compatibility layer does not support OpenMP feature: %1$s",
+        "KMP_HW_SUBSET ignored: too many Dies requested.",
+        "%1$s: Affinity capable, using global cpuid leaf %2$d info",
+        "%1$s: Affinity not capable, using local cpuid leaf %2$d info",
+        "%1$s: Affinity not capable, using hwloc.",
+        "%1$s: Encountered user-directed error: %2$s.",
+        "%1$s: Encountered user-directed warning: %2$s.",
+        "Failed to create teams between lower bound (%1$d) and upper bound (%2$d).",
+        "KMP_HW_SUBSET ignored: %1$s: too many requested.",
+        "KMP_HW_SUBSET ignored: %1$s: level not detected in machine topology.",
+        "KMP_HW_SUBSET ignored: %1$s, %2$s: layers are equivalent, please only specify one.",
+        "KMP_HW_SUBSET ignored: %1$s layer should come after %2$s.",
+        "%1$s: topology layer \"%2$s\" is equivalent to \"%3$s\".",
+        "%1$s: granularity=%2$s is too coarse, setting granularity=group.",
+        "%1$s: \"%2$s\" value is deprecated. Please use \"%3$s\" instead.",
+        "num_teams value must be positive, it is %1$d, using %2$d instead.",
+        "KMP_HW_SUBSET ignored: %1$s, %2$s: attributes are ambiguous, please only specify one.",
+        "KMP_HW_SUBSET ignored: %1$s: attribute specified more than once.",
+        "KMP_HW_SUBSET ignored: %1$s: attribute value %2$s is invalid.",
+        "KMP_HW_SUBSET ignored: all hardware resources would be filtered, please reduce the filter.",
+        "KMP_HW_SUBSET ignored: Too many attributes specified. This machine is not a hybrid architecutre.",
+        "KMP_HW_SUBSET: ignoring %1$s attribute. This machine is not a hybrid architecutre.",
+        NULL
+    };
+
+static char const *
+__kmp_i18n_default_hints[] =
+    {
+        NULL,
+        "Please submit a bug report with this message, compile and run commands used, and machine configuration info including native compiler and operating system versions. Faster response will be obtained by including all program sources. For information on submitting this issue, please see https://bugs.llvm.org/.",
+        "Check NLSPATH environment variable, its value is \"%1$s\".",
+        "Please try changing the shell stack limit or adjusting the OMP_STACKSIZE environment variable.",
+        "Consider unsetting KMP_DEVICE_THREAD_LIMIT (KMP_ALL_THREADS), KMP_TEAMS_THREAD_LIMIT, and OMP_THREAD_LIMIT (if any are set).",
+        "Consider setting KMP_ALL_THREADPRIVATE to a value larger than %1$d.",
+        "This could also be due to a system-related limit on the number of threads.",
+        "This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://openmp.llvm.org/",
+        "This name is specified in environment variable KMP_CPUINFO_FILE.",
+        "Seems application required too much memory.",
+        "Use \"0\", \"FALSE\". \".F.\", \"off\", \"no\" as false values, \"1\", \"TRUE\", \".T.\", \"on\", \"yes\" as true values.",
+        "Perhaps too many threads.",
+        "Decrease priority of application. This will allow the monitor thread run at higher priority than other threads.",
+        "Try changing KMP_MONITOR_STACKSIZE or the shell stack limit.",
+        "Try changing OMP_STACKSIZE and/or the shell stack limit.",
+        "Try increasing OMP_STACKSIZE or the shell stack limit.",
+        "Try decreasing OMP_STACKSIZE.",
+        "Try decreasing the value of OMP_NUM_THREADS.",
+        "Try increasing KMP_MONITOR_STACKSIZE.",
+        "Try decreasing KMP_MONITOR_STACKSIZE.",
+        "Try decreasing the number of threads in use simultaneously.",
+        "Will use default schedule type (%1$s).",
+        "It could be a result of using an older OMP library with a newer compiler or memory corruption. You may check the proper OMP library is linked to the application.",
+        "Check %1$s environment variable, its value is \"%2$s\".",
+        "You may want to use an %1$s library that supports %2$s interface with version %3$s.",
+        "You may want to use an %1$s library with version %2$s.",
+        "System error #193 is \"Bad format of EXE or DLL file\". Usually it means the file is found, but it is corrupted or a file for another architecture. Check whether \"%1$s\" is a file for %2$s architecture.",
+        "System-related limit on the number of threads.",
+        "Try setting new bounds (preferably less than or equal to %1$d) for num_teams clause.",
+        "Valid values are from %1$d to %2$d.",
+        NULL
+    };
+
+struct kmp_i18n_section {
+    int           size;
+    char const ** str;
+}; // struct kmp_i18n_section
+typedef struct kmp_i18n_section  kmp_i18n_section_t;
+
+static kmp_i18n_section_t
+__kmp_i18n_sections[] =
+    {
+        { 0, NULL },
+        { 5, __kmp_i18n_default_meta },
+        { 79, __kmp_i18n_default_strings },
+        { 6, __kmp_i18n_default_formats },
+        { 298, __kmp_i18n_default_messages },
+        { 29, __kmp_i18n_default_hints },
+        { 0, NULL }
+    };
+
+struct kmp_i18n_table {
+    int                   size;
+    kmp_i18n_section_t *  sect;
+}; // struct kmp_i18n_table
+typedef struct kmp_i18n_table  kmp_i18n_table_t;
+
+static kmp_i18n_table_t __kmp_i18n_default_table =
+    {
+        5,
+        __kmp_i18n_sections
+    };
+
+// end of file //
diff --git a/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_i18n_id.inc b/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_i18n_id.inc
new file mode 100644
index 000000000000..c6f8ded667dc
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/openmp/runtime/src/kmp_i18n_id.inc
@@ -0,0 +1,453 @@
+// Do not edit this file! //
+// The file was generated from en_US.txt by message-converter.pl on Sat Dec 10 01:22:50 2022. //
+
+enum kmp_i18n_id {
+
+    // A special id for absence of message.
+    kmp_i18n_null = 0,
+
+    // Set #1, meta.
+    kmp_i18n_prp_first = 65536,
+    kmp_i18n_prp_Language,
+    kmp_i18n_prp_Country,
+    kmp_i18n_prp_LangId,
+    kmp_i18n_prp_Version,
+    kmp_i18n_prp_Revision,
+    kmp_i18n_prp_last,
+
+    // Set #2, strings.
+    kmp_i18n_str_first = 131072,
+    kmp_i18n_str_Error,
+    kmp_i18n_str_UnknownFile,
+    kmp_i18n_str_NotANumber,
+    kmp_i18n_str_BadUnit,
+    kmp_i18n_str_IllegalCharacters,
+    kmp_i18n_str_ValueTooLarge,
+    kmp_i18n_str_ValueTooSmall,
+    kmp_i18n_str_NotMultiple4K,
+    kmp_i18n_str_UnknownTopology,
+    kmp_i18n_str_CantOpenCpuinfo,
+    kmp_i18n_str_ProcCpuinfo,
+    kmp_i18n_str_NoProcRecords,
+    kmp_i18n_str_TooManyProcRecords,
+    kmp_i18n_str_CantRewindCpuinfo,
+    kmp_i18n_str_LongLineCpuinfo,
+    kmp_i18n_str_TooManyEntries,
+    kmp_i18n_str_MissingProcField,
+    kmp_i18n_str_MissingPhysicalIDField,
+    kmp_i18n_str_MissingValCpuinfo,
+    kmp_i18n_str_DuplicateFieldCpuinfo,
+    kmp_i18n_str_PhysicalIDsNotUnique,
+    kmp_i18n_str_ApicNotPresent,
+    kmp_i18n_str_InvalidCpuidInfo,
+    kmp_i18n_str_OBSOLETE1,
+    kmp_i18n_str_InconsistentCpuidInfo,
+    kmp_i18n_str_OutOfHeapMemory,
+    kmp_i18n_str_MemoryAllocFailed,
+    kmp_i18n_str_Core,
+    kmp_i18n_str_Thread,
+    kmp_i18n_str_Package,
+    kmp_i18n_str_Node,
+    kmp_i18n_str_OBSOLETE2,
+    kmp_i18n_str_DecodingLegacyAPIC,
+    kmp_i18n_str_OBSOLETE3,
+    kmp_i18n_str_NotDefined,
+    kmp_i18n_str_EffectiveSettings,
+    kmp_i18n_str_UserSettings,
+    kmp_i18n_str_StorageMapWarning,
+    kmp_i18n_str_OBSOLETE4,
+    kmp_i18n_str_OBSOLETE5,
+    kmp_i18n_str_OBSOLETE6,
+    kmp_i18n_str_OBSOLETE7,
+    kmp_i18n_str_OBSOLETE8,
+    kmp_i18n_str_Decodingx2APIC,
+    kmp_i18n_str_NoLeaf11Support,
+    kmp_i18n_str_NoLeaf4Support,
+    kmp_i18n_str_ThreadIDsNotUnique,
+    kmp_i18n_str_UsingPthread,
+    kmp_i18n_str_LegacyApicIDsNotUnique,
+    kmp_i18n_str_x2ApicIDsNotUnique,
+    kmp_i18n_str_DisplayEnvBegin,
+    kmp_i18n_str_DisplayEnvEnd,
+    kmp_i18n_str_Device,
+    kmp_i18n_str_Host,
+    kmp_i18n_str_Tile,
+    kmp_i18n_str_Tiles,
+    kmp_i18n_str_Threads,
+    kmp_i18n_str_Cores,
+    kmp_i18n_str_Socket,
+    kmp_i18n_str_Sockets,
+    kmp_i18n_str_Die,
+    kmp_i18n_str_Dice,
+    kmp_i18n_str_Module,
+    kmp_i18n_str_Modules,
+    kmp_i18n_str_L1Cache,
+    kmp_i18n_str_L1Caches,
+    kmp_i18n_str_L2Cache,
+    kmp_i18n_str_L2Caches,
+    kmp_i18n_str_L3Cache,
+    kmp_i18n_str_L3Caches,
+    kmp_i18n_str_NumaDomain,
+    kmp_i18n_str_NumaDomains,
+    kmp_i18n_str_ProcGroup,
+    kmp_i18n_str_ProcGroups,
+    kmp_i18n_str_Unknown,
+    kmp_i18n_str_NoLeaf31Support,
+    kmp_i18n_str_HwlocFailed,
+    kmp_i18n_str_LLCache,
+    kmp_i18n_str_LLCaches,
+    kmp_i18n_str_last,
+
+    // Set #3, formats.
+    kmp_i18n_fmt_first = 196608,
+    kmp_i18n_fmt_Info,
+    kmp_i18n_fmt_Warning,
+    kmp_i18n_fmt_Fatal,
+    kmp_i18n_fmt_SysErr,
+    kmp_i18n_fmt_Hint,
+    kmp_i18n_fmt_Pragma,
+    kmp_i18n_fmt_last,
+
+    // Set #4, messages.
+    kmp_i18n_msg_first = 262144,
+    kmp_i18n_msg_LibraryIsSerial,
+    kmp_i18n_msg_CantOpenMessageCatalog,
+    kmp_i18n_msg_WillUseDefaultMessages,
+    kmp_i18n_msg_LockIsUninitialized,
+    kmp_i18n_msg_LockSimpleUsedAsNestable,
+    kmp_i18n_msg_LockNestableUsedAsSimple,
+    kmp_i18n_msg_LockIsAlreadyOwned,
+    kmp_i18n_msg_LockStillOwned,
+    kmp_i18n_msg_LockUnsettingFree,
+    kmp_i18n_msg_LockUnsettingSetByAnother,
+    kmp_i18n_msg_StackOverflow,
+    kmp_i18n_msg_StackOverlap,
+    kmp_i18n_msg_AssertionFailure,
+    kmp_i18n_msg_CantRegisterNewThread,
+    kmp_i18n_msg_DuplicateLibrary,
+    kmp_i18n_msg_CantOpenFileForReading,
+    kmp_i18n_msg_CantGetEnvVar,
+    kmp_i18n_msg_CantSetEnvVar,
+    kmp_i18n_msg_CantGetEnvironment,
+    kmp_i18n_msg_BadBoolValue,
+    kmp_i18n_msg_SSPNotBuiltIn,
+    kmp_i18n_msg_SPPSotfTerminateFailed,
+    kmp_i18n_msg_BufferOverflow,
+    kmp_i18n_msg_RealTimeSchedNotSupported,
+    kmp_i18n_msg_RunningAtMaxPriority,
+    kmp_i18n_msg_CantChangeMonitorPriority,
+    kmp_i18n_msg_MonitorWillStarve,
+    kmp_i18n_msg_CantSetMonitorStackSize,
+    kmp_i18n_msg_CantSetWorkerStackSize,
+    kmp_i18n_msg_CantInitThreadAttrs,
+    kmp_i18n_msg_CantDestroyThreadAttrs,
+    kmp_i18n_msg_CantSetWorkerState,
+    kmp_i18n_msg_CantSetMonitorState,
+    kmp_i18n_msg_NoResourcesForWorkerThread,
+    kmp_i18n_msg_NoResourcesForMonitorThread,
+    kmp_i18n_msg_CantTerminateWorkerThread,
+    kmp_i18n_msg_ScheduleKindOutOfRange,
+    kmp_i18n_msg_UnknownSchedulingType,
+    kmp_i18n_msg_InvalidValue,
+    kmp_i18n_msg_SmallValue,
+    kmp_i18n_msg_LargeValue,
+    kmp_i18n_msg_StgInvalidValue,
+    kmp_i18n_msg_BarrReleaseValueInvalid,
+    kmp_i18n_msg_BarrGatherValueInvalid,
+    kmp_i18n_msg_OBSOLETE9,
+    kmp_i18n_msg_ParRangeSyntax,
+    kmp_i18n_msg_UnbalancedQuotes,
+    kmp_i18n_msg_EmptyString,
+    kmp_i18n_msg_LongValue,
+    kmp_i18n_msg_InvalidClause,
+    kmp_i18n_msg_EmptyClause,
+    kmp_i18n_msg_InvalidChunk,
+    kmp_i18n_msg_LargeChunk,
+    kmp_i18n_msg_IgnoreChunk,
+    kmp_i18n_msg_CantGetProcFreq,
+    kmp_i18n_msg_EnvParallelWarn,
+    kmp_i18n_msg_AffParamDefined,
+    kmp_i18n_msg_AffInvalidParam,
+    kmp_i18n_msg_AffManyParams,
+    kmp_i18n_msg_AffManyParamsForLogic,
+    kmp_i18n_msg_AffNoParam,
+    kmp_i18n_msg_AffNoProcList,
+    kmp_i18n_msg_AffProcListNoType,
+    kmp_i18n_msg_AffProcListNotExplicit,
+    kmp_i18n_msg_AffSyntaxError,
+    kmp_i18n_msg_AffZeroStride,
+    kmp_i18n_msg_AffStartGreaterEnd,
+    kmp_i18n_msg_AffStrideLessZero,
+    kmp_i18n_msg_AffRangeTooBig,
+    kmp_i18n_msg_OBSOLETE10,
+    kmp_i18n_msg_AffNotSupported,
+    kmp_i18n_msg_OBSOLETE11,
+    kmp_i18n_msg_GetAffSysCallNotSupported,
+    kmp_i18n_msg_SetAffSysCallNotSupported,
+    kmp_i18n_msg_OBSOLETE12,
+    kmp_i18n_msg_OBSOLETE13,
+    kmp_i18n_msg_OBSOLETE14,
+    kmp_i18n_msg_OBSOLETE15,
+    kmp_i18n_msg_AffCantGetMaskSize,
+    kmp_i18n_msg_ParseSizeIntWarn,
+    kmp_i18n_msg_ParseExtraCharsWarn,
+    kmp_i18n_msg_UnknownForceReduction,
+    kmp_i18n_msg_TimerUseGettimeofday,
+    kmp_i18n_msg_TimerNeedMoreParam,
+    kmp_i18n_msg_TimerInvalidParam,
+    kmp_i18n_msg_TimerGettimeFailed,
+    kmp_i18n_msg_TimerUnknownFunction,
+    kmp_i18n_msg_UnknownSchedTypeDetected,
+    kmp_i18n_msg_DispatchManyThreads,
+    kmp_i18n_msg_IttLookupFailed,
+    kmp_i18n_msg_IttLoadLibFailed,
+    kmp_i18n_msg_IttAllNotifDisabled,
+    kmp_i18n_msg_IttObjNotifDisabled,
+    kmp_i18n_msg_IttMarkNotifDisabled,
+    kmp_i18n_msg_IttUnloadLibFailed,
+    kmp_i18n_msg_CantFormThrTeam,
+    kmp_i18n_msg_ActiveLevelsNegative,
+    kmp_i18n_msg_ActiveLevelsExceedLimit,
+    kmp_i18n_msg_SetLibraryIncorrectCall,
+    kmp_i18n_msg_FatalSysError,
+    kmp_i18n_msg_OutOfHeapMemory,
+    kmp_i18n_msg_OBSOLETE16,
+    kmp_i18n_msg_OBSOLETE17,
+    kmp_i18n_msg_Using_int_Value,
+    kmp_i18n_msg_Using_uint_Value,
+    kmp_i18n_msg_Using_uint64_Value,
+    kmp_i18n_msg_Using_str_Value,
+    kmp_i18n_msg_BarrierPatternOverride,
+    kmp_i18n_msg_MaxValueUsing,
+    kmp_i18n_msg_MinValueUsing,
+    kmp_i18n_msg_MemoryAllocFailed,
+    kmp_i18n_msg_FileNameTooLong,
+    kmp_i18n_msg_OBSOLETE18,
+    kmp_i18n_msg_ManyThreadsForTPDirective,
+    kmp_i18n_msg_AffinityInvalidMask,
+    kmp_i18n_msg_WrongDefinition,
+    kmp_i18n_msg_TLSSetValueFailed,
+    kmp_i18n_msg_TLSOutOfIndexes,
+    kmp_i18n_msg_OBSOLETE19,
+    kmp_i18n_msg_CantGetNumAvailCPU,
+    kmp_i18n_msg_AssumedNumCPU,
+    kmp_i18n_msg_ErrorInitializeAffinity,
+    kmp_i18n_msg_AffThreadsMayMigrate,
+    kmp_i18n_msg_AffIgnoreInvalidProcID,
+    kmp_i18n_msg_AffNoValidProcID,
+    kmp_i18n_msg_UsingFlatOS,
+    kmp_i18n_msg_UsingFlatOSFile,
+    kmp_i18n_msg_UsingFlatOSFileLine,
+    kmp_i18n_msg_FileMsgExiting,
+    kmp_i18n_msg_FileLineMsgExiting,
+    kmp_i18n_msg_ConstructIdentInvalid,
+    kmp_i18n_msg_ThreadIdentInvalid,
+    kmp_i18n_msg_RTLNotInitialized,
+    kmp_i18n_msg_TPCommonBlocksInconsist,
+    kmp_i18n_msg_CantSetThreadAffMask,
+    kmp_i18n_msg_CantSetThreadPriority,
+    kmp_i18n_msg_CantCreateThread,
+    kmp_i18n_msg_CantCreateEvent,
+    kmp_i18n_msg_CantSetEvent,
+    kmp_i18n_msg_CantCloseHandle,
+    kmp_i18n_msg_UnknownLibraryType,
+    kmp_i18n_msg_ReapMonitorError,
+    kmp_i18n_msg_ReapWorkerError,
+    kmp_i18n_msg_ChangeThreadAffMaskError,
+    kmp_i18n_msg_ThreadsMigrate,
+    kmp_i18n_msg_DecreaseToThreads,
+    kmp_i18n_msg_IncreaseToThreads,
+    kmp_i18n_msg_OBSOLETE20,
+    kmp_i18n_msg_AffCapableUseCpuinfo,
+    kmp_i18n_msg_AffUseGlobCpuid,
+    kmp_i18n_msg_AffCapableUseFlat,
+    kmp_i18n_msg_AffNotCapableUseLocCpuid,
+    kmp_i18n_msg_AffNotCapableUseCpuinfo,
+    kmp_i18n_msg_AffFlatTopology,
+    kmp_i18n_msg_InitOSProcSetRespect,
+    kmp_i18n_msg_InitOSProcSetNotRespect,
+    kmp_i18n_msg_AvailableOSProc,
+    kmp_i18n_msg_Uniform,
+    kmp_i18n_msg_NonUniform,
+    kmp_i18n_msg_Topology,
+    kmp_i18n_msg_OBSOLETE21,
+    kmp_i18n_msg_OSProcToPackage,
+    kmp_i18n_msg_OBSOLETE22,
+    kmp_i18n_msg_OBSOLETE23,
+    kmp_i18n_msg_OBSOLETE24,
+    kmp_i18n_msg_OBSOLETE25,
+    kmp_i18n_msg_OBSOLETE26,
+    kmp_i18n_msg_OBSOLETE27,
+    kmp_i18n_msg_OBSOLETE28,
+    kmp_i18n_msg_OBSOLETE29,
+    kmp_i18n_msg_OBSOLETE30,
+    kmp_i18n_msg_OSProcMapToPack,
+    kmp_i18n_msg_OBSOLETE31,
+    kmp_i18n_msg_OBSOLETE32,
+    kmp_i18n_msg_OBSOLETE33,
+    kmp_i18n_msg_OBSOLETE34,
+    kmp_i18n_msg_OBSOLETE35,
+    kmp_i18n_msg_BarriersInDifferentOrder,
+    kmp_i18n_msg_FunctionError,
+    kmp_i18n_msg_TopologyExtra,
+    kmp_i18n_msg_WrongMessageCatalog,
+    kmp_i18n_msg_StgIgnored,
+    kmp_i18n_msg_OBSOLETE36,
+    kmp_i18n_msg_AffTilesNoHWLOC,
+    kmp_i18n_msg_AffTilesNoTiles,
+    kmp_i18n_msg_TopologyExtraTile,
+    kmp_i18n_msg_TopologyExtraNode,
+    kmp_i18n_msg_TopologyExtraNoTi,
+    kmp_i18n_msg_OmptOutdatedWorkshare,
+    kmp_i18n_msg_OmpNoAllocator,
+    kmp_i18n_msg_TopologyGeneric,
+    kmp_i18n_msg_AffGranularityBad,
+    kmp_i18n_msg_TopologyHybrid,
+    kmp_i18n_msg_TopologyHybridCoreEff,
+    kmp_i18n_msg_CnsBoundToWorksharing,
+    kmp_i18n_msg_CnsDetectedEnd,
+    kmp_i18n_msg_CnsIterationRangeTooLarge,
+    kmp_i18n_msg_CnsLoopIncrZeroProhibited,
+    kmp_i18n_msg_CnsExpectedEnd,
+    kmp_i18n_msg_CnsInvalidNesting,
+    kmp_i18n_msg_CnsMultipleNesting,
+    kmp_i18n_msg_CnsNestingSameName,
+    kmp_i18n_msg_CnsNoOrderedClause,
+    kmp_i18n_msg_CnsNotInTaskConstruct,
+    kmp_i18n_msg_CnsThreadsAtBarrier,
+    kmp_i18n_msg_CantConnect,
+    kmp_i18n_msg_CantConnectUsing,
+    kmp_i18n_msg_LibNotSupport,
+    kmp_i18n_msg_LibNotSupportFor,
+    kmp_i18n_msg_StaticLibNotSupport,
+    kmp_i18n_msg_OBSOLETE37,
+    kmp_i18n_msg_IttUnknownGroup,
+    kmp_i18n_msg_IttEnvVarTooLong,
+    kmp_i18n_msg_OBSOLETE38,
+    kmp_i18n_msg_OBSOLETE39,
+    kmp_i18n_msg_AffInfoStr,
+    kmp_i18n_msg_AffInfoStrStr,
+    kmp_i18n_msg_OSProcToPhysicalThreadMap,
+    kmp_i18n_msg_AffUsingFlatOS,
+    kmp_i18n_msg_AffParseFilename,
+    kmp_i18n_msg_MsgExiting,
+    kmp_i18n_msg_IncompatibleLibrary,
+    kmp_i18n_msg_IttFunctionError,
+    kmp_i18n_msg_IttUnknownError,
+    kmp_i18n_msg_EnvMiddleWarn,
+    kmp_i18n_msg_CnsLockNotDestroyed,
+    kmp_i18n_msg_CantLoadBalUsing,
+    kmp_i18n_msg_AffNotCapableUsePthread,
+    kmp_i18n_msg_AffUsePthread,
+    kmp_i18n_msg_OBSOLETE40,
+    kmp_i18n_msg_OBSOLETE41,
+    kmp_i18n_msg_OBSOLETE42,
+    kmp_i18n_msg_OBSOLETE43,
+    kmp_i18n_msg_NthSyntaxError,
+    kmp_i18n_msg_NthSpacesNotAllowed,
+    kmp_i18n_msg_AffStrParseFilename,
+    kmp_i18n_msg_OBSOLETE44,
+    kmp_i18n_msg_AffTypeCantUseMultGroups,
+    kmp_i18n_msg_AffGranCantUseMultGroups,
+    kmp_i18n_msg_AffWindowsProcGroupMap,
+    kmp_i18n_msg_AffOSProcToGroup,
+    kmp_i18n_msg_AffBalancedNotAvail,
+    kmp_i18n_msg_OBSOLETE45,
+    kmp_i18n_msg_EnvLockWarn,
+    kmp_i18n_msg_FutexNotSupported,
+    kmp_i18n_msg_AffGranUsing,
+    kmp_i18n_msg_AffHWSubsetInvalid,
+    kmp_i18n_msg_AffHWSubsetUnsupported,
+    kmp_i18n_msg_AffHWSubsetManyCores,
+    kmp_i18n_msg_SyntaxErrorUsing,
+    kmp_i18n_msg_AdaptiveNotSupported,
+    kmp_i18n_msg_EnvSyntaxError,
+    kmp_i18n_msg_EnvSpacesNotAllowed,
+    kmp_i18n_msg_BoundToOSProcSet,
+    kmp_i18n_msg_CnsLoopIncrIllegal,
+    kmp_i18n_msg_NoGompCancellation,
+    kmp_i18n_msg_AffHWSubsetNonUniform,
+    kmp_i18n_msg_AffHWSubsetNonThreeLevel,
+    kmp_i18n_msg_AffGranTopGroup,
+    kmp_i18n_msg_AffGranGroupType,
+    kmp_i18n_msg_AffHWSubsetManySockets,
+    kmp_i18n_msg_AffHWSubsetDeprecated,
+    kmp_i18n_msg_AffUsingHwloc,
+    kmp_i18n_msg_AffIgnoringHwloc,
+    kmp_i18n_msg_AffHwlocErrorOccurred,
+    kmp_i18n_msg_EnvSerialWarn,
+    kmp_i18n_msg_EnvMwaitWarn,
+    kmp_i18n_msg_EnvVarDeprecated,
+    kmp_i18n_msg_RedMethodNotSupported,
+    kmp_i18n_msg_AffHWSubsetNoHWLOC,
+    kmp_i18n_msg_AffHWSubsetManyNodes,
+    kmp_i18n_msg_AffHWSubsetManyTiles,
+    kmp_i18n_msg_AffHWSubsetManyProcs,
+    kmp_i18n_msg_HierSchedInvalid,
+    kmp_i18n_msg_AffFormatDefault,
+    kmp_i18n_msg_APIDeprecated,
+    kmp_i18n_msg_GompFeatureNotSupported,
+    kmp_i18n_msg_AffHWSubsetManyDies,
+    kmp_i18n_msg_AffUseGlobCpuidL,
+    kmp_i18n_msg_AffNotCapableUseLocCpuidL,
+    kmp_i18n_msg_AffNotUsingHwloc,
+    kmp_i18n_msg_UserDirectedError,
+    kmp_i18n_msg_UserDirectedWarning,
+    kmp_i18n_msg_FailedToCreateTeam,
+    kmp_i18n_msg_AffHWSubsetManyGeneric,
+    kmp_i18n_msg_AffHWSubsetNotExistGeneric,
+    kmp_i18n_msg_AffHWSubsetEqvLayers,
+    kmp_i18n_msg_AffHWSubsetOutOfOrder,
+    kmp_i18n_msg_AffEqualTopologyTypes,
+    kmp_i18n_msg_AffGranTooCoarseProcGroup,
+    kmp_i18n_msg_StgDeprecatedValue,
+    kmp_i18n_msg_NumTeamsNotPositive,
+    kmp_i18n_msg_AffHWSubsetIncompat,
+    kmp_i18n_msg_AffHWSubsetAttrRepeat,
+    kmp_i18n_msg_AffHWSubsetAttrInvalid,
+    kmp_i18n_msg_AffHWSubsetAllFiltered,
+    kmp_i18n_msg_AffHWSubsetAttrsNonHybrid,
+    kmp_i18n_msg_AffHWSubsetIgnoringAttr,
+    kmp_i18n_msg_last,
+
+    // Set #5, hints.
+    kmp_i18n_hnt_first = 327680,
+    kmp_i18n_hnt_SubmitBugReport,
+    kmp_i18n_hnt_OBSOLETE46,
+    kmp_i18n_hnt_ChangeStackLimit,
+    kmp_i18n_hnt_Unset_ALL_THREADS,
+    kmp_i18n_hnt_Set_ALL_THREADPRIVATE,
+    kmp_i18n_hnt_PossibleSystemLimitOnThreads,
+    kmp_i18n_hnt_DuplicateLibrary,
+    kmp_i18n_hnt_NameComesFrom_CPUINFO_FILE,
+    kmp_i18n_hnt_NotEnoughMemory,
+    kmp_i18n_hnt_ValidBoolValues,
+    kmp_i18n_hnt_BufferOverflow,
+    kmp_i18n_hnt_RunningAtMaxPriority,
+    kmp_i18n_hnt_ChangeMonitorStackSize,
+    kmp_i18n_hnt_ChangeWorkerStackSize,
+    kmp_i18n_hnt_IncreaseWorkerStackSize,
+    kmp_i18n_hnt_DecreaseWorkerStackSize,
+    kmp_i18n_hnt_Decrease_NUM_THREADS,
+    kmp_i18n_hnt_IncreaseMonitorStackSize,
+    kmp_i18n_hnt_DecreaseMonitorStackSize,
+    kmp_i18n_hnt_DecreaseNumberOfThreadsInUse,
+    kmp_i18n_hnt_DefaultScheduleKindUsed,
+    kmp_i18n_hnt_GetNewerLibrary,
+    kmp_i18n_hnt_CheckEnvVar,
+    kmp_i18n_hnt_OBSOLETE47,
+    kmp_i18n_hnt_OBSOLETE48,
+    kmp_i18n_hnt_BadExeFormat,
+    kmp_i18n_hnt_SystemLimitOnThreads,
+    kmp_i18n_hnt_SetNewBound,
+    kmp_i18n_hnt_ValidValuesRange,
+    kmp_i18n_hnt_last,
+
+    kmp_i18n_xxx_lastest
+
+}; // enum kmp_i18n_id
+
+typedef enum kmp_i18n_id  kmp_i18n_id_t;
+
+
+// end of file //
diff --git a/utils/bazel/llvm-project-overlay/openmp/runtime/src/omp-tools.h b/utils/bazel/llvm-project-overlay/openmp/runtime/src/omp-tools.h
new file mode 100644
index 000000000000..ff2d32291f9e
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/openmp/runtime/src/omp-tools.h
@@ -0,0 +1,1415 @@
+/*
+ * include/omp-tools.h.var
+ */
+
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef __OMPT__
+#define __OMPT__
+
+/*****************************************************************************
+ * system include files
+ *****************************************************************************/
+
+#include <stdint.h>
+#include <stddef.h>
+
+#ifdef DEPRECATION_WARNINGS
+# ifdef __cplusplus
+# define DEPRECATED_51 [[deprecated("as of 5.1")]]
+# else
+# define DEPRECATED_51 __attribute__((deprecated("as of 5.1")))
+#endif
+#else
+#define DEPRECATED_51
+#endif
+
+/*****************************************************************************
+ * iteration macros
+ *****************************************************************************/
+
+#define FOREACH_OMPT_INQUIRY_FN(macro)      \
+    macro (ompt_enumerate_states)           \
+    macro (ompt_enumerate_mutex_impls)      \
+                                            \
+    macro (ompt_set_callback)               \
+    macro (ompt_get_callback)               \
+                                            \
+    macro (ompt_get_state)                  \
+                                            \
+    macro (ompt_get_parallel_info)          \
+    macro (ompt_get_task_info)              \
+    macro (ompt_get_task_memory)            \
+    macro (ompt_get_thread_data)            \
+    macro (ompt_get_unique_id)              \
+    macro (ompt_finalize_tool)              \
+                                            \
+    macro(ompt_get_num_procs)               \
+    macro(ompt_get_num_places)              \
+    macro(ompt_get_place_proc_ids)          \
+    macro(ompt_get_place_num)               \
+    macro(ompt_get_partition_place_nums)    \
+    macro(ompt_get_proc_id)                 \
+                                            \
+    macro(ompt_get_target_info)             \
+    macro(ompt_get_num_devices)
+
+#define FOREACH_OMPT_STATE(macro)                                                                \
+                                                                                                \
+    /* first available state */                                                                 \
+    macro (ompt_state_undefined, 0x102)      /* undefined thread state */                        \
+                                                                                                \
+    /* work states (0..15) */                                                                   \
+    macro (ompt_state_work_serial, 0x000)    /* working outside parallel */                      \
+    macro (ompt_state_work_parallel, 0x001)  /* working within parallel */                       \
+    macro (ompt_state_work_reduction, 0x002) /* performing a reduction */                        \
+                                                                                                \
+    /* barrier wait states (16..31) */                                                          \
+    macro (ompt_state_wait_barrier, 0x010)   /* waiting at a barrier */                          \
+    macro (ompt_state_wait_barrier_implicit_parallel, 0x011)                                     \
+                                            /* implicit barrier at the end of parallel region */\
+    macro (ompt_state_wait_barrier_implicit_workshare, 0x012)                                    \
+                                            /* implicit barrier at the end of worksharing */    \
+    macro (ompt_state_wait_barrier_implicit, 0x013)  /* implicit barrier */                      \
+    macro (ompt_state_wait_barrier_explicit, 0x014)  /* explicit barrier */                      \
+                                                                                                \
+    /* task wait states (32..63) */                                                             \
+    macro (ompt_state_wait_taskwait, 0x020)  /* waiting at a taskwait */                         \
+    macro (ompt_state_wait_taskgroup, 0x021) /* waiting at a taskgroup */                        \
+                                                                                                \
+    /* mutex wait states (64..127) */                                                           \
+    macro (ompt_state_wait_mutex, 0x040)                                                         \
+    macro (ompt_state_wait_lock, 0x041)      /* waiting for lock */                              \
+    macro (ompt_state_wait_critical, 0x042)  /* waiting for critical */                          \
+    macro (ompt_state_wait_atomic, 0x043)    /* waiting for atomic */                            \
+    macro (ompt_state_wait_ordered, 0x044)   /* waiting for ordered */                           \
+                                                                                                \
+    /* target wait states (128..255) */                                                         \
+    macro (ompt_state_wait_target, 0x080)        /* waiting for target region */                 \
+    macro (ompt_state_wait_target_map, 0x081)    /* waiting for target data mapping operation */ \
+    macro (ompt_state_wait_target_update, 0x082) /* waiting for target update operation */       \
+                                                                                                \
+    /* misc (256..511) */                                                                       \
+    macro (ompt_state_idle, 0x100)           /* waiting for work */                              \
+    macro (ompt_state_overhead, 0x101)       /* overhead excluding wait states */                \
+                                                                                                \
+    /* implementation-specific states (512..) */
+
+
+#define FOREACH_KMP_MUTEX_IMPL(macro)                                                \
+    macro (kmp_mutex_impl_none, 0)         /* unknown implementation */              \
+    macro (kmp_mutex_impl_spin, 1)         /* based on spin */                       \
+    macro (kmp_mutex_impl_queuing, 2)      /* based on some fair policy */           \
+    macro (kmp_mutex_impl_speculative, 3)  /* based on HW-supported speculation */
+
+#define FOREACH_OMPT_HOST_EVENT(macro)                                                                                   \
+                                                                                                                         \
+    /*--- Mandatory Events ---*/                                                                                         \
+    macro (ompt_callback_thread_begin,      ompt_callback_thread_begin_t,       1) /* thread begin                    */ \
+    macro (ompt_callback_thread_end,        ompt_callback_thread_end_t,         2) /* thread end                      */ \
+                                                                                                                         \
+    macro (ompt_callback_parallel_begin,    ompt_callback_parallel_begin_t,     3) /* parallel begin                  */ \
+    macro (ompt_callback_parallel_end,      ompt_callback_parallel_end_t,       4) /* parallel end                    */ \
+                                                                                                                         \
+    macro (ompt_callback_task_create,       ompt_callback_task_create_t,        5) /* task begin                      */ \
+    macro (ompt_callback_task_schedule,     ompt_callback_task_schedule_t,      6) /* task schedule                   */ \
+    macro (ompt_callback_implicit_task,     ompt_callback_implicit_task_t,      7) /* implicit task                   */ \
+                                                                                                                         \
+    macro (ompt_callback_control_tool,      ompt_callback_control_tool_t,      11) /* control tool                    */ \
+                                                                                                                         \
+    /* Optional Events */                                                                                                \
+    macro (ompt_callback_sync_region_wait,  ompt_callback_sync_region_t,       16) /* sync region wait begin or end   */ \
+                                                                                                                         \
+    macro (ompt_callback_mutex_released,    ompt_callback_mutex_t,             17) /* mutex released                  */ \
+                                                                                                                         \
+    macro (ompt_callback_dependences,       ompt_callback_dependences_t,       18) /* report task dependences         */ \
+    macro (ompt_callback_task_dependence,   ompt_callback_task_dependence_t,   19) /* report task dependence          */ \
+                                                                                                                         \
+    macro (ompt_callback_work,              ompt_callback_work_t,              20) /* task at work begin or end       */ \
+                                                                                                                         \
+    macro (ompt_callback_masked,            ompt_callback_masked_t,            21) /* task at masked begin or end     */ \
+                                                                                                                         \
+    macro (ompt_callback_sync_region,       ompt_callback_sync_region_t,       23) /* sync region begin or end        */ \
+                                                                                                                         \
+    macro (ompt_callback_lock_init,         ompt_callback_mutex_acquire_t,     24) /* lock init                       */ \
+    macro (ompt_callback_lock_destroy,      ompt_callback_mutex_t,             25) /* lock destroy                    */ \
+                                                                                                                         \
+    macro (ompt_callback_mutex_acquire,     ompt_callback_mutex_acquire_t,     26) /* mutex acquire                   */ \
+    macro (ompt_callback_mutex_acquired,    ompt_callback_mutex_t,             27) /* mutex acquired                  */ \
+                                                                                                                         \
+    macro (ompt_callback_nest_lock,         ompt_callback_nest_lock_t,         28) /* nest lock                       */ \
+                                                                                                                         \
+    macro (ompt_callback_flush,             ompt_callback_flush_t,             29) /* after executing flush           */ \
+                                                                                                                         \
+    macro (ompt_callback_cancel,            ompt_callback_cancel_t,            30) /* cancel innermost binding region */ \
+                                                                                                                         \
+    macro (ompt_callback_reduction,         ompt_callback_sync_region_t,       31) /* reduction                       */ \
+                                                                                                                         \
+    macro (ompt_callback_dispatch,          ompt_callback_dispatch_t,          32) /* dispatch of work                */ \
+    macro (ompt_callback_error,             ompt_callback_error_t,             37) /* error                           */
+
+#define FOREACH_OMPT_DEVICE_EVENT(macro)                                                                                 \
+    /*--- Mandatory Events ---*/                                                                                         \
+    macro (ompt_callback_device_initialize, ompt_callback_device_initialize_t, 12) /* device initialize               */ \
+    macro (ompt_callback_device_finalize,   ompt_callback_device_finalize_t,   13) /* device finalize                 */ \
+                                                                                                                         \
+    macro (ompt_callback_device_load,       ompt_callback_device_load_t,       14) /* device load                     */ \
+    macro (ompt_callback_device_unload,     ompt_callback_device_unload_t,     15) /* device unload                   */
+
+#define FOREACH_OMPT_NOEMI_EVENT(macro)                                                                                  \
+    /*--- Mandatory Events ---*/                                                                                         \
+    macro (ompt_callback_target,            ompt_callback_target_t,             8) /* target                          */ \
+    macro (ompt_callback_target_data_op,    ompt_callback_target_data_op_t,     9) /* target data op                  */ \
+    macro (ompt_callback_target_submit,     ompt_callback_target_submit_t,     10) /* target  submit                  */ \
+    /* Optional Events */                                                                                                \
+    macro (ompt_callback_target_map,        ompt_callback_target_map_t,        22) /* target map                      */
+
+#define FOREACH_OMPT_EMI_EVENT(macro)                                                                                    \
+    /*--- Mandatory Events ---*/                                                                                         \
+    macro (ompt_callback_target_emi,        ompt_callback_target_emi_t,        33) /* target                          */ \
+    macro (ompt_callback_target_data_op_emi,ompt_callback_target_data_op_emi_t,34) /* target data op                  */ \
+    macro (ompt_callback_target_submit_emi, ompt_callback_target_submit_emi_t, 35) /* target submit                   */ \
+    /* Optional Events */                                                                                                \
+    macro (ompt_callback_target_map_emi,    ompt_callback_target_map_emi_t,    36) /* target map                      */
+
+#define FOREACH_OMPT_50_TARGET_EVENT(macro)                                                                              \
+    FOREACH_OMPT_DEVICE_EVENT(macro)                                                                                     \
+    FOREACH_OMPT_NOEMI_EVENT(macro)
+
+#define FOREACH_OMPT_51_TARGET_EVENT(macro)                                                                              \
+    FOREACH_OMPT_DEVICE_EVENT(macro)                                                                                     \
+    FOREACH_OMPT_EMI_EVENT(macro)
+
+#define FOREACH_OMPT_EVENT(macro)                                                                                        \
+    FOREACH_OMPT_HOST_EVENT(macro)                                                                                       \
+    FOREACH_OMPT_DEVICE_EVENT(macro)                                                                                     \
+    FOREACH_OMPT_NOEMI_EVENT(macro)                                                                                      \
+    FOREACH_OMPT_EMI_EVENT(macro)
+
+#define FOREACH_OMPT_51_EVENT(macro)                                                                                     \
+    FOREACH_OMPT_HOST_EVENT(macro)                                                                                       \
+    FOREACH_OMPT_DEVICE_EVENT(macro)                                                                                     \
+    FOREACH_OMPT_EMI_EVENT(macro)
+
+/*****************************************************************************
+ * implementation specific types
+ *****************************************************************************/
+
+typedef enum kmp_mutex_impl_t {
+#define kmp_mutex_impl_macro(impl, code) impl = code,
+    FOREACH_KMP_MUTEX_IMPL(kmp_mutex_impl_macro)
+#undef kmp_mutex_impl_macro
+} kmp_mutex_impl_t;
+
+/*****************************************************************************
+ * definitions generated from spec
+ *****************************************************************************/
+
+typedef enum ompt_callbacks_t {
+  ompt_callback_thread_begin             = 1,
+  ompt_callback_thread_end               = 2,
+  ompt_callback_parallel_begin           = 3,
+  ompt_callback_parallel_end             = 4,
+  ompt_callback_task_create              = 5,
+  ompt_callback_task_schedule            = 6,
+  ompt_callback_implicit_task            = 7,
+  ompt_callback_target                   = 8,
+  ompt_callback_target_data_op           = 9,
+  ompt_callback_target_submit            = 10,
+  ompt_callback_control_tool             = 11,
+  ompt_callback_device_initialize        = 12,
+  ompt_callback_device_finalize          = 13,
+  ompt_callback_device_load              = 14,
+  ompt_callback_device_unload            = 15,
+  ompt_callback_sync_region_wait         = 16,
+  ompt_callback_mutex_released           = 17,
+  ompt_callback_dependences              = 18,
+  ompt_callback_task_dependence          = 19,
+  ompt_callback_work                     = 20,
+  ompt_callback_master     DEPRECATED_51 = 21,
+  ompt_callback_masked                   = 21,
+  ompt_callback_target_map               = 22,
+  ompt_callback_sync_region              = 23,
+  ompt_callback_lock_init                = 24,
+  ompt_callback_lock_destroy             = 25,
+  ompt_callback_mutex_acquire            = 26,
+  ompt_callback_mutex_acquired           = 27,
+  ompt_callback_nest_lock                = 28,
+  ompt_callback_flush                    = 29,
+  ompt_callback_cancel                   = 30,
+  ompt_callback_reduction                = 31,
+  ompt_callback_dispatch                 = 32,
+  ompt_callback_target_emi               = 33,
+  ompt_callback_target_data_op_emi       = 34,
+  ompt_callback_target_submit_emi        = 35,
+  ompt_callback_target_map_emi           = 36,
+  ompt_callback_error                    = 37
+} ompt_callbacks_t;
+
+typedef enum ompt_record_t {
+  ompt_record_ompt               = 1,
+  ompt_record_native             = 2,
+  ompt_record_invalid            = 3
+} ompt_record_t;
+
+typedef enum ompt_record_native_t {
+  ompt_record_native_info  = 1,
+  ompt_record_native_event = 2
+} ompt_record_native_t;
+
+typedef enum ompt_set_result_t {
+  ompt_set_error            = 0,
+  ompt_set_never            = 1,
+  ompt_set_impossible       = 2,
+  ompt_set_sometimes        = 3,
+  ompt_set_sometimes_paired = 4,
+  ompt_set_always           = 5
+} ompt_set_result_t;
+
+typedef uint64_t ompt_id_t;
+
+typedef uint64_t ompt_device_time_t;
+
+typedef uint64_t ompt_buffer_cursor_t;
+
+typedef enum ompt_thread_t {
+  ompt_thread_initial                 = 1,
+  ompt_thread_worker                  = 2,
+  ompt_thread_other                   = 3,
+  ompt_thread_unknown                 = 4
+} ompt_thread_t;
+
+typedef enum ompt_scope_endpoint_t {
+  ompt_scope_begin                    = 1,
+  ompt_scope_end                      = 2,
+  ompt_scope_beginend                 = 3
+} ompt_scope_endpoint_t;
+
+typedef enum ompt_dispatch_t {
+  ompt_dispatch_iteration             = 1,
+  ompt_dispatch_section               = 2,
+  ompt_dispatch_ws_loop_chunk         = 3,
+  ompt_dispatch_taskloop_chunk        = 4,
+  ompt_dispatch_distribute_chunk      = 5
+} ompt_dispatch_t;
+
+typedef enum ompt_sync_region_t {
+  ompt_sync_region_barrier                DEPRECATED_51 = 1,
+  ompt_sync_region_barrier_implicit       DEPRECATED_51 = 2,
+  ompt_sync_region_barrier_explicit       = 3,
+  ompt_sync_region_barrier_implementation = 4,
+  ompt_sync_region_taskwait               = 5,
+  ompt_sync_region_taskgroup              = 6,
+  ompt_sync_region_reduction              = 7,
+  ompt_sync_region_barrier_implicit_workshare = 8,
+  ompt_sync_region_barrier_implicit_parallel = 9,
+  ompt_sync_region_barrier_teams = 10
+} ompt_sync_region_t;
+
+typedef enum ompt_target_data_op_t {
+  ompt_target_data_alloc                      = 1,
+  ompt_target_data_transfer_to_device         = 2,
+  ompt_target_data_transfer_from_device       = 3,
+  ompt_target_data_delete                     = 4,
+  ompt_target_data_associate                  = 5,
+  ompt_target_data_disassociate               = 6,
+  ompt_target_data_alloc_async                = 17,
+  ompt_target_data_transfer_to_device_async   = 18,
+  ompt_target_data_transfer_from_device_async = 19,
+  ompt_target_data_delete_async               = 20
+} ompt_target_data_op_t;
+
+typedef enum ompt_work_t {
+  ompt_work_loop               = 1,
+  ompt_work_sections           = 2,
+  ompt_work_single_executor    = 3,
+  ompt_work_single_other       = 4,
+  ompt_work_workshare          = 5,
+  ompt_work_distribute         = 6,
+  ompt_work_taskloop           = 7,
+  ompt_work_scope              = 8,
+  ompt_work_loop_static        = 10,
+  ompt_work_loop_dynamic       = 11,
+  ompt_work_loop_guided        = 12,
+  ompt_work_loop_other         = 13
+} ompt_work_t;
+
+typedef enum ompt_mutex_t {
+  ompt_mutex_lock                     = 1,
+  ompt_mutex_test_lock                = 2,
+  ompt_mutex_nest_lock                = 3,
+  ompt_mutex_test_nest_lock           = 4,
+  ompt_mutex_critical                 = 5,
+  ompt_mutex_atomic                   = 6,
+  ompt_mutex_ordered                  = 7
+} ompt_mutex_t;
+
+typedef enum ompt_native_mon_flag_t {
+  ompt_native_data_motion_explicit    = 0x01,
+  ompt_native_data_motion_implicit    = 0x02,
+  ompt_native_kernel_invocation       = 0x04,
+  ompt_native_kernel_execution        = 0x08,
+  ompt_native_driver                  = 0x10,
+  ompt_native_runtime                 = 0x20,
+  ompt_native_overhead                = 0x40,
+  ompt_native_idleness                = 0x80
+} ompt_native_mon_flag_t;
+
+typedef enum ompt_task_flag_t {
+  ompt_task_initial                   = 0x00000001,
+  ompt_task_implicit                  = 0x00000002,
+  ompt_task_explicit                  = 0x00000004,
+  ompt_task_target                    = 0x00000008,
+  ompt_task_taskwait                  = 0x00000010,
+  ompt_task_undeferred                = 0x08000000,
+  ompt_task_untied                    = 0x10000000,
+  ompt_task_final                     = 0x20000000,
+  ompt_task_mergeable                 = 0x40000000,
+  ompt_task_merged                    = 0x80000000
+} ompt_task_flag_t;
+
+typedef enum ompt_task_status_t {
+  ompt_task_complete      = 1,
+  ompt_task_yield         = 2,
+  ompt_task_cancel        = 3,
+  ompt_task_detach        = 4,
+  ompt_task_early_fulfill = 5,
+  ompt_task_late_fulfill  = 6,
+  ompt_task_switch        = 7,
+  ompt_taskwait_complete  = 8
+} ompt_task_status_t;
+
+typedef enum ompt_target_t {
+  ompt_target                         = 1,
+  ompt_target_enter_data              = 2,
+  ompt_target_exit_data               = 3,
+  ompt_target_update                  = 4,
+  ompt_target_nowait                  = 9,
+  ompt_target_enter_data_nowait       = 10,
+  ompt_target_exit_data_nowait        = 11,
+  ompt_target_update_nowait           = 12
+} ompt_target_t;
+
+typedef enum ompt_parallel_flag_t {
+  ompt_parallel_invoker_program = 0x00000001,
+  ompt_parallel_invoker_runtime = 0x00000002,
+  ompt_parallel_league          = 0x40000000,
+  ompt_parallel_team            = 0x80000000
+} ompt_parallel_flag_t;
+
+typedef enum ompt_target_map_flag_t {
+  ompt_target_map_flag_to             = 0x01,
+  ompt_target_map_flag_from           = 0x02,
+  ompt_target_map_flag_alloc          = 0x04,
+  ompt_target_map_flag_release        = 0x08,
+  ompt_target_map_flag_delete         = 0x10,
+  ompt_target_map_flag_implicit       = 0x20
+} ompt_target_map_flag_t;
+
+typedef enum ompt_dependence_type_t {
+  ompt_dependence_type_in              = 1,
+  ompt_dependence_type_out             = 2,
+  ompt_dependence_type_inout           = 3,
+  ompt_dependence_type_mutexinoutset   = 4,
+  ompt_dependence_type_source          = 5,
+  ompt_dependence_type_sink            = 6,
+  ompt_dependence_type_inoutset        = 7
+} ompt_dependence_type_t;
+
+typedef enum ompt_severity_t {
+  ompt_warning                         = 1,
+  ompt_fatal                           = 2
+} ompt_severity_t;
+
+typedef enum ompt_cancel_flag_t {
+  ompt_cancel_parallel       = 0x01,
+  ompt_cancel_sections       = 0x02,
+  ompt_cancel_loop           = 0x04,
+  ompt_cancel_taskgroup      = 0x08,
+  ompt_cancel_activated      = 0x10,
+  ompt_cancel_detected       = 0x20,
+  ompt_cancel_discarded_task = 0x40
+} ompt_cancel_flag_t;
+
+typedef uint64_t ompt_hwid_t;
+
+typedef uint64_t ompt_wait_id_t;
+
+typedef enum ompt_frame_flag_t {
+  ompt_frame_runtime        = 0x00,
+  ompt_frame_application    = 0x01,
+  ompt_frame_cfa            = 0x10,
+  ompt_frame_framepointer   = 0x20,
+  ompt_frame_stackaddress   = 0x30
+} ompt_frame_flag_t;
+
+typedef enum ompt_state_t {
+  ompt_state_work_serial                      = 0x000,
+  ompt_state_work_parallel                    = 0x001,
+  ompt_state_work_reduction                   = 0x002,
+
+  ompt_state_wait_barrier                     DEPRECATED_51 = 0x010,
+  ompt_state_wait_barrier_implicit_parallel   = 0x011,
+  ompt_state_wait_barrier_implicit_workshare  = 0x012,
+  ompt_state_wait_barrier_implicit            DEPRECATED_51 = 0x013,
+  ompt_state_wait_barrier_explicit            = 0x014,
+  ompt_state_wait_barrier_implementation      = 0x015,
+  ompt_state_wait_barrier_teams               = 0x016,
+
+  ompt_state_wait_taskwait                    = 0x020,
+  ompt_state_wait_taskgroup                   = 0x021,
+
+  ompt_state_wait_mutex                       = 0x040,
+  ompt_state_wait_lock                        = 0x041,
+  ompt_state_wait_critical                    = 0x042,
+  ompt_state_wait_atomic                      = 0x043,
+  ompt_state_wait_ordered                     = 0x044,
+
+  ompt_state_wait_target                      = 0x080,
+  ompt_state_wait_target_map                  = 0x081,
+  ompt_state_wait_target_update               = 0x082,
+
+  ompt_state_idle                             = 0x100,
+  ompt_state_overhead                         = 0x101,
+  ompt_state_undefined                        = 0x102
+} ompt_state_t;
+
+typedef uint64_t (*ompt_get_unique_id_t) (void);
+
+typedef uint64_t ompd_size_t;
+
+typedef uint64_t ompd_wait_id_t;
+
+typedef uint64_t ompd_addr_t;
+typedef int64_t  ompd_word_t;
+typedef uint64_t ompd_seg_t;
+
+typedef uint64_t ompd_device_t;
+
+typedef uint64_t ompd_thread_id_t;
+
+typedef enum ompd_scope_t {
+  ompd_scope_global = 1,
+  ompd_scope_address_space = 2,
+  ompd_scope_thread = 3,
+  ompd_scope_parallel = 4,
+  ompd_scope_implicit_task = 5,
+  ompd_scope_task = 6
+} ompd_scope_t;
+
+typedef uint64_t ompd_icv_id_t;
+
+typedef enum ompd_rc_t {
+  ompd_rc_ok = 0,
+  ompd_rc_unavailable = 1,
+  ompd_rc_stale_handle = 2,
+  ompd_rc_bad_input = 3,
+  ompd_rc_error = 4,
+  ompd_rc_unsupported = 5,
+  ompd_rc_needs_state_tracking = 6,
+  ompd_rc_incompatible = 7,
+  ompd_rc_device_read_error = 8,
+  ompd_rc_device_write_error = 9,
+  ompd_rc_nomem = 10,
+  ompd_rc_incomplete = 11,
+  ompd_rc_callback_error = 12
+} ompd_rc_t;
+
+typedef void (*ompt_interface_fn_t) (void);
+
+typedef ompt_interface_fn_t (*ompt_function_lookup_t) (
+  const char *interface_function_name
+);
+
+typedef union ompt_data_t {
+  uint64_t value;
+  void *ptr;
+} ompt_data_t;
+
+typedef struct ompt_frame_t {
+  ompt_data_t exit_frame;
+  ompt_data_t enter_frame;
+  int exit_frame_flags;
+  int enter_frame_flags;
+} ompt_frame_t;
+
+typedef void (*ompt_callback_t) (void);
+
+typedef void ompt_device_t;
+
+typedef void ompt_buffer_t;
+
+typedef void (*ompt_callback_buffer_request_t) (
+  int device_num,
+  ompt_buffer_t **buffer,
+  size_t *bytes
+);
+
+typedef void (*ompt_callback_buffer_complete_t) (
+  int device_num,
+  ompt_buffer_t *buffer,
+  size_t bytes,
+  ompt_buffer_cursor_t begin,
+  int buffer_owned
+);
+
+typedef void (*ompt_finalize_t) (
+  ompt_data_t *tool_data
+);
+
+typedef int (*ompt_initialize_t) (
+  ompt_function_lookup_t lookup,
+  int initial_device_num,
+  ompt_data_t *tool_data
+);
+
+typedef struct ompt_start_tool_result_t {
+  ompt_initialize_t initialize;
+  ompt_finalize_t finalize;
+  ompt_data_t tool_data;
+} ompt_start_tool_result_t;
+
+typedef struct ompt_record_abstract_t {
+  ompt_record_native_t rclass;
+  const char *type;
+  ompt_device_time_t start_time;
+  ompt_device_time_t end_time;
+  ompt_hwid_t hwid;
+} ompt_record_abstract_t;
+
+typedef struct ompt_dependence_t {
+  ompt_data_t variable;
+  ompt_dependence_type_t dependence_type;
+} ompt_dependence_t;
+
+typedef struct ompt_dispatch_chunk_t {
+  uint64_t start;
+  uint64_t iterations;
+} ompt_dispatch_chunk_t;
+
+typedef int (*ompt_enumerate_states_t) (
+  int current_state,
+  int *next_state,
+  const char **next_state_name
+);
+
+typedef int (*ompt_enumerate_mutex_impls_t) (
+  int current_impl,
+  int *next_impl,
+  const char **next_impl_name
+);
+
+typedef ompt_set_result_t (*ompt_set_callback_t) (
+  ompt_callbacks_t event,
+  ompt_callback_t callback
+);
+
+typedef int (*ompt_get_callback_t) (
+  ompt_callbacks_t event,
+  ompt_callback_t *callback
+);
+
+typedef ompt_data_t *(*ompt_get_thread_data_t) (void);
+
+typedef int (*ompt_get_num_procs_t) (void);
+
+typedef int (*ompt_get_num_places_t) (void);
+
+typedef int (*ompt_get_place_proc_ids_t) (
+  int place_num,
+  int ids_size,
+  int *ids
+);
+
+typedef int (*ompt_get_place_num_t) (void);
+
+typedef int (*ompt_get_partition_place_nums_t) (
+  int place_nums_size,
+  int *place_nums
+);
+
+typedef int (*ompt_get_proc_id_t) (void);
+
+typedef int (*ompt_get_state_t) (
+  ompt_wait_id_t *wait_id
+);
+
+typedef int (*ompt_get_parallel_info_t) (
+  int ancestor_level,
+  ompt_data_t **parallel_data,
+  int *team_size
+);
+
+typedef int (*ompt_get_task_info_t) (
+  int ancestor_level,
+  int *flags,
+  ompt_data_t **task_data,
+  ompt_frame_t **task_frame,
+  ompt_data_t **parallel_data,
+  int *thread_num
+);
+
+typedef int (*ompt_get_task_memory_t)(
+  void **addr,
+  size_t *size,
+  int block
+);
+
+typedef int (*ompt_get_target_info_t) (
+  uint64_t *device_num,
+  ompt_id_t *target_id,
+  ompt_id_t *host_op_id
+);
+
+typedef int (*ompt_get_num_devices_t) (void);
+
+typedef void (*ompt_finalize_tool_t) (void);
+
+typedef int (*ompt_get_device_num_procs_t) (
+  ompt_device_t *device
+);
+
+typedef ompt_device_time_t (*ompt_get_device_time_t) (
+  ompt_device_t *device
+);
+
+typedef double (*ompt_translate_time_t) (
+  ompt_device_t *device,
+  ompt_device_time_t time
+);
+
+typedef ompt_set_result_t (*ompt_set_trace_ompt_t) (
+  ompt_device_t *device,
+  unsigned int enable,
+  unsigned int etype
+);
+
+typedef ompt_set_result_t (*ompt_set_trace_native_t) (
+  ompt_device_t *device,
+  int enable,
+  int flags
+);
+
+typedef int (*ompt_start_trace_t) (
+  ompt_device_t *device,
+  ompt_callback_buffer_request_t request,
+  ompt_callback_buffer_complete_t complete
+);
+
+typedef int (*ompt_pause_trace_t) (
+  ompt_device_t *device,
+  int begin_pause
+);
+
+typedef int (*ompt_flush_trace_t) (
+  ompt_device_t *device
+);
+
+typedef int (*ompt_stop_trace_t) (
+  ompt_device_t *device
+);
+
+typedef int (*ompt_advance_buffer_cursor_t) (
+  ompt_device_t *device,
+  ompt_buffer_t *buffer,
+  size_t size,
+  ompt_buffer_cursor_t current,
+  ompt_buffer_cursor_t *next
+);
+
+typedef ompt_record_t (*ompt_get_record_type_t) (
+  ompt_buffer_t *buffer,
+  ompt_buffer_cursor_t current
+);
+
+typedef void *(*ompt_get_record_native_t) (
+  ompt_buffer_t *buffer,
+  ompt_buffer_cursor_t current,
+  ompt_id_t *host_op_id
+);
+
+typedef ompt_record_abstract_t *
+(*ompt_get_record_abstract_t) (
+  void *native_record
+);
+
+typedef void (*ompt_callback_thread_begin_t) (
+  ompt_thread_t thread_type,
+  ompt_data_t *thread_data
+);
+
+typedef struct ompt_record_thread_begin_t {
+  ompt_thread_t thread_type;
+} ompt_record_thread_begin_t;
+
+typedef void (*ompt_callback_thread_end_t) (
+  ompt_data_t *thread_data
+);
+
+typedef void (*ompt_callback_parallel_begin_t) (
+  ompt_data_t *encountering_task_data,
+  const ompt_frame_t *encountering_task_frame,
+  ompt_data_t *parallel_data,
+  unsigned int requested_parallelism,
+  int flags,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_parallel_begin_t {
+  ompt_id_t encountering_task_id;
+  ompt_id_t parallel_id;
+  unsigned int requested_parallelism;
+  int flags;
+  const void *codeptr_ra;
+} ompt_record_parallel_begin_t;
+
+typedef void (*ompt_callback_parallel_end_t) (
+  ompt_data_t *parallel_data,
+  ompt_data_t *encountering_task_data,
+  int flags,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_parallel_end_t {
+  ompt_id_t parallel_id;
+  ompt_id_t encountering_task_id;
+  int flags;
+  const void *codeptr_ra;
+} ompt_record_parallel_end_t;
+
+typedef void (*ompt_callback_work_t) (
+  ompt_work_t work_type,
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *parallel_data,
+  ompt_data_t *task_data,
+  uint64_t count,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_work_t {
+  ompt_work_t work_type;
+  ompt_scope_endpoint_t endpoint;
+  ompt_id_t parallel_id;
+  ompt_id_t task_id;
+  uint64_t count;
+  const void *codeptr_ra;
+} ompt_record_work_t;
+
+typedef void (*ompt_callback_dispatch_t) (
+  ompt_data_t *parallel_data,
+  ompt_data_t *task_data,
+  ompt_dispatch_t kind,
+  ompt_data_t instance
+);
+
+typedef struct ompt_record_dispatch_t {
+  ompt_id_t parallel_id;
+  ompt_id_t task_id;
+  ompt_dispatch_t kind;
+  ompt_data_t instance;
+} ompt_record_dispatch_t;
+
+typedef void (*ompt_callback_task_create_t) (
+  ompt_data_t *encountering_task_data,
+  const ompt_frame_t *encountering_task_frame,
+  ompt_data_t *new_task_data,
+  int flags,
+  int has_dependences,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_task_create_t {
+  ompt_id_t encountering_task_id;
+  ompt_id_t new_task_id;
+  int flags;
+  int has_dependences;
+  const void *codeptr_ra;
+} ompt_record_task_create_t;
+
+typedef void (*ompt_callback_dependences_t) (
+  ompt_data_t *task_data,
+  const ompt_dependence_t *deps,
+  int ndeps
+);
+
+typedef struct ompt_record_dependences_t {
+  ompt_id_t task_id;
+  ompt_dependence_t dep;
+  int ndeps;
+} ompt_record_dependences_t;
+
+typedef void (*ompt_callback_task_dependence_t) (
+  ompt_data_t *src_task_data,
+  ompt_data_t *sink_task_data
+);
+
+typedef struct ompt_record_task_dependence_t {
+  ompt_id_t src_task_id;
+  ompt_id_t sink_task_id;
+} ompt_record_task_dependence_t;
+
+typedef void (*ompt_callback_task_schedule_t) (
+  ompt_data_t *prior_task_data,
+  ompt_task_status_t prior_task_status,
+  ompt_data_t *next_task_data
+);
+
+typedef struct ompt_record_task_schedule_t {
+  ompt_id_t prior_task_id;
+  ompt_task_status_t prior_task_status;
+  ompt_id_t next_task_id;
+} ompt_record_task_schedule_t;
+
+typedef void (*ompt_callback_implicit_task_t) (
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *parallel_data,
+  ompt_data_t *task_data,
+  unsigned int actual_parallelism,
+  unsigned int index,
+  int flags
+);
+
+typedef struct ompt_record_implicit_task_t {
+  ompt_scope_endpoint_t endpoint;
+  ompt_id_t parallel_id;
+  ompt_id_t task_id;
+  unsigned int actual_parallelism;
+  unsigned int index;
+  int flags;
+} ompt_record_implicit_task_t;
+
+typedef void (*ompt_callback_masked_t) (
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *parallel_data,
+  ompt_data_t *task_data,
+  const void *codeptr_ra
+);
+
+typedef ompt_callback_masked_t ompt_callback_master_t DEPRECATED_51;
+
+typedef struct ompt_record_masked_t {
+  ompt_scope_endpoint_t endpoint;
+  ompt_id_t parallel_id;
+  ompt_id_t task_id;
+  const void *codeptr_ra;
+} ompt_record_masked_t;
+
+typedef void (*ompt_callback_sync_region_t) (
+  ompt_sync_region_t kind,
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *parallel_data,
+  ompt_data_t *task_data,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_sync_region_t {
+  ompt_sync_region_t kind;
+  ompt_scope_endpoint_t endpoint;
+  ompt_id_t parallel_id;
+  ompt_id_t task_id;
+  const void *codeptr_ra;
+} ompt_record_sync_region_t;
+
+typedef void (*ompt_callback_mutex_acquire_t) (
+  ompt_mutex_t kind,
+  unsigned int hint,
+  unsigned int impl,
+  ompt_wait_id_t wait_id,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_mutex_acquire_t {
+  ompt_mutex_t kind;
+  unsigned int hint;
+  unsigned int impl;
+  ompt_wait_id_t wait_id;
+  const void *codeptr_ra;
+} ompt_record_mutex_acquire_t;
+
+typedef void (*ompt_callback_mutex_t) (
+  ompt_mutex_t kind,
+  ompt_wait_id_t wait_id,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_mutex_t {
+  ompt_mutex_t kind;
+  ompt_wait_id_t wait_id;
+  const void *codeptr_ra;
+} ompt_record_mutex_t;
+
+typedef void (*ompt_callback_nest_lock_t) (
+  ompt_scope_endpoint_t endpoint,
+  ompt_wait_id_t wait_id,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_nest_lock_t {
+  ompt_scope_endpoint_t endpoint;
+  ompt_wait_id_t wait_id;
+  const void *codeptr_ra;
+} ompt_record_nest_lock_t;
+
+typedef void (*ompt_callback_flush_t) (
+  ompt_data_t *thread_data,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_flush_t {
+  const void *codeptr_ra;
+} ompt_record_flush_t;
+
+typedef void (*ompt_callback_cancel_t) (
+  ompt_data_t *task_data,
+  int flags,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_cancel_t {
+  ompt_id_t task_id;
+  int flags;
+  const void *codeptr_ra;
+} ompt_record_cancel_t;
+
+typedef void (*ompt_callback_device_initialize_t) (
+  int device_num,
+  const char *type,
+  ompt_device_t *device,
+  ompt_function_lookup_t lookup,
+  const char *documentation
+);
+
+typedef void (*ompt_callback_device_finalize_t) (
+  int device_num
+);
+
+typedef void (*ompt_callback_device_load_t) (
+  int device_num,
+  const char *filename,
+  int64_t offset_in_file,
+  void *vma_in_file,
+  size_t bytes,
+  void *host_addr,
+  void *device_addr,
+  uint64_t module_id
+);
+
+typedef void (*ompt_callback_device_unload_t) (
+  int device_num,
+  uint64_t module_id
+);
+
+typedef void (*ompt_callback_target_data_op_emi_t) (
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *target_task_data,
+  ompt_data_t *target_data,
+  ompt_id_t *host_op_id,
+  ompt_target_data_op_t optype,
+  void *src_addr,
+  int src_device_num,
+  void *dest_addr,
+  int dest_device_num,
+  size_t bytes,
+  const void *codeptr_ra
+);
+
+typedef void (*ompt_callback_target_data_op_t) (
+  ompt_id_t target_id,
+  ompt_id_t host_op_id,
+  ompt_target_data_op_t optype,
+  void *src_addr,
+  int src_device_num,
+  void *dest_addr,
+  int dest_device_num,
+  size_t bytes,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_target_data_op_t {
+  ompt_id_t host_op_id;
+  ompt_target_data_op_t optype;
+  void *src_addr;
+  int src_device_num;
+  void *dest_addr;
+  int dest_device_num;
+  size_t bytes;
+  ompt_device_time_t end_time;
+  const void *codeptr_ra;
+} ompt_record_target_data_op_t;
+
+typedef void (*ompt_callback_target_emi_t) (
+  ompt_target_t kind,
+  ompt_scope_endpoint_t endpoint,
+  int device_num,
+  ompt_data_t *task_data,
+  ompt_data_t *target_task_data,
+  ompt_data_t *target_data,
+  const void *codeptr_ra
+);
+
+typedef void (*ompt_callback_target_t) (
+  ompt_target_t kind,
+  ompt_scope_endpoint_t endpoint,
+  int device_num,
+  ompt_data_t *task_data,
+  ompt_id_t target_id,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_target_t {
+  ompt_target_t kind;
+  ompt_scope_endpoint_t endpoint;
+  int device_num;
+  ompt_id_t task_id;
+  ompt_id_t target_id;
+  const void *codeptr_ra;
+} ompt_record_target_t;
+
+typedef void (*ompt_callback_target_map_emi_t) (
+  ompt_data_t *target_data,
+  unsigned int nitems,
+  void **host_addr,
+  void **device_addr,
+  size_t *bytes,
+  unsigned int *mapping_flags,
+  const void *codeptr_ra
+);
+
+typedef void (*ompt_callback_target_map_t) (
+  ompt_id_t target_id,
+  unsigned int nitems,
+  void **host_addr,
+  void **device_addr,
+  size_t *bytes,
+  unsigned int *mapping_flags,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_target_map_t {
+  ompt_id_t target_id;
+  unsigned int nitems;
+  void **host_addr;
+  void **device_addr;
+  size_t *bytes;
+  unsigned int *mapping_flags;
+  const void *codeptr_ra;
+} ompt_record_target_map_t;
+
+typedef void (*ompt_callback_target_submit_emi_t) (
+  ompt_scope_endpoint_t endpoint,
+  ompt_data_t *target_data,
+  ompt_id_t *host_op_id,
+  unsigned int requested_num_teams
+);
+
+typedef void (*ompt_callback_target_submit_t) (
+  ompt_id_t target_id,
+  ompt_id_t host_op_id,
+  unsigned int requested_num_teams
+);
+
+typedef struct ompt_record_target_kernel_t {
+  ompt_id_t host_op_id;
+  unsigned int requested_num_teams;
+  unsigned int granted_num_teams;
+  ompt_device_time_t end_time;
+} ompt_record_target_kernel_t;
+
+typedef int (*ompt_callback_control_tool_t) (
+  uint64_t command,
+  uint64_t modifier,
+  void *arg,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_control_tool_t {
+  uint64_t command;
+  uint64_t modifier;
+  const void *codeptr_ra;
+} ompt_record_control_tool_t;
+
+typedef void (*ompt_callback_error_t) (
+  ompt_severity_t severity,
+  const char *message, size_t length,
+  const void *codeptr_ra
+);
+
+typedef struct ompt_record_error_t {
+  ompt_severity_t severity;
+  const char *message;
+  size_t length;
+  const void *codeptr_ra;
+} ompt_record_error_t;
+
+typedef struct ompd_address_t {
+  ompd_seg_t segment;
+  ompd_addr_t address;
+} ompd_address_t;
+
+typedef struct ompd_frame_info_t {
+  ompd_address_t frame_address;
+  ompd_word_t frame_flag;
+} ompd_frame_info_t;
+
+typedef struct _ompd_aspace_handle ompd_address_space_handle_t;
+typedef struct _ompd_thread_handle ompd_thread_handle_t;
+typedef struct _ompd_parallel_handle ompd_parallel_handle_t;
+typedef struct _ompd_task_handle ompd_task_handle_t;
+
+typedef struct _ompd_aspace_cont ompd_address_space_context_t;
+typedef struct _ompd_thread_cont ompd_thread_context_t;
+
+typedef struct ompd_device_type_sizes_t {
+  uint8_t sizeof_char;
+  uint8_t sizeof_short;
+  uint8_t sizeof_int;
+  uint8_t sizeof_long;
+  uint8_t sizeof_long_long;
+  uint8_t sizeof_pointer;
+} ompd_device_type_sizes_t;
+
+void ompd_dll_locations_valid(void);
+
+typedef ompd_rc_t (*ompd_callback_memory_alloc_fn_t)(ompd_size_t nbytes,
+                                                     void **ptr);
+
+typedef ompd_rc_t (*ompd_callback_memory_free_fn_t)(void *ptr);
+
+typedef ompd_rc_t (*ompd_callback_get_thread_context_for_thread_id_fn_t)(
+    ompd_address_space_context_t *address_space_context, ompd_thread_id_t kind,
+    ompd_size_t sizeof_thread_id, const void *thread_id,
+    ompd_thread_context_t **thread_context);
+
+typedef ompd_rc_t (*ompd_callback_sizeof_fn_t)(
+    ompd_address_space_context_t *address_space_context,
+    ompd_device_type_sizes_t *sizes);
+
+typedef ompd_rc_t (*ompd_callback_symbol_addr_fn_t)(
+    ompd_address_space_context_t *address_space_context,
+    ompd_thread_context_t *thread_context, const char *symbol_name,
+    ompd_address_t *symbol_addr, const char *file_name);
+
+typedef ompd_rc_t (*ompd_callback_memory_read_fn_t)(
+    ompd_address_space_context_t *address_space_context,
+    ompd_thread_context_t *thread_context, const ompd_address_t *addr,
+    ompd_size_t nbytes, void *buffer);
+
+typedef ompd_rc_t (*ompd_callback_memory_write_fn_t)(
+    ompd_address_space_context_t *address_space_context,
+    ompd_thread_context_t *thread_context, const ompd_address_t *addr,
+    ompd_size_t nbytes, const void *buffer);
+
+typedef ompd_rc_t (*ompd_callback_device_host_fn_t)(
+    ompd_address_space_context_t *address_space_context, const void *input,
+    ompd_size_t unit_size, ompd_size_t count, void *output);
+
+typedef ompd_rc_t (*ompd_callback_print_string_fn_t)(const char *string,
+                                                     int category);
+
+typedef struct ompd_callbacks_t {
+  ompd_callback_memory_alloc_fn_t alloc_memory;
+  ompd_callback_memory_free_fn_t free_memory;
+  ompd_callback_print_string_fn_t print_string;
+  ompd_callback_sizeof_fn_t sizeof_type;
+  ompd_callback_symbol_addr_fn_t symbol_addr_lookup;
+  ompd_callback_memory_read_fn_t read_memory;
+  ompd_callback_memory_write_fn_t write_memory;
+  ompd_callback_memory_read_fn_t read_string;
+  ompd_callback_device_host_fn_t device_to_host;
+  ompd_callback_device_host_fn_t host_to_device;
+  ompd_callback_get_thread_context_for_thread_id_fn_t
+      get_thread_context_for_thread_id;
+} ompd_callbacks_t;
+
+void ompd_bp_parallel_begin(void);
+
+void ompd_bp_parallel_end(void);
+
+void ompd_bp_task_begin(void);
+
+void ompd_bp_task_end(void);
+
+void ompd_bp_thread_begin(void);
+
+void ompd_bp_thread_end(void);
+
+void ompd_bp_device_begin(void);
+
+void ompd_bp_device_end(void);
+
+ompd_rc_t ompd_initialize(ompd_word_t api_version,
+                          const ompd_callbacks_t *callbacks);
+
+ompd_rc_t ompd_get_api_version(ompd_word_t *version);
+
+ompd_rc_t ompd_get_version_string(const char **string);
+
+ompd_rc_t ompd_finalize(void);
+
+ompd_rc_t ompd_process_initialize(ompd_address_space_context_t *context,
+                                  ompd_address_space_handle_t **handle);
+
+ompd_rc_t ompd_device_initialize(ompd_address_space_handle_t *process_handle,
+                                 ompd_address_space_context_t *device_context,
+                                 ompd_device_t kind, ompd_size_t sizeof_id,
+                                 void *id,
+                                 ompd_address_space_handle_t **device_handle);
+
+ompd_rc_t ompd_rel_address_space_handle(ompd_address_space_handle_t *handle);
+
+ompd_rc_t ompd_get_omp_version(ompd_address_space_handle_t *address_space,
+                               ompd_word_t *omp_version);
+
+ompd_rc_t
+ompd_get_omp_version_string(ompd_address_space_handle_t *address_space,
+                            const char **string);
+
+ompd_rc_t ompd_get_thread_in_parallel(ompd_parallel_handle_t *parallel_handle,
+                                      int thread_num,
+                                      ompd_thread_handle_t **thread_handle);
+
+ompd_rc_t ompd_get_thread_handle(ompd_address_space_handle_t *handle,
+                                 ompd_thread_id_t kind,
+                                 ompd_size_t sizeof_thread_id,
+                                 const void *thread_id,
+                                 ompd_thread_handle_t **thread_handle);
+
+ompd_rc_t ompd_rel_thread_handle(ompd_thread_handle_t *thread_handle);
+
+ompd_rc_t ompd_thread_handle_compare(ompd_thread_handle_t *thread_handle_1,
+                                     ompd_thread_handle_t *thread_handle_2,
+                                     int *cmp_value);
+
+ompd_rc_t ompd_get_thread_id(ompd_thread_handle_t *thread_handle,
+                             ompd_thread_id_t kind,
+                             ompd_size_t sizeof_thread_id, void *thread_id);
+
+ompd_rc_t
+ompd_get_curr_parallel_handle(ompd_thread_handle_t *thread_handle,
+                              ompd_parallel_handle_t **parallel_handle);
+
+ompd_rc_t ompd_get_enclosing_parallel_handle(
+    ompd_parallel_handle_t *parallel_handle,
+    ompd_parallel_handle_t **enclosing_parallel_handle);
+
+ompd_rc_t
+ompd_get_task_parallel_handle(ompd_task_handle_t *task_handle,
+                              ompd_parallel_handle_t **task_parallel_handle);
+
+ompd_rc_t ompd_rel_parallel_handle(ompd_parallel_handle_t *parallel_handle);
+
+ompd_rc_t
+ompd_parallel_handle_compare(ompd_parallel_handle_t *parallel_handle_1,
+                             ompd_parallel_handle_t *parallel_handle_2,
+                             int *cmp_value);
+
+ompd_rc_t ompd_get_curr_task_handle(ompd_thread_handle_t *thread_handle,
+                                    ompd_task_handle_t **task_handle);
+
+ompd_rc_t
+ompd_get_generating_task_handle(ompd_task_handle_t *task_handle,
+                                ompd_task_handle_t **generating_task_handle);
+
+ompd_rc_t
+ompd_get_scheduling_task_handle(ompd_task_handle_t *task_handle,
+                                ompd_task_handle_t **scheduling_task_handle);
+
+ompd_rc_t ompd_get_task_in_parallel(ompd_parallel_handle_t *parallel_handle,
+                                    int thread_num,
+                                    ompd_task_handle_t **task_handle);
+
+ompd_rc_t ompd_rel_task_handle(ompd_task_handle_t *task_handle);
+
+ompd_rc_t ompd_task_handle_compare(ompd_task_handle_t *task_handle_1,
+                                   ompd_task_handle_t *task_handle_2,
+                                   int *cmp_value);
+
+ompd_rc_t ompd_get_task_function(ompd_task_handle_t *task_handle,
+                                 ompd_address_t *entry_point);
+
+ompd_rc_t ompd_get_task_frame(ompd_task_handle_t *task_handle,
+                              ompd_frame_info_t *exit_frame,
+                              ompd_frame_info_t *enter_frame);
+
+ompd_rc_t
+ompd_enumerate_states(ompd_address_space_handle_t *address_space_handle,
+                      ompd_word_t current_state, ompd_word_t *next_state,
+                      const char **next_state_name, ompd_word_t *more_enums);
+
+ompd_rc_t ompd_get_state(ompd_thread_handle_t *thread_handle,
+                         ompd_word_t *state, ompd_wait_id_t *wait_id);
+
+ompd_rc_t
+ompd_get_display_control_vars(ompd_address_space_handle_t *address_space_handle,
+                              const char *const **control_vars);
+
+ompd_rc_t ompd_rel_display_control_vars(const char *const **control_vars);
+
+ompd_rc_t ompd_enumerate_icvs(ompd_address_space_handle_t *handle,
+                              ompd_icv_id_t current, ompd_icv_id_t *next_id,
+                              const char **next_icv_name,
+                              ompd_scope_t *next_scope, int *more);
+
+ompd_rc_t ompd_get_icv_from_scope(void *handle, ompd_scope_t scope,
+                                  ompd_icv_id_t icv_id, ompd_word_t *icv_value);
+
+ompd_rc_t ompd_get_icv_string_from_scope(void *handle, ompd_scope_t scope,
+                                         ompd_icv_id_t icv_id,
+                                         const char **icv_string);
+
+ompd_rc_t ompd_get_tool_data(void *handle, ompd_scope_t scope,
+                             ompd_word_t *value, ompd_address_t *ptr);
+
+typedef struct ompt_record_ompt_t {
+  ompt_callbacks_t type;
+  ompt_device_time_t time;
+  ompt_id_t thread_id;
+  ompt_id_t target_id;
+  union {
+    ompt_record_thread_begin_t thread_begin;
+    ompt_record_parallel_begin_t parallel_begin;
+    ompt_record_parallel_end_t parallel_end;
+    ompt_record_work_t work;
+    ompt_record_dispatch_t dispatch;
+    ompt_record_task_create_t task_create;
+    ompt_record_dependences_t dependences;
+    ompt_record_task_dependence_t task_dependence;
+    ompt_record_task_schedule_t task_schedule;
+    ompt_record_implicit_task_t implicit_task;
+    ompt_record_masked_t masked;
+    ompt_record_sync_region_t sync_region;
+    ompt_record_mutex_acquire_t mutex_acquire;
+    ompt_record_mutex_t mutex;
+    ompt_record_nest_lock_t nest_lock;
+    ompt_record_flush_t flush;
+    ompt_record_cancel_t cancel;
+    ompt_record_target_t target;
+    ompt_record_target_data_op_t target_data_op;
+    ompt_record_target_map_t target_map;
+    ompt_record_target_kernel_t target_kernel;
+    ompt_record_control_tool_t control_tool;
+  } record;
+} ompt_record_ompt_t;
+
+typedef ompt_record_ompt_t *(*ompt_get_record_ompt_t) (
+  ompt_buffer_t *buffer,
+  ompt_buffer_cursor_t current
+);
+
+#define ompt_id_none 0
+#define ompt_data_none {0}
+#define ompt_time_none 0
+#define ompt_hwid_none 0
+#define ompt_addr_none ~0
+#define ompt_mutex_impl_none 0
+#define ompt_wait_id_none 0
+
+#define ompd_segment_none 0
+
+#endif /* __OMPT__ */
