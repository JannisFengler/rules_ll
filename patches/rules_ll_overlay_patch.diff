diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/BUILD.bazel b/utils/bazel/llvm-project-overlay/clang-tools-extra/BUILD.bazel
new file mode 100644
index 000000000..b160d1074
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/BUILD.bazel
@@ -0,0 +1 @@
+# Empty, but patches break if there is no line here.
diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/BUILD.bazel b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/BUILD.bazel
new file mode 100644
index 000000000..1d0156585
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/BUILD.bazel
@@ -0,0 +1,304 @@
+load(
+    "@llvm-project//clang-tools-extra/clang-tidy:clang_tidy_module.bzl",
+    "clang_tidy_module",
+)
+load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
+
+cc_library(
+    name = "clang_tidy",
+    srcs = [
+        "ClangTidy.cpp",
+        "ClangTidyCheck.cpp",
+        "ClangTidyDiagnosticConsumer.cpp",
+        "ClangTidyModule.cpp",
+        "ClangTidyOptions.cpp",
+        "ClangTidyProfiling.cpp",
+        "ExpandModularHeadersPPCallbacks.cpp",
+        "GlobList.cpp",
+        "NoLintDirectiveHandler.cpp",
+    ],
+    hdrs = [
+        "ClangTidy.h",
+        "ClangTidyCheck.h",
+        "ClangTidyDiagnosticConsumer.h",
+        "ClangTidyForceLinker.h",
+        "ClangTidyModule.h",
+        "ClangTidyModuleRegistry.h",
+        "ClangTidyOptions.h",
+        "ClangTidyProfiling.h",
+        "ExpandModularHeadersPPCallbacks.h",
+        "GlobList.h",
+        "NoLintDirectiveHandler.h",
+
+        # Added manually to the overlay.
+        "clang-tidy-config.h",
+    ],
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:format",
+        "@llvm-project//clang:frontend",
+        "@llvm-project//clang:frontend_rewrite",
+        "@llvm-project//clang:lex",
+        "@llvm-project//clang:rewrite",
+        "@llvm-project//clang:sema",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:static_analyzer_core",
+        "@llvm-project//clang:static_analyzer_frontend",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:tooling_core",
+        "@llvm-project//llvm:FrontendOpenMP",
+        "@llvm-project//llvm:Support",
+    ],
+)
+
+cc_library(
+    name = "clang_tidy_utils",
+    srcs = glob(["utils/*.cpp"]),
+    hdrs = glob(["utils/*.h"]),
+    deps = [
+        ":clang_tidy",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:lex",
+        "@llvm-project//clang:sema",
+        "@llvm-project//clang:transformer",
+    ],
+)
+
+clang_tidy_module(
+    name = "abseil",
+    deps = [
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:transformer",
+    ],
+)
+
+clang_tidy_module(
+    name = "altera",
+    deps = [
+        "@llvm-project//clang:analysis",
+    ],
+)
+
+clang_tidy_module(name = "android")
+
+clang_tidy_module(name = "boost")
+
+clang_tidy_module(
+    name = "concurrency",
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(name = "darwin")
+
+clang_tidy_module(
+    name = "readability",
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "google",
+    deps = [":readability"],
+)
+
+clang_tidy_module(
+    name = "fuchsia",
+    deps = [":google"],
+)
+
+clang_tidy_module(name = "linuxkernel")
+
+clang_tidy_module(
+    name = "llvm",
+    deps = [":readability"],
+)
+
+clang_tidy_module(
+    name = "portability",
+    deps = ["@llvm-project//clang:tooling"],
+)
+
+clang_tidy_module(
+    name = "llvmlibc",
+    deps = [":portability"],
+)
+
+clang_tidy_module(
+    name = "misc",
+    deps = [
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "modernize",
+    deps = [
+        ":readability",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "mpi",
+    deps = [
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:static_analyzer_checkers",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(name = "objc")
+
+clang_tidy_module(name = "openmp")
+
+clang_tidy_module(
+    name = "performance",
+    deps = ["@llvm-project//clang:analysis"],
+)
+
+clang_tidy_module(name = "zircon")
+
+clang_tidy_module(
+    name = "cppcoreguidelines",
+    deps = [
+        ":misc",
+        ":modernize",
+        ":readability",
+        "@llvm-project//clang:serialization",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+clang_tidy_module(
+    name = "bugprone",
+    deps = [
+        ":cppcoreguidelines",
+        "@llvm-project//clang:analysis",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:transformer",
+    ],
+)
+
+clang_tidy_module(
+    name = "cert",
+    deps = [
+        ":bugprone",
+        ":concurrency",
+        ":google",
+        ":misc",
+        ":performance",
+        ":readability",
+    ],
+)
+
+clang_tidy_module(
+    name = "hicpp",
+    deps = [
+        ":bugprone",
+        ":cppcoreguidelines",
+        ":google",
+        ":misc",
+        ":modernize",
+        ":performance",
+        ":readability",
+        "@llvm-project//clang:serialization",
+    ],
+)
+
+ALL_CLANG_TIDY_CHECKS = [
+    ":android",
+    ":abseil",
+    ":altera",
+    ":boost",
+    ":bugprone",
+    ":cert",
+    ":concurrency",
+    ":cppcoreguidelines",
+    ":darwin",
+    ":fuchsia",
+    ":google",
+    ":hicpp",
+    ":linuxkernel",
+    ":llvm",
+    ":llvmlibc",
+    ":misc",
+    ":modernize",
+    ":mpi",
+    ":objc",
+    ":openmp",
+    ":performance",
+    ":portability",
+    ":readability",
+    ":zircon",
+]
+
+cc_binary(
+    name = "clang_tidy_plugin",
+    srcs = ["plugin/ClangTidyPlugin.cpp"],
+    linkshared = True,
+    visibility = ["//visibility:public"],
+    deps = ALL_CLANG_TIDY_CHECKS + [
+        ":clang_tidy",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:frontend",
+        "@llvm-project//clang:sema",
+        "@llvm-project//clang:tooling",
+    ],
+)
+
+cc_library(
+    name = "clang_tidy_main",
+    srcs = [
+        "tool/ClangTidyMain.cpp",
+    ],
+    hdrs = [
+        "tool/ClangTidyMain.h",
+    ],
+    deps = [
+        ":clang_tidy",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:tooling_core",
+    ],
+)
+
+cc_binary(
+    name = "clang-tidy",
+    srcs = [
+        "tool/ClangTidyToolMain.cpp",
+    ],
+    visibility = ["//visibility:public"],
+    deps = ALL_CLANG_TIDY_CHECKS + [
+        ":clang_tidy",
+        ":clang_tidy_main",
+        "@llvm-project//clang:ast",
+        "@llvm-project//clang:ast_matchers",
+        "@llvm-project//clang:basic",
+        "@llvm-project//clang:tooling",
+        "@llvm-project//clang:tooling_core",
+    ],
+)
+
+native_binary(
+    name = "run-clang-tidy",
+    src = "tool/run-clang-tidy.py",
+    out = "run-clang-tidy",
+    data = [":clang-tidy"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang-tidy-config.h b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang-tidy-config.h
new file mode 100644
index 000000000..d19ac4250
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang-tidy-config.h
@@ -0,0 +1,8 @@
+#ifdef CLANG_TIDY_CONFIG_H
+#error clang-tidy-config.h can only be included once
+#else
+#define CLANG_TIDY_CONFIG_H
+
+#define CLANG_TIDY_ENABLE_STATIC_ANALYZER 1
+
+#endif
diff --git a/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang_tidy_module.bzl b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang_tidy_module.bzl
new file mode 100644
index 000000000..10e2a508d
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/clang-tools-extra/clang-tidy/clang_tidy_module.bzl
@@ -0,0 +1,18 @@
+def clang_tidy_module(name, deps = []):
+    """Wrapper around cc_library to shorten deps."""
+    native.cc_library(
+        name = name,
+        srcs = native.glob([name + "/*.cpp"]),
+        hdrs = native.glob([name + "/*.h"]),
+        deps = deps + [
+            ":clang_tidy",
+            ":clang_tidy_utils",
+            "@llvm-project//clang:ast",
+            "@llvm-project//clang:ast_matchers",
+            "@llvm-project//clang:basic",
+            "@llvm-project//clang:lex",
+            "@llvm-project//llvm:FrontendOpenMP",
+            "@llvm-project//llvm:Support",
+        ],
+        alwayslink = True,
+    )
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/BUILD.bazel
new file mode 100644
index 000000000..9641252aa
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/BUILD.bazel
@@ -0,0 +1,11 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+ll_library(
+    name = "libll_compiler-rt",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/builtins",
+        "//compiler-rt/lib/crt",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/BUILD.bazel
new file mode 100644
index 000000000..1bb8bf6d7
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/BUILD.bazel
@@ -0,0 +1 @@
+# empty
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/asan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/asan/BUILD.bazel
new file mode 100644
index 000000000..e4652c7dc
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/asan/BUILD.bazel
@@ -0,0 +1,245 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "asan_headers",
+    srcs = [
+        "asan_activation.h",
+        "asan_activation_flags.inc",
+        "asan_allocator.h",
+        "asan_descriptions.h",
+        "asan_errors.h",
+        "asan_fake_stack.h",
+        "asan_flags.h",
+        "asan_flags.inc",
+        "asan_init_version.h",
+        "asan_interceptors.h",
+        "asan_interceptors_memintrinsics.h",
+        "asan_interface.inc",
+        "asan_interface_internal.h",
+        "asan_internal.h",
+        "asan_lock.h",
+        "asan_mapping.h",
+        "asan_poisoning.h",
+        "asan_premap_shadow.h",
+        "asan_report.h",
+        "asan_scariness_score.h",
+        "asan_stack.h",
+        "asan_stats.h",
+        "asan_suppressions.h",
+        "asan_thread.h",
+    ],
+)
+
+filegroup(
+    name = "asan_sources",
+    srcs = [
+        "asan_activation.cpp",
+        "asan_allocator.cpp",
+        "asan_debugging.cpp",
+        "asan_descriptions.cpp",
+        "asan_errors.cpp",
+        "asan_fake_stack.cpp",
+        "asan_flags.cpp",
+        "asan_fuchsia.cpp",
+        "asan_globals.cpp",
+        "asan_globals_win.cpp",
+        "asan_interceptors.cpp",
+        "asan_interceptors_memintrinsics.cpp",
+        "asan_interceptors_vfork.S",  # Not Win32 and not Apple.
+        "asan_linux.cpp",
+        "asan_mac.cpp",
+        "asan_malloc_linux.cpp",
+        "asan_malloc_mac.cpp",
+        "asan_malloc_win.cpp",
+        "asan_memory_profile.cpp",
+        "asan_poisoning.cpp",
+        "asan_posix.cpp",
+        "asan_premap_shadow.cpp",
+        "asan_report.cpp",
+        "asan_rtl.cpp",
+        "asan_shadow_setup.cpp",
+        "asan_stack.cpp",
+        "asan_stats.cpp",
+        "asan_suppressions.cpp",
+        "asan_thread.cpp",
+        "asan_win.cpp",
+    ],
+)
+
+filegroup(
+    name = "asan_cxx_sources",
+    srcs = [
+        "asan_new_delete.cpp",
+    ],
+)
+
+filegroup(
+    name = "asan_static_sources",
+    srcs = [
+        "asan_rtl_static.cpp",
+        "asan_rtl_x86_64.S",  # Not Win32 and not Apple.
+    ],
+)
+
+filegroup(
+    name = "asan_preinit_sources",
+    srcs = [
+        "asan_preinit.cpp",
+    ],
+)
+
+ll_library(
+    name = "RTAsan_dynamic",
+    srcs = [
+        ":asan_cxx_sources",
+        ":asan_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/lsan:lsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-fvisibility=hidden",
+    ],
+    defines = ["ASAN_DYNAMIC=1"],
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan",
+    srcs = [
+        ":asan_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/lsan:lsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan_cxx",
+    srcs = [
+        ":asan_cxx_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan_static",
+    srcs = [
+        "asan_rtl_static.cpp",
+        "asan_rtl_x86_64.S",  # Not Win32 and not Apple.
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTAsan_preinit",
+    srcs = [
+        ":asan_preinit_sources",
+    ],
+    hdrs = [
+        ":asan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.asan",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan",
+        ":RTAsan_preinit",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/lsan:RTLSanCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+    ],
+)
+
+ll_library(
+    # We want the output library to be named libasan.so. Otherwise it will not
+    # be recognized by IsDynamicRTName in asan_linux.cpp.
+    name = "libasan",
+    compilation_mode = "bootstrap",
+    emit = ["shared_object"],
+    shared_object_link_flags = [
+        "--eh-frame-hdr",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_dynamic",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/lsan:RTLSanCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.asan_cxx",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_cxx",
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.asan_static",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_static",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.asan-preinit",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTAsan_preinit",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/builtins/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/builtins/BUILD.bazel
new file mode 100644
index 000000000..68e031bef
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/builtins/BUILD.bazel
@@ -0,0 +1,225 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+GENERIC_SOURCES = [
+    "absvdi2.c",
+    "absvsi2.c",
+    "absvti2.c",
+    "adddf3.c",
+    "addsf3.c",
+    "addvdi3.c",
+    "addvsi3.c",
+    "addvti3.c",
+    "apple_versioning.c",
+    "ashldi3.c",
+    "ashlti3.c",
+    "ashrdi3.c",
+    "ashrti3.c",
+    "bswapdi2.c",
+    "bswapsi2.c",
+    "clzdi2.c",
+    "clzsi2.c",
+    "clzti2.c",
+    "cmpdi2.c",
+    "cmpti2.c",
+    "comparedf2.c",
+    "comparesf2.c",
+    "ctzdi2.c",
+    "ctzsi2.c",
+    "ctzti2.c",
+    "divdc3.c",
+    "divdf3.c",
+    "divdi3.c",
+    "divmoddi4.c",
+    "divmodsi4.c",
+    "divmodti4.c",
+    "divsc3.c",
+    "divsf3.c",
+    "divsi3.c",
+    "divti3.c",
+    "extendsfdf2.c",
+    "extendhfsf2.c",
+    "ffsdi2.c",
+    "ffssi2.c",
+    "ffsti2.c",
+    "fixdfdi.c",
+    "fixdfsi.c",
+    "fixdfti.c",
+    "fixsfdi.c",
+    "fixsfsi.c",
+    "fixsfti.c",
+    "fixunsdfdi.c",
+    "fixunsdfsi.c",
+    "fixunsdfti.c",
+    "fixunssfdi.c",
+    "fixunssfsi.c",
+    "fixunssfti.c",
+    "floatdidf.c",
+    "floatdisf.c",
+    "floatsidf.c",
+    "floatsisf.c",
+    "floattidf.c",
+    "floattisf.c",
+    "floatundidf.c",
+    "floatundisf.c",
+    "floatunsidf.c",
+    "floatunsisf.c",
+    "floatuntidf.c",
+    "floatuntisf.c",
+    "fp_mode.c",
+    "int_util.c",
+    "lshrdi3.c",
+    "lshrti3.c",
+    "moddi3.c",
+    "modsi3.c",
+    "modti3.c",
+    "muldc3.c",
+    "muldf3.c",
+    "muldi3.c",
+    "mulodi4.c",
+    "mulosi4.c",
+    "muloti4.c",
+    "mulsc3.c",
+    "mulsf3.c",
+    "multi3.c",
+    "mulvdi3.c",
+    "mulvsi3.c",
+    "mulvti3.c",
+    "negdf2.c",
+    "negdi2.c",
+    "negsf2.c",
+    "negti2.c",
+    "negvdi2.c",
+    "negvsi2.c",
+    "negvti2.c",
+    "os_version_check.c",
+    "paritydi2.c",
+    "paritysi2.c",
+    "parityti2.c",
+    "popcountdi2.c",
+    "popcountsi2.c",
+    "popcountti2.c",
+    "powidf2.c",
+    "powisf2.c",
+    "subdf3.c",
+    "subsf3.c",
+    "subvdi3.c",
+    "subvsi3.c",
+    "subvti3.c",
+    "trampoline_setup.c",
+    "truncdfhf2.c",
+    "truncdfsf2.c",
+    "truncsfhf2.c",
+    "ucmpdi2.c",
+    "ucmpti2.c",
+    "udivdi3.c",
+    "udivmoddi4.c",
+    "udivmodsi4.c",
+    "udivmodti4.c",
+    "udivsi3.c",
+    "udivti3.c",
+    "umoddi3.c",
+    "umodsi3.c",
+    "umodti3.c",
+
+    # Not Fuchsia and not a bare-metal build.
+    "emutls.c",
+    "enable_execute_stack.c",
+    "eprintf.c",
+
+    # Not sure whether we want atomic in this or separately.
+    "atomic.c",
+
+    # Not sure whether this is for libunwind or gcc_s. gotta check.
+    "gcc_personality_v0.c",
+
+    # Not Fuchsia.
+    "clear_cache.c",
+]
+
+GENERIC_TF_SOURCES = [
+    "addtf3.c",
+    "comparetf2.c",
+    "divtc3.c",
+    "divtf3.c",
+    "extenddftf2.c",
+    "extendhftf2.c",
+    "extendsftf2.c",
+    "fixtfdi.c",
+    "fixtfsi.c",
+    "fixtfti.c",
+    "fixunstfdi.c",
+    "fixunstfsi.c",
+    "fixunstfti.c",
+    "floatditf.c",
+    "floatsitf.c",
+    "floattitf.c",
+    "floatunditf.c",
+    "floatunsitf.c",
+    "floatuntitf.c",
+    "multc3.c",
+    "multf3.c",
+    "powitf2.c",
+    "subtf3.c",
+    "trunctfdf2.c",
+    "trunctfhf2.c",
+    "trunctfsf2.c",
+]
+
+X86_ARCH_SOURCES = [
+    "cpu_model.c",
+    "i386/fp_mode.c",  # Used on 64-bit as well.
+]
+
+X86_80_BIT_SOURCES = [
+    "divxc3.c",
+    "fixxfdi.c",
+    "fixxfti.c",
+    "fixunsxfdi.c",
+    "fixunsxfsi.c",
+    "fixunsxfti.c",
+    "floatdixf.c",
+    "floattixf.c",
+    "floatundixf.c",
+    "floatuntixf.c",
+    "mulxc3.c",
+    "powixf2.c",
+]
+
+X86_64_SOURCES = GENERIC_SOURCES + GENERIC_TF_SOURCES + X86_ARCH_SOURCES + X86_80_BIT_SOURCES + [
+    "x86_64/floatdidf.c",
+    "x86_64/floatdisf.c",
+    "x86_64/floatundidf.S",
+    "x86_64/floatundisf.S",
+    "x86_64/floatdixf.c",
+    "x86_64/floatundixf.S",
+]
+
+ll_library(
+    name = "builtins",
+    srcs = X86_64_SOURCES,
+    hdrs = [
+        "assembly.h",
+        "fp_add_impl.inc",
+        "fp_compare_impl.inc",
+        "fp_div_impl.inc",
+        "fp_extend.h",
+        "fp_extend_impl.inc",
+        "fp_fixint_impl.inc",
+        "fp_fixuint_impl.inc",
+        "fp_lib.h",
+        "fp_mode.h",
+        "fp_mul_impl.inc",
+        "fp_trunc.h",
+        "fp_trunc_impl.inc",
+        "int_div_impl.inc",
+        "int_endianness.h",
+        "int_lib.h",
+        "int_math.h",
+        "int_mulo_impl.inc",
+        "int_mulv_impl.inc",
+        "int_types.h",
+        "int_util.h",
+    ],
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/crt/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/crt/BUILD.bazel
new file mode 100644
index 000000000..fc768e047
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/crt/BUILD.bazel
@@ -0,0 +1,28 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+ll_library(
+    name = "crtbegin",
+    srcs = ["crtbegin.c"],
+    compilation_mode = "bootstrap",
+    defines = ["EH_USE_FRAME_REGISTRY"],
+    emit = ["objects"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "crtend",
+    srcs = ["crtend.c"],
+    compilation_mode = "bootstrap",
+    emit = ["objects"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "crt",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":crtbegin",
+        ":crtend",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/interception/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/interception/BUILD.bazel
new file mode 100644
index 000000000..831b2eb68
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/interception/BUILD.bazel
@@ -0,0 +1,29 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "interception_headers",
+    srcs = [
+        "interception.h",
+        "interception_linux.h",
+        "interception_mac.h",
+        "interception_win.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTInterception",
+    srcs = [
+        "interception_linux.cpp",
+        "interception_mac.cpp",
+        "interception_type_test.cpp",
+        "interception_win.cpp",
+    ],
+    hdrs = [
+        ":interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/lsan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/lsan/BUILD.bazel
new file mode 100644
index 000000000..7188ec565
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/lsan/BUILD.bazel
@@ -0,0 +1,63 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "lsan_headers",
+    srcs = [
+        "lsan.h",
+        "lsan_allocator.h",
+        "lsan_common.h",
+        "lsan_flags.inc",
+        "lsan_posix.h",  # Missing in CMake.
+        "lsan_thread.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTLSanCommon",
+    srcs = [
+        "lsan_common.cpp",
+        "lsan_common_fuchsia.cpp",
+        "lsan_common_linux.cpp",
+        "lsan_common_mac.cpp",
+    ],
+    hdrs = [
+        ":lsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.lsan",
+    srcs = [
+        "lsan.cpp",
+        "lsan_allocator.cpp",
+        "lsan_fuchsia.cpp",
+        "lsan_interceptors.cpp",
+        "lsan_linux.cpp",
+        "lsan_mac.cpp",
+        "lsan_malloc_mac.cpp",
+        "lsan_posix.cpp",
+        "lsan_preinit.cpp",
+        "lsan_thread.cpp",
+    ],
+    hdrs = [
+        ":lsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTLSanCommon",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/msan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/msan/BUILD.bazel
new file mode 100644
index 000000000..cba7a625a
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/msan/BUILD.bazel
@@ -0,0 +1,74 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "msan_headers",
+    srcs = [
+        "msan.h",
+        "msan_allocator.h",
+        "msan_chained_origin_depot.h",
+        "msan_flags.h",
+        "msan_flags.inc",
+        "msan_interface_internal.h",
+        "msan_origin.h",
+        "msan_poisoning.h",
+        "msan_report.h",
+        "msan_thread.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.msan",
+    srcs = [
+        "msan.cpp",
+        "msan_allocator.cpp",
+        "msan_chained_origin_depot.cpp",
+        "msan_interceptors.cpp",
+        "msan_linux.cpp",
+        "msan_poisoning.cpp",
+        "msan_report.cpp",
+        "msan_thread.cpp",
+    ],
+    hdrs = [
+        ":msan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-ffreestanding",
+    ],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.msan_cxx",
+    srcs = [
+        "msan_new_delete.cpp",
+    ],
+    hdrs = [
+        ":msan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-ffreestanding",
+    ],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/sanitizer_common/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/sanitizer_common/BUILD.bazel
new file mode 100644
index 000000000..cce94bea1
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/sanitizer_common/BUILD.bazel
@@ -0,0 +1,244 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "sanitizer_impl_headers",
+    srcs = [
+        "sancov_flags.h",
+        "sancov_flags.inc",
+        "sanitizer_addrhashmap.h",
+        "sanitizer_allocator.h",
+        "sanitizer_allocator_checks.h",
+        "sanitizer_allocator_combined.h",
+        "sanitizer_allocator_dlsym.h",
+        "sanitizer_allocator_interface.h",
+        "sanitizer_allocator_internal.h",
+        "sanitizer_allocator_local_cache.h",
+        "sanitizer_allocator_primary32.h",
+        "sanitizer_allocator_primary64.h",
+        "sanitizer_allocator_report.h",
+        "sanitizer_allocator_secondary.h",
+        "sanitizer_allocator_size_class_map.h",
+        "sanitizer_allocator_stats.h",
+        "sanitizer_asm.h",
+        "sanitizer_atomic.h",
+        "sanitizer_atomic_clang.h",
+        "sanitizer_atomic_clang_mips.h",
+        "sanitizer_atomic_clang_other.h",
+        "sanitizer_atomic_clang_x86.h",
+        "sanitizer_atomic_msvc.h",
+        "sanitizer_bitvector.h",
+        "sanitizer_bvgraph.h",
+        "sanitizer_chained_origin_depot.h",
+        "sanitizer_common.h",
+        "sanitizer_common_interceptors.inc",
+        "sanitizer_common_interceptors_format.inc",
+        "sanitizer_common_interceptors_ioctl.inc",
+        "sanitizer_common_interceptors_netbsd_compat.inc",  # Missing in CMake.
+
+        # Always linux. Missing in CMake.
+        "sanitizer_common_interceptors_vfork_aarch64.inc.S",
+        "sanitizer_common_interceptors_vfork_arm.inc.S",
+        "sanitizer_common_interceptors_vfork_i386.inc.S",
+        "sanitizer_common_interceptors_vfork_riscv64.inc.S",
+        "sanitizer_common_interceptors_vfork_x86_64.inc.S",
+        "sanitizer_common_interface.inc",
+        "sanitizer_common_interface_posix.inc",
+        "sanitizer_common_syscalls.inc",
+        "sanitizer_coverage_interface.inc",
+        "sanitizer_dbghelp.h",
+        "sanitizer_deadlock_detector.h",
+        "sanitizer_deadlock_detector_interface.h",
+        "sanitizer_dense_map.h",
+        "sanitizer_dense_map_info.h",
+        "sanitizer_errno.h",
+        "sanitizer_errno_codes.h",
+        "sanitizer_file.h",
+        "sanitizer_flag_parser.h",
+        "sanitizer_flags.h",
+        "sanitizer_flags.inc",
+        "sanitizer_flat_map.h",
+        "sanitizer_freebsd.h",
+        "sanitizer_fuchsia.h",
+        "sanitizer_getauxval.h",
+        "sanitizer_glibc_version.h",  # Missing in CMake.
+        "sanitizer_hash.h",
+        "sanitizer_interceptors_ioctl_netbsd.inc",
+        "sanitizer_interface_internal.h",
+        "sanitizer_internal_defs.h",
+        "sanitizer_leb128.h",
+        "sanitizer_lfstack.h",
+        "sanitizer_libc.h",
+        "sanitizer_libignore.h",
+        "sanitizer_linux.h",
+        "sanitizer_list.h",
+        "sanitizer_local_address_space_view.h",
+        "sanitizer_lzw.h",
+        "sanitizer_mac.h",
+        "sanitizer_malloc_mac.inc",
+        "sanitizer_mutex.h",
+        "sanitizer_placement_new.h",
+        "sanitizer_platform.h",
+        "sanitizer_platform_interceptors.h",
+        "sanitizer_platform_limits_freebsd.h",  # Missing in CMake.
+        "sanitizer_platform_limits_netbsd.h",
+        "sanitizer_platform_limits_posix.h",
+        "sanitizer_platform_limits_solaris.h",
+        "sanitizer_posix.h",
+        "sanitizer_procmaps.h",
+        "sanitizer_ptrauth.h",
+        "sanitizer_quarantine.h",
+        "sanitizer_report_decorator.h",
+        "sanitizer_ring_buffer.h",
+        "sanitizer_signal_interceptors.inc",
+        "sanitizer_stack_store.h",
+        "sanitizer_stackdepot.h",
+        "sanitizer_stackdepotbase.h",
+        "sanitizer_stacktrace.h",
+        "sanitizer_stacktrace_printer.h",
+        "sanitizer_stoptheworld.h",
+        "sanitizer_suppressions.h",
+        "sanitizer_symbolizer.h",
+        "sanitizer_symbolizer_fuchsia.h",
+        "sanitizer_symbolizer_internal.h",
+        "sanitizer_symbolizer_libbacktrace.h",
+        "sanitizer_symbolizer_mac.h",
+        "sanitizer_syscall_generic.inc",
+        "sanitizer_syscall_linux_aarch64.inc",
+        "sanitizer_syscall_linux_arm.inc",
+        "sanitizer_syscall_linux_riscv64.inc",
+        "sanitizer_syscall_linux_x86_64.inc",
+        "sanitizer_syscalls_netbsd.inc",
+        "sanitizer_thread_registry.h",
+        "sanitizer_thread_safety.h",
+        "sanitizer_tls_get_addr.h",
+        "sanitizer_type_traits.h",  # Missing in CMake.
+        "sanitizer_vector.h",
+        "sanitizer_win.h",
+        "sanitizer_win_defs.h",
+        "sanitizer_win_dll_thunk.h",
+        "sanitizer_win_weak_interception.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+# TODO: Architecture-specific names as in CMake.
+ll_library(
+    name = "RTSanitizerCommon",
+    srcs = [
+        "sanitizer_allocator.cpp",
+        "sanitizer_common.cpp",
+        "sanitizer_deadlock_detector1.cpp",
+        "sanitizer_deadlock_detector2.cpp",
+        "sanitizer_errno.cpp",
+        "sanitizer_file.cpp",
+        "sanitizer_flags.cpp",
+        "sanitizer_flag_parser.cpp",
+        "sanitizer_fuchsia.cpp",
+        "sanitizer_libc.cpp",
+        "sanitizer_libignore.cpp",
+        "sanitizer_linux.cpp",
+        "sanitizer_linux_s390.cpp",
+        "sanitizer_mac.cpp",
+        "sanitizer_mutex.cpp",
+        "sanitizer_netbsd.cpp",
+        "sanitizer_platform_limits_freebsd.cpp",
+        "sanitizer_platform_limits_linux.cpp",
+        "sanitizer_platform_limits_netbsd.cpp",
+        "sanitizer_platform_limits_posix.cpp",
+        "sanitizer_platform_limits_solaris.cpp",
+        "sanitizer_posix.cpp",
+        "sanitizer_printf.cpp",
+        "sanitizer_procmaps_common.cpp",
+        "sanitizer_procmaps_bsd.cpp",
+        "sanitizer_procmaps_fuchsia.cpp",
+        "sanitizer_procmaps_linux.cpp",
+        "sanitizer_procmaps_mac.cpp",
+        "sanitizer_procmaps_solaris.cpp",
+        "sanitizer_solaris.cpp",
+        "sanitizer_stoptheworld_fuchsia.cpp",
+        "sanitizer_stoptheworld_mac.cpp",
+        "sanitizer_stoptheworld_win.cpp",
+        "sanitizer_suppressions.cpp",
+        "sanitizer_tls_get_addr.cpp",
+        "sanitizer_thread_registry.cpp",
+        "sanitizer_type_traits.cpp",
+        "sanitizer_win.cpp",
+
+        # Always termination.
+        "sanitizer_termination.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonNoLibc",
+    srcs = [
+        "sanitizer_common_nolibc.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonLibc",
+    srcs = [
+        "sanitizer_allocator_checks.cpp",
+        "sanitizer_common_libcdep.cpp",
+        "sanitizer_linux_libcdep.cpp",
+        "sanitizer_mac_libcdep.cpp",
+        "sanitizer_posix_libcdep.cpp",
+        "sanitizer_stoptheworld_linux_libcdep.cpp",
+        "sanitizer_stoptheworld_netbsd_libcdep.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonCoverage",
+    srcs = [
+        "sancov_flags.cpp",
+        "sanitizer_coverage_fuchsia.cpp",
+        "sanitizer_coverage_libcdep_new.cpp",
+        "sanitizer_coverage_win_sections.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTSanitizerCommonSymbolizer",
+    srcs = [
+        "sanitizer_allocator_report.cpp",
+        "sanitizer_chained_origin_depot.cpp",
+        "sanitizer_stack_store.cpp",
+        "sanitizer_stackdepot.cpp",
+        "sanitizer_stacktrace.cpp",
+        "sanitizer_stacktrace_libcdep.cpp",
+        "sanitizer_stacktrace_printer.cpp",
+        "sanitizer_stacktrace_sparc.cpp",
+        "sanitizer_symbolizer.cpp",
+        "sanitizer_symbolizer_libbacktrace.cpp",
+        "sanitizer_symbolizer_libcdep.cpp",
+        "sanitizer_symbolizer_mac.cpp",
+        "sanitizer_symbolizer_markup.cpp",
+        "sanitizer_symbolizer_posix_libcdep.cpp",
+        "sanitizer_symbolizer_report.cpp",
+        "sanitizer_symbolizer_win.cpp",
+        "sanitizer_unwind_linux_libcdep.cpp",
+        "sanitizer_unwind_win.cpp",
+    ],
+    hdrs = [":sanitizer_impl_headers"],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/tsan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/tsan/BUILD.bazel
new file mode 100644
index 000000000..45becbca8
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/tsan/BUILD.bazel
@@ -0,0 +1,114 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "tsan_headers",
+    srcs = [
+        "rtl/tsan_defs.h",
+        "rtl/tsan_dense_alloc.h",
+        "rtl/tsan_fd.h",
+        "rtl/tsan_flags.h",
+        "rtl/tsan_flags.inc",
+        "rtl/tsan_ignoreset.h",
+        "rtl/tsan_ilist.h",
+        "rtl/tsan_interceptors.h",
+        "rtl/tsan_interface.h",
+        "rtl/tsan_interface.inc",
+        "rtl/tsan_interface_ann.h",
+        "rtl/tsan_interface_java.h",
+        "rtl/tsan_mman.h",
+        "rtl/tsan_mutexset.h",
+        "rtl/tsan_platform.h",
+        "rtl/tsan_ppc_regs.h",
+        "rtl/tsan_report.h",
+        "rtl/tsan_rtl.h",
+        "rtl/tsan_shadow.h",
+        "rtl/tsan_stack_trace.h",
+        "rtl/tsan_suppressions.h",
+        "rtl/tsan_symbolize.h",
+        "rtl/tsan_sync.h",
+        "rtl/tsan_trace.h",
+        "rtl/tsan_vector_clock.h",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.tsan",
+    srcs = [
+        # TSAN_SOURCES.
+        "rtl/tsan_debugging.cpp",
+        "rtl/tsan_external.cpp",
+        "rtl/tsan_fd.cpp",
+        "rtl/tsan_flags.cpp",
+        "rtl/tsan_ignoreset.cpp",
+        "rtl/tsan_interceptors_posix.cpp",
+        "rtl/tsan_interface.cpp",
+        "rtl/tsan_interface_ann.cpp",
+        "rtl/tsan_interface_atomic.cpp",
+        "rtl/tsan_interface_java.cpp",
+        "rtl/tsan_malloc_mac.cpp",
+        "rtl/tsan_md5.cpp",
+        "rtl/tsan_mman.cpp",
+        "rtl/tsan_mutexset.cpp",
+        "rtl/tsan_report.cpp",
+        "rtl/tsan_rtl.cpp",
+        "rtl/tsan_rtl_access.cpp",
+        "rtl/tsan_rtl_mutex.cpp",
+        "rtl/tsan_rtl_proc.cpp",
+        "rtl/tsan_rtl_report.cpp",
+        "rtl/tsan_rtl_thread.cpp",
+        "rtl/tsan_stack_trace.cpp",
+        "rtl/tsan_suppressions.cpp",
+        "rtl/tsan_symbolize.cpp",
+        "rtl/tsan_sync.cpp",
+        "rtl/tsan_vector_clock.cpp",
+
+        # TSAN_ASM_SOURCES.
+        "rtl/tsan_rtl_amd64.S",
+
+        # TSAN_PREINIT_SOURCES.
+        "rtl/tsan_preinit.cpp",
+
+        # Linux sources.
+        "rtl/tsan_platform_linux.cpp",
+        "rtl/tsan_platform_posix.cpp",
+    ],
+    hdrs = [
+        ":tsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = ["-msse4.2"],
+    relative_angled_includes = ["compiler-rt/lib"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+        "//compiler-rt/lib/ubsan:RTUbsan",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.tsan_cxx",
+    srcs = [
+        "rtl/tsan_new_delete.cpp",
+    ],
+    hdrs = [
+        ":tsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+        "//compiler-rt/lib/ubsan:ubsan_headers",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = ["-msse4.2"],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/compiler-rt/lib/ubsan/BUILD.bazel b/utils/bazel/llvm-project-overlay/compiler-rt/lib/ubsan/BUILD.bazel
new file mode 100644
index 000000000..736606a26
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/compiler-rt/lib/ubsan/BUILD.bazel
@@ -0,0 +1,109 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "ubsan_headers",
+    srcs = [
+        "ubsan_checks.inc",
+        "ubsan_diag.h",
+        "ubsan_flags.h",
+        "ubsan_flags.inc",
+        "ubsan_handlers.h",
+        "ubsan_handlers_cxx.h",
+        "ubsan_init.h",
+        "ubsan_interface.inc",
+        "ubsan_monitor.h",
+        "ubsan_platform.h",
+        "ubsan_signals_standalone.h",
+        "ubsan_type_hash.h",
+        "ubsan_value.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTUbsan",
+    srcs = [
+        "ubsan_diag.cpp",
+        "ubsan_flags.cpp",
+        "ubsan_handlers.cpp",
+        "ubsan_init.cpp",
+        "ubsan_monitor.cpp",
+        "ubsan_value.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    defines = [
+        "UBSAN_CAN_USE_CXXABI",
+    ],
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTUbsan_cxx",
+    srcs = [
+        "ubsan_handlers_cxx.cpp",
+        "ubsan_type_hash.cpp",
+        "ubsan_type_hash_itanium.cpp",
+        "ubsan_type_hash_win.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "RTUbsan_standalone",
+    srcs = [
+        "ubsan_diag_standalone.cpp",
+        "ubsan_init_standalone.cpp",
+        "ubsan_signals_standalone.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/interception:interception_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "clang_rt.ubsan_standalone",
+    srcs = [
+        "ubsan_init_standalone_preinit.cpp",
+    ],
+    hdrs = [
+        ":ubsan_headers",
+        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
+    ],
+    compilation_mode = "bootstrap",
+    relative_includes = ["compiler-rt/lib"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTUbsan",
+        ":RTUbsan_standalone",
+        "//compiler-rt/lib/interception:RTInterception",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
+        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
+    ],
+)
+
+ll_library(
+    name = "clang_rt.ubsan_standalone_cxx",
+    compilation_mode = "bootstrap",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":RTUbsan_cxx",
+    ],
+)
diff --git a/utils/bazel/llvm-project-overlay/libcxx/BUILD.bazel b/utils/bazel/llvm-project-overlay/libcxx/BUILD.bazel
new file mode 100644
index 000000000..cc3d0e526
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxx/BUILD.bazel
@@ -0,0 +1,132 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "libcxx_headers",
+    srcs = glob(["include/**/*"]),
+    visibility = ["//visibility:public"],
+)
+
+filegroup(
+    name = "libcxx_sources",
+    srcs = glob(["src/**/*"]),
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "libll_cxx",
+    srcs = [
+        "src/algorithm.cpp",
+        "src/any.cpp",
+        "src/atomic.cpp",
+        "src/barrier.cpp",
+        "src/bind.cpp",
+        "src/charconv.cpp",
+        "src/chrono.cpp",
+        "src/condition_variable.cpp",
+        "src/condition_variable_destructor.cpp",
+        "src/exception.cpp",
+        "src/filesystem/directory_iterator.cpp",
+        "src/filesystem/operations.cpp",
+        "src/format.cpp",
+        "src/functional.cpp",
+        "src/future.cpp",
+        "src/hash.cpp",
+        "src/ios.cpp",
+        "src/ios.instantiations.cpp",
+        "src/iostream.cpp",
+        "src/legacy_pointer_safety.cpp",
+        "src/locale.cpp",
+        "src/memory.cpp",
+        "src/mutex.cpp",
+        "src/mutex_destructor.cpp",
+        "src/new.cpp",
+        "src/optional.cpp",
+        "src/random.cpp",
+        "src/random_shuffle.cpp",
+        "src/regex.cpp",
+        "src/ryu/d2fixed.cpp",
+        "src/ryu/d2s.cpp",
+        "src/ryu/f2s.cpp",
+        "src/shared_mutex.cpp",
+        "src/stdexcept.cpp",
+        "src/string.cpp",
+        "src/strstream.cpp",
+        "src/system_error.cpp",
+        "src/thread.cpp",
+        "src/typeinfo.cpp",
+        "src/utility.cpp",
+        "src/valarray.cpp",
+        "src/variant.cpp",
+        "src/vector.cpp",
+    ],
+    hdrs = [
+        # Files in src/include.
+        "src/include/apple_availability.h",
+        "src/include/atomic_support.h",
+        "src/include/config_elast.h",
+        "src/include/refstring.h",
+        "src/include/ryu/common.h",
+        "src/include/ryu/d2fixed.h",
+        "src/include/ryu/d2fixed_full_table.h",
+        "src/include/ryu/d2s.h",
+        "src/include/ryu/d2s_full_table.h",
+        "src/include/ryu/d2s_intrinsics.h",
+        "src/include/ryu/digit_table.h",
+        "src/include/ryu/f2s.h",
+        "src/include/ryu/ryu.h",
+        "src/include/to_chars_floating_point.h",
+
+        # Filesystem files.
+        "src/filesystem/filesystem_common.h",
+        "src/filesystem/posix_compat.h",
+
+        # Support ipp files.
+        "src/support/runtime/exception_fallback.ipp",
+        "src/support/runtime/exception_glibcxx.ipp",
+        "src/support/runtime/exception_libcxxabi.ipp",
+        "src/support/runtime/exception_libcxxrt.ipp",
+        "src/support/runtime/exception_msvc.ipp",
+        "src/support/runtime/exception_pointer_cxxabi.ipp",
+        "src/support/runtime/exception_pointer_glibcxx.ipp",
+        "src/support/runtime/exception_pointer_msvc.ipp",
+        "src/support/runtime/exception_pointer_unimplemented.ipp",
+        "src/support/runtime/new_handler_fallback.ipp",
+        "src/support/runtime/stdexcept_default.ipp",
+        "src/support/runtime/stdexcept_vcruntime.ipp",
+
+        # Headers for building iostream.
+        "src/include/sso_allocator.h",
+        "src/iostream_init.h",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-std=c++20",
+        "-faligned-allocation",
+        "-fno-omit-frame-pointer",
+        "-funwind-tables",
+        "-fstrict-aliasing",
+        "-fvisibility-inlines-hidden",
+        "-Wno-user-defined-literals",
+    ],
+    # Adding libcxx headers via the data field lets us include them via
+    # a custom CPLUS_INCLUDE_PATH setting in the compilation environment for
+    # ll_bootstrap_library. So no include attribute needed to match this.
+    data = [
+        "//libcxx:libcxx_headers",
+        "//libcxxabi:libcxxabi_headers",
+    ],
+    defines = [
+        "NDEBUG",
+        "LIBCXX_BUILDING_LIBCXXABI",
+        "_LIBCXXABI_BUILDING_LIBRARY",
+        "_LIBCPP_BUILDING_LIBRARY",
+        "_LIBCPP_DISABLE_NEW_DELETE_DEFINITIONS",
+        "_LIBCPP_LINK_PTHREAD",
+        "_LIBCPP_LINK_RT_LIB",
+        "_LIBCPP_DISABLE_EXTERN_TEMPLATE",
+        "__STDC_CONSTANT_MACROS",
+        "__STDC_FORMAT_MACROS",
+        "__STDC_LIMIT_MACROS",
+    ],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/libcxx/include/__config_site b/utils/bazel/llvm-project-overlay/libcxx/include/__config_site
new file mode 100644
index 000000000..72a7f9526
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxx/include/__config_site
@@ -0,0 +1,37 @@
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef _LIBCPP_CONFIG_SITE
+#define _LIBCPP_CONFIG_SITE
+
+#define _LIBCPP_ABI_VERSION 1
+#define _LIBCPP_ABI_NAMESPACE __1
+/* #undef _LIBCPP_ABI_UNSTABLE */
+/* #undef _LIBCPP_ABI_FORCE_ITANIUM */
+/* #undef _LIBCPP_ABI_FORCE_MICROSOFT */
+/* #undef _LIBCPP_HIDE_FROM_ABI_PER_TU_BY_DEFAULT */
+/* #undef _LIBCPP_HAS_NO_THREADS */
+/* #undef _LIBCPP_HAS_NO_MONOTONIC_CLOCK */
+/* #undef _LIBCPP_HAS_MUSL_LIBC */
+/* #undef _LIBCPP_HAS_THREAD_API_PTHREAD */
+/* #undef _LIBCPP_HAS_THREAD_API_EXTERNAL */
+/* #undef _LIBCPP_HAS_THREAD_API_WIN32 */
+/* #undef _LIBCPP_HAS_THREAD_LIBRARY_EXTERNAL */
+/* #undef _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS */
+#define _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS
+/* #undef _LIBCPP_NO_VCRUNTIME */
+/* #undef _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION */
+/* #undef _LIBCPP_HAS_NO_FILESYSTEM_LIBRARY */
+/* #undef _LIBCPP_HAS_PARALLEL_ALGORITHMS */
+/* #undef _LIBCPP_HAS_NO_RANDOM_DEVICE */
+/* #undef _LIBCPP_HAS_NO_LOCALIZATION */
+/* #undef _LIBCPP_HAS_NO_WIDE_CHARACTERS */
+/* #undef _LIBCPP_HAS_NO_INCOMPLETE_FORMAT */
+/* #undef _LIBCPP_HAS_NO_INCOMPLETE_RANGES */
+
+#endif // _LIBCPP_CONFIG_SITE"
diff --git a/utils/bazel/llvm-project-overlay/libcxxabi/BUILD.bazel b/utils/bazel/llvm-project-overlay/libcxxabi/BUILD.bazel
new file mode 100644
index 000000000..925841ef9
--- /dev/null
+++ b/utils/bazel/llvm-project-overlay/libcxxabi/BUILD.bazel
@@ -0,0 +1,92 @@
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "libcxxabi_headers",
+    srcs = [
+        "include/__cxxabi_config.h",
+        "include/cxxabi.h",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "libll_cxxabi",
+    srcs = [
+        # C++ABI files
+        "src/cxa_aux_runtime.cpp",
+        "src/cxa_default_handlers.cpp",
+        "src/cxa_demangle.cpp",
+        "src/cxa_exception_storage.cpp",
+        "src/cxa_guard.cpp",
+        "src/cxa_handlers.cpp",
+        "src/cxa_thread_atexit.cpp",
+        "src/cxa_vector.cpp",
+        "src/cxa_virtual.cpp",
+
+        # C++ STL files
+        "src/stdlib_exception.cpp",
+        "src/stdlib_stdexcept.cpp",
+        "src/stdlib_typeinfo.cpp",
+
+        # Internal files
+        "src/abort_message.cpp",
+        "src/fallback_malloc.cpp",
+        "src/private_typeinfo.cpp",
+
+        # New/Delete
+        "src/stdlib_new_delete.cpp",
+
+        # Exceptions
+        "src/cxa_exception.cpp",
+        "src/cxa_personality.cpp",
+    ],
+    hdrs = glob(["include/**"]) + [
+        # C++ABI files.
+        "src/cxa_handlers.h",
+        "src/cxa_guard_impl.h",
+
+        # C++ STL files.
+        "src/abort_message.h",
+        "src/fallback_malloc.h",
+        "src/private_typeinfo.h",
+
+        # Exceptions.
+        "src/cxa_exception.h",
+
+        # Demangle
+        "src/demangle/DemangleConfig.h",
+        "src/demangle/ItaniumDemangle.h",
+        "src/demangle/ItaniumNodes.def",
+        "src/demangle/StringView.h",
+        "src/demangle/Utility.h",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-std=c++20",
+        "-faligned-allocation",
+        "-funwind-tables",
+        "-fstrict-aliasing",
+        "-fvisibility-inlines-hidden",
+    ],
+    # Adding these headers via the data field lets us include them via
+    # a custom CPLUS_INCLUDE_PATH setting in the compilation environment for
+    # ll_bootstrap_library. So no include attribute needed to match this.
+    data = [
+        ":libcxxabi_headers",
+        "//libcxx:libcxx_headers",
+        "//libcxx:libcxx_sources",
+    ],
+    defines = [
+        "LIBCXX_BUILDING_LIBCXXABI",
+        "HAVE___CXA_THREAD_ATEXIT_IMPL",  # 3 underscores.
+        "LIBCXXABI_USE_LLVM_UNWINDER",
+        "_LIBCPP_BUILDING_LIBRARY",
+        "_LIBCXXABI_BUILDING_LIBRARY",
+        "_LIBCXXABI_LINK_PTHREAD_LIB",
+        "__STDC_CONSTANT_MACROS",
+        "__STDC_FORMAT_MACROS",
+        "__STDC_LIMIT_MACROS",
+    ],
+    transitive_hdrs = [":libcxxabi_headers"],
+    visibility = ["//visibility:public"],
+)
diff --git a/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel b/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
index 718eebfb7..0bd44bcbc 100644
--- a/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
+++ b/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
@@ -18,3 +18,53 @@ cc_library(
     ],
     strip_include_prefix = "include",
 )
+load("@rules_ll//ll:defs.bzl", "ll_library")
+
+filegroup(
+    name = "libunwind_headers",
+    srcs = glob(["include/**"]),
+    visibility = ["//visibility:public"],
+)
+
+ll_library(
+    name = "libll_unwind",
+    srcs = [
+        "src/Unwind-EHABI.cpp",
+        "src/Unwind-seh.cpp",
+        "src/Unwind-sjlj.c",
+        "src/UnwindLevel1.c",
+        "src/UnwindLevel1-gcc-ext.c",
+        "src/UnwindRegistersRestore.S",
+        "src/UnwindRegistersSave.S",
+        "src/libunwind.cpp",
+    ],
+    hdrs = [
+        "src/AddressSpace.hpp",
+        "src/CompactUnwinder.hpp",
+        "src/DwarfInstructions.hpp",
+        "src/DwarfParser.hpp",
+        "src/EHHeaderParser.hpp",
+        "src/FrameHeaderCache.hpp",
+        "src/RWMutex.hpp",
+        "src/Registers.hpp",
+        "src/Unwind-EHABI.h",
+        "src/UnwindCursor.hpp",
+        "src/assembly.h",
+        "src/cet_unwind.h",
+        "src/config.h",
+        "src/dwarf2.h",
+        "src/libunwind_ext.h",
+    ],
+    compilation_mode = "bootstrap",
+    compile_flags = [
+        "-faligned-allocation",
+        "-funwind-tables",
+        "-fstrict-aliasing",
+        "-fvisibility-inlines-hidden",
+    ],
+    transitive_hdrs = [
+        ":libunwind_headers",
+    ],
+    visibility = ["//visibility:public"],
+    deps = ["//compiler-rt:libll_compiler-rt"],
+)
