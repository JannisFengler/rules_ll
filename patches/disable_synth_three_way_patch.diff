diff --git a/libcxx/include/__compare/synth_three_way.h b/libcxx/include/__compare/synth_three_way.h
index fa8cbda79b..911caffe59 100644
--- a/libcxx/include/__compare/synth_three_way.h
+++ b/libcxx/include/__compare/synth_three_way.h
@@ -25,24 +25,24 @@ _LIBCPP_BEGIN_NAMESPACE_STD
 
 // [expos.only.func]
 
-_LIBCPP_HIDE_FROM_ABI inline constexpr auto __synth_three_way =
-  []<class _Tp, class _Up>(const _Tp& __t, const _Up& __u)
-    requires requires {
-      { __t < __u } -> __boolean_testable;
-      { __u < __t } -> __boolean_testable;
-    }
-  {
-    if constexpr (three_way_comparable_with<_Tp, _Up>) {
-      return __t <=> __u;
-    } else {
-      if (__t < __u) return weak_ordering::less;
-      if (__u < __t) return weak_ordering::greater;
-      return weak_ordering::equivalent;
-    }
-  };
-
-template <class _Tp, class _Up = _Tp>
-using __synth_three_way_result = decltype(std::__synth_three_way(declval<_Tp&>(), declval<_Up&>()));
+// _LIBCPP_HIDE_FROM_ABI inline constexpr auto __synth_three_way =
+//   []<class _Tp, class _Up>(const _Tp& __t, const _Up& __u)
+//     requires requires {
+//       { __t < __u } -> __boolean_testable;
+//       { __u < __t } -> __boolean_testable;
+//     }
+//   {
+//     if constexpr (three_way_comparable_with<_Tp, _Up>) {
+//       return __t <=> __u;
+//     } else {
+//       if (__t < __u) return weak_ordering::less;
+//       if (__u < __t) return weak_ordering::greater;
+//       return weak_ordering::equivalent;
+//     }
+//   };
+//
+// template <class _Tp, class _Up = _Tp>
+// using __synth_three_way_result = decltype(std::__synth_three_way(declval<_Tp&>(), declval<_Up&>()));
 
 #endif // _LIBCPP_STD_VER > 17
 
diff --git a/libcxx/include/__utility/pair.h b/libcxx/include/__utility/pair.h
index 51aa3e6ea5..be4a549d9a 100644
--- a/libcxx/include/__utility/pair.h
+++ b/libcxx/include/__utility/pair.h
@@ -333,20 +333,20 @@ operator==(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
 
 #if _LIBCPP_STD_VER > 17
 
-template <class _T1, class _T2>
-_LIBCPP_HIDE_FROM_ABI constexpr
-common_comparison_category_t<
-        __synth_three_way_result<_T1>,
-        __synth_three_way_result<_T2> >
-operator<=>(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
-{
-    if (auto __c = _VSTD::__synth_three_way(__x.first, __y.first); __c != 0) {
-      return __c;
-    }
-    return _VSTD::__synth_three_way(__x.second, __y.second);
-}
-
-#else // _LIBCPP_STD_VER > 17
+// template <class _T1, class _T2>
+// _LIBCPP_HIDE_FROM_ABI constexpr
+// common_comparison_category_t<
+//         __synth_three_way_result<_T1>,
+//         __synth_three_way_result<_T2> >
+// operator<=>(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
+// {
+//     if (auto __c = _VSTD::__synth_three_way(__x.first, __y.first); __c != 0) {
+//       return __c;
+//     }
+//     return _VSTD::__synth_three_way(__x.second, __y.second);
+// }
+// 
+// #else // _LIBCPP_STD_VER > 17
 
 template <class _T1, class _T2>
 inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX14
diff --git a/libcxx/include/tuple b/libcxx/include/tuple
index 2c729455ca..22e2024e45 100644
--- a/libcxx/include/tuple
+++ b/libcxx/include/tuple
@@ -1527,27 +1527,27 @@ operator==(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)
 
 #if _LIBCPP_STD_VER > 17
 
-// operator<=>
-
-template <class ..._Tp, class ..._Up, size_t ..._Is>
-_LIBCPP_HIDE_FROM_ABI constexpr
-auto
-__tuple_compare_three_way(const tuple<_Tp...>& __x, const tuple<_Up...>& __y, index_sequence<_Is...>) {
-    common_comparison_category_t<__synth_three_way_result<_Tp, _Up>...> __result = strong_ordering::equal;
-    static_cast<void>(((__result = _VSTD::__synth_three_way(_VSTD::get<_Is>(__x), _VSTD::get<_Is>(__y)), __result != 0) || ...));
-    return __result;
-}
-
-template <class ..._Tp, class ..._Up>
-requires (sizeof...(_Tp) == sizeof...(_Up))
-_LIBCPP_HIDE_FROM_ABI constexpr
-common_comparison_category_t<__synth_three_way_result<_Tp, _Up>...>
-operator<=>(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)
-{
-    return _VSTD::__tuple_compare_three_way(__x, __y, index_sequence_for<_Tp...>{});
-}
-
-#else // _LIBCPP_STD_VER > 17
+// // operator<=>
+// 
+// template <class ..._Tp, class ..._Up, size_t ..._Is>
+// _LIBCPP_HIDE_FROM_ABI constexpr
+// auto
+// __tuple_compare_three_way(const tuple<_Tp...>& __x, const tuple<_Up...>& __y, index_sequence<_Is...>) {
+//     common_comparison_category_t<__synth_three_way_result<_Tp, _Up>...> __result = strong_ordering::equal;
+//     static_cast<void>(((__result = _VSTD::__synth_three_way(_VSTD::get<_Is>(__x), _VSTD::get<_Is>(__y)), __result != 0) || ...));
+//     return __result;
+// }
+// 
+// template <class ..._Tp, class ..._Up>
+// requires (sizeof...(_Tp) == sizeof...(_Up))
+// _LIBCPP_HIDE_FROM_ABI constexpr
+// common_comparison_category_t<__synth_three_way_result<_Tp, _Up>...>
+// operator<=>(const tuple<_Tp...>& __x, const tuple<_Up...>& __y)
+// {
+//     return _VSTD::__tuple_compare_three_way(__x, __y, index_sequence_for<_Tp...>{});
+// }
+// 
+// #else // _LIBCPP_STD_VER > 17
 
 template <class ..._Tp, class ..._Up>
 inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX14
