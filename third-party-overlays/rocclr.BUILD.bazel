load("@rules_ll//ll:defs.bzl", "ll_library")

ll_library(
    name = "rocclr",
    exposed_hdrs = glob([
        "device/**/*.hpp",
        "device/**/*.h",
        "elf/**/*.hpp",
        "elf/elfio/*.hpp",
        "include/**/*",
        "utils/**/*.hpp",
        "platform/**/*.hpp",
        "platform/**/*.h",
        "thread/**/*.hpp",
        "os/**/*.hpp",
    ]),
    hdrs = glob([
        "compiler/lib/**/*.hpp",
        "compiler/lib/**/*.h",
    ]) + [
        "compiler/lib/utils/OPTIONS.def",
    ],
    exposed_includes = [
        "include",
    ],
    exposed_angled_includes = [
        "elf",
        ".",
    ],
    includes = [
        "compiler/lib",
        "compiler/lib/backends/common",
        "device",
    ],
    srcs = [
        "compiler/lib/utils/options.cpp",
        "device/appprofile.cpp",
        "device/blit.cpp",
        "device/blitcl.cpp",
        "device/comgrctx.cpp",
        "device/devhcmessages.cpp",
        "device/devhcprintf.cpp",
        "device/devhostcall.cpp",
        "device/device.cpp",
        "device/devkernel.cpp",
        "device/devprogram.cpp",
        "device/devwavelimiter.cpp",
        "device/hsailctx.cpp",
        "elf/elf.cpp",
        "os/alloc.cpp",
        "os/os_posix.cpp",
        "os/os_win32.cpp",
        "os/os.cpp",
        "platform/activity.cpp",
        "platform/agent.cpp",
        "platform/command.cpp",
        "platform/commandqueue.cpp",
        "platform/context.cpp",
        "platform/kernel.cpp",
        "platform/memory.cpp",
        "platform/ndrange.cpp",
        "platform/program.cpp",
        "platform/runtime.cpp",
        "thread/monitor.cpp",
        "thread/semaphore.cpp",
        "thread/thread.cpp",
        "utils/debug.cpp",
        "utils/flags.cpp",

        # HSA sources.
        "device/rocm/rocappprofile.cpp",
        "device/rocm/rocblit.cpp",
        "device/rocm/rocblitcl.cpp",
        "device/rocm/roccounters.cpp",
        "device/rocm/rocdevice.cpp",
        "device/rocm/rocglinterop.cpp",
        "device/rocm/rockernel.cpp",
        "device/rocm/rocmemory.cpp",
        "device/rocm/rocprintf.cpp",
        "device/rocm/rocprogram.cpp",
        "device/rocm/rocsettings.cpp",
        "device/rocm/rocsignal.cpp",
        "device/rocm/rocvirtual.cpp",
        "device/rocm/rocurilocator.cpp",
    ],
    defines = [
        # Our config. Same as the default CMake config.
        "ROCCLR_ENABLE_LC=1",
        "ROCCLR_ENABLE_HSA=1",

        # rules_ll only supports linux at the moment.
        "ATI_OS_LINUX",

        "LITTLEENDIAN_CPU",
        "WITH_LIQUID_FLASH=0",

        # We need comgr.
        "USE_COMGR_LIBRARY",

        # We ship numactl as part of the Nix environment.
        "ROCCLR_SUPPORT_NUMA_POLICY",

        # Enable the HSA device flag.
        "WITH_HSA_DEVICE",

        # Enable lightning compiler.
        "WITH_LIGHTNING_COMPILER",

        # OpenCL defines.
        "HAVE_CL2_HPP",
        "OPENCL_MAJOR=2",
        "OPENCL_MINOR=1",
        "OPENCL_C_MAJOR=2",
        "OPENCL_C_MINOR=0",
        "CL_TARGET_OPENCL_VERSION=220",
        "CL_USE_DEPRECATED_OPENCL_1_0_APIS",
        "CL_USE_DEPRECATED_OPENCL_1_1_APIS",
        "CL_USE_DEPRECATED_OPENCL_1_2_APIS",
        "CL_USE_DEPRECATED_OPENCL_2_0_APIS",
    ] + select({
        "@comgr//:shared": ["COMGR_DYN_DLL"],
        "//conditions:default": [],
    }),
    deps = [
        # ":headers",
        "@rocm-opencl-runtime//:CL2.2",
        "@rocm-opencl-runtime//:headers",
        "@rocr//:libhsa-runtime64",
        "@rocr//:hsa_headers",
        "@comgr//:amd_comgr",
    ],
    compile_flags = [
        "-std=c++17",
        "-O3",  # In CMake decided by downstream targets. Let's just use O3.

        # TODO: Upstream fixes for these.
        "-Wno-inconsistent-missing-override",
        "-Wno-parentheses",  # This one looks like an actual bug.
    ],
    visibility = ["//visibility:public"],
)
