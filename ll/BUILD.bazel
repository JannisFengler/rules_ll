load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@stardoc//stardoc:stardoc.bzl", "stardoc")
load("//ll:toolchain.bzl", "ll_toolchain")

LL_MODULES = [
    "actions",
    "args",
    "attributes",
    "compilation_database",
    "defs",
    "driver",
    "environment",
    # "init",  # Broken until stardoc supports module_extension and tag_class.
    "inputs",
    "ll",
    "llvm_project_deps",
    "os",
    "outputs",
    "providers",
    "resolve_rule_inputs",
    "toolchain",
    "tools",
    "transitions",
]

bzl_library(
    name = "ll_bzl",
    srcs = [
        "{}.bzl".format(name)
        for name in LL_MODULES
    ],
    deps = [
        "@bazel_skylib//lib:dicts",
        "@bazel_skylib//lib:paths",
        "@bazel_skylib//rules:common_settings",
        "@bazel_tools//tools/build_defs/repo:http.bzl",
        "@bazel_tools//tools/build_defs/repo:utils.bzl",
    ],
)

[
    stardoc(
        name = "{}_docs".format(name),
        out = "{}.md".format(name),
        func_template = "templates/function_template.vm",
        header_template = "templates/header_template.vm",
        input = "{}.bzl".format(name),
        provider_template = "templates/provider_template.vm",
        rule_template = "templates/rule_template.vm",
        deps = [
            ":ll_bzl",
        ],
    )
    for name in LL_MODULES
]

filegroup(
    name = "docs",
    srcs = [
        ":{}_docs".format(name)
        for name in LL_MODULES
    ],
)

# Constraints.

constraint_setting(name = "ll_exec")

constraint_value(
    name = "ll_exec_linux",
    constraint_setting = ":ll_exec",
)

# Platforms.

platform(
    name = "ll_linux_exec_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        ":ll_exec_linux",
    ],
)

# Configurations.

string_flag(
    name = "current_ll_toolchain_configuration",
    build_setting_default = "cpp",
    values = [
        "bootstrap",
        "cpp",
        "omp_cpu",
        "cuda_nvidia",
        "hip_nvidia",
        "sycl_cpu",
        "sycl_cuda",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "bootstrap",
    flag_values = {
        ":current_ll_toolchain_configuration": "bootstrap",
    },
)

config_setting(
    name = "cpp",
    flag_values = {
        ":current_ll_toolchain_configuration": "cpp",
    },
)

config_setting(
    name = "omp_cpu",
    flag_values = {
        ":current_ll_toolchain_configuration": "omp_cpu",
    },
)

config_setting(
    name = "cuda_nvidia",
    flag_values = {
        ":current_ll_toolchain_configuration": "cuda_nvidia",
    },
)

config_setting(
    name = "hip_nvidia",
    flag_values = {
        ":current_ll_toolchain_configuration": "hip_nvidia",
    },
)

config_setting(
    name = "sycl_cpu",
    flag_values = {
        ":current_ll_toolchain_configuration": "sycl_cpu",
    },
)

config_setting(
    name = "sycl_cuda",
    flag_values = {
        ":current_ll_toolchain_configuration": "sycl_cuda",
    },
)

# Toolchain Types.

toolchain_type(name = "toolchain_type")

# Toolchains.

ll_toolchain(
    name = "ll_bootstrap_toolchain_x86_64-unknown-linux-gnu",
    exec_compatible_with = [":ll_exec_linux"],
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_cpp_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = [
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
    ],
    compiler_runtime = [
        "@llvm-project//compiler-rt:libll_compiler-rt",
        "@llvm-project//compiler-rt/lib/crt:crt",
    ],
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    exec_compatible_with = [":ll_exec_linux"],
    leak_sanitizer = [
        "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
    ],
    memory_sanitizer = [
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
    ],
    thread_sanitizer = [
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
    ],
    undefined_behavior_sanitizer = [
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
    ],
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_omp_cpu_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = [
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
    ],
    compiler_runtime = [
        "@llvm-project//compiler-rt:libll_compiler-rt",
        "@llvm-project//compiler-rt/lib/crt:crt",
    ],
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    exec_compatible_with = [":ll_exec_linux"],
    leak_sanitizer = [
        "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
    ],
    libomp = "@llvm-project//openmp:libomp",
    memory_sanitizer = [
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
    ],
    thread_sanitizer = [
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
    ],
    undefined_behavior_sanitizer = [
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
    ],
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_cuda_nvidia_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = [
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
    ],
    compiler_runtime = [
        "@llvm-project//compiler-rt:libll_compiler-rt",
        "@llvm-project//compiler-rt/lib/crt:crt",
    ],
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    cuda_toolkit = [
        "@cuda_cudart//:contents",
        "@cuda_cupti//:contents",
        "@cuda_nvcc//:contents",
        "@cuda_nvprof//:contents",
        "@cuda_profiler_api//:contents",
        "@libcurand//:contents",
    ],
    exec_compatible_with = [":ll_exec_linux"],
    leak_sanitizer = [
        "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
    ],
    memory_sanitizer = [
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
    ],
    thread_sanitizer = [
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
    ],
    undefined_behavior_sanitizer = [
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
    ],
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_hip_nvidia_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = [
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
    ],
    compiler_runtime = [
        "@llvm-project//compiler-rt:libll_compiler-rt",
        "@llvm-project//compiler-rt/lib/crt:crt",
    ],
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    cuda_toolkit = [
        "@cuda_cudart//:contents",
        "@cuda_cupti//:contents",
        "@cuda_nvcc//:contents",
        "@cuda_nvprof//:contents",
        "@cuda_profiler_api//:contents",
        "@libcurand//:contents",
    ],
    exec_compatible_with = [":ll_exec_linux"],
    hip_libraries = [
        "@hip//:headers",
        "@hipamd//:headers",
    ],
    leak_sanitizer = [
        "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
    ],
    memory_sanitizer = [
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
    ],
    thread_sanitizer = [
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
    ],
    undefined_behavior_sanitizer = [
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
    ],
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_sycl_cpu_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = [
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
    ],
    compiler_runtime = [
        "@llvm-project//compiler-rt:libll_compiler-rt",
        "@llvm-project//compiler-rt/lib/crt:crt",
    ],
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    exec_compatible_with = [":ll_exec_linux"],
    hipsycl_hdrs = [
        "@hipsycl//:sycl_headers",
    ],
    hipsycl_omp_backend = "@hipsycl//:rt-backend-omp",
    hipsycl_plugin = "@hipsycl//:libhipSYCL_clang",
    hipsycl_runtime = "@hipsycl//:hipSYCL-rt",
    leak_sanitizer = [
        "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
    ],
    memory_sanitizer = [
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
    ],
    thread_sanitizer = [
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
    ],
    undefined_behavior_sanitizer = [
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
    ],
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_sycl_cuda_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = [
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
        "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
    ],
    compiler_runtime = [
        "@llvm-project//compiler-rt:libll_compiler-rt",
        "@llvm-project//compiler-rt/lib/crt:crt",
    ],
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    cuda_toolkit = [
        "@cuda_cudart//:contents",
        "@cuda_cupti//:contents",
        "@cuda_nvcc//:contents",
        "@cuda_nvprof//:contents",
        "@cuda_profiler_api//:contents",
        "@libcurand//:contents",
    ],
    exec_compatible_with = [":ll_exec_linux"],
    hipsycl_cuda_backend = "@hipsycl//:rt-backend-cuda",
    hipsycl_hdrs = [
        "@hipsycl//:sycl_headers",
    ],
    hipsycl_omp_backend = "@hipsycl//:rt-backend-omp",
    hipsycl_plugin = "@hipsycl//:libhipSYCL_clang",
    hipsycl_runtime = "@hipsycl//:hipSYCL-rt",
    leak_sanitizer = [
        "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
    ],
    memory_sanitizer = [
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
        "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
    ],
    thread_sanitizer = [
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
        "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
    ],
    undefined_behavior_sanitizer = [
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
        "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
    ],
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "ll_toolchain",
    exec_compatible_with = [":ll_exec_linux"],
    toolchain = select({
        ":bootstrap": ":ll_bootstrap_toolchain_x86_64-unknown-linux-gnu",
        ":cpp": ":ll_cpp_toolchain_x86_64-unknown-linux-gnu",
        ":omp_cpu": ":ll_omp_cpu_toolchain_x86_64-unknown-linux-gnu",
        ":cuda_nvidia": ":ll_cuda_nvidia_toolchain_x86_64-unknown-linux-gnu",
        ":hip_nvidia": ":ll_hip_nvidia_toolchain_x86_64-unknown-linux-gnu",
        ":sycl_cpu": ":ll_sycl_cpu_toolchain_x86_64-unknown-linux-gnu",
        ":sycl_cuda": ":ll_sycl_cuda_toolchain_x86_64-unknown-linux-gnu",
    }),
    toolchain_type = ":toolchain_type",
    visibility = ["//visibility:public"],
)
