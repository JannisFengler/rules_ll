load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@stardoc//stardoc:stardoc.bzl", "stardoc")
load("//ll:toolchain.bzl", "ll_toolchain")

LL_MODULES = [
    "actions",
    "args",
    "attributes",
    "bootstrap_library",
    "compilation_database",
    "defs",
    "deps",
    "driver",
    "environment",
    "init",
    "inputs",
    "internal_functions",
    "ll",
    "outputs",
    "providers",
    "toolchain",
    "tools",
]

bzl_library(
    name = "ll_bzl",
    srcs = [
        "{}.bzl".format(name)
        for name in LL_MODULES
    ],
    deps = [
        "@bazel_skylib//lib:dicts",
        "@bazel_skylib//lib:paths",
        "@bazel_tools//tools/build_defs/repo:http.bzl",
        "@bazel_tools//tools/build_defs/repo:utils.bzl",
    ],
)

[
    stardoc(
        name = "{}_docs".format(name),
        out = "{}.md".format(name),
        input = "{}.bzl".format(name),
        deps = [":ll_bzl"],
    )
    for name in LL_MODULES
]

filegroup(
    name = "docs",
    srcs = [
        ":{}_docs".format(name)
        for name in LL_MODULES
    ],
)

# Constraints.

constraint_setting(name = "ll_exec")

constraint_value(
    name = "ll_exec_linux",
    constraint_setting = ":ll_exec",
)

# Platforms.

platform(
    name = "ll_linux_exec_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        ":ll_exec_linux",
    ],
)

# Configurations.

string_flag(
    name = "current_ll_toolchain_configuration",
    build_setting_default = "cpp",
    values = [
        "bootstrap",
        "cpp",
        "cuda_nvidia",
        "hip_nvidia",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "bootstrap",
    flag_values = {
        ":current_ll_toolchain_configuration": "bootstrap",
    },
)

config_setting(
    name = "cpp",
    flag_values = {
        ":current_ll_toolchain_configuration": "cpp",
    },
)

config_setting(
    name = "cuda_nvidia",
    flag_values = {
        ":current_ll_toolchain_configuration": "cuda_nvidia",
    },
)

config_setting(
    name = "hip_nvidia",
    flag_values = {
        ":current_ll_toolchain_configuration": "hip_nvidia",
    },
)

# Toolchain Types.

toolchain_type(name = "toolchain_type")

# Toolchains.

ll_toolchain(
    name = "ll_bootstrap_toolchain_x86_64-unknown-linux-gnu",
    exec_compatible_with = [":ll_exec_linux"],
    toolchain_configuration = "bootstrap",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_cpp_toolchain_x86_64-unknown-linux-gnu",

    # Standard cpp toolchain.
    compiler_runtime = "@llvm-project//compiler-rt:libll_compiler-rt",
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",
    exec_compatible_with = [":ll_exec_linux"],
    toolchain_configuration = "cpp",
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_cuda_nvidia_toolchain_x86_64-unknown-linux-gnu",

    # Standard cpp toolchain.
    compiler_runtime = "@llvm-project//compiler-rt:libll_compiler-rt",
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",

    # CUDA.
    cuda_toolkit = [
        "@cuda_cudart//:contents",
        "@cuda_nvcc//:contents",
        "@cuda_nvprof//:contents",
        "@libcurand//:contents",
    ],
    exec_compatible_with = [":ll_exec_linux"],
    toolchain_configuration = "cuda_nvidia",
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

ll_toolchain(
    name = "ll_hip_nvidia_toolchain_x86_64-unknown-linux-gnu",

    # Standard cpp toolchain.
    compiler_runtime = "@llvm-project//compiler-rt:libll_compiler-rt",
    cpp_abihdrs = "@llvm-project//libcxxabi:libcxxabi_headers",
    cpp_abilib = "@llvm-project//libcxxabi:libll_cxxabi",
    cpp_stdhdrs = "@llvm-project//libcxx:libcxx_headers",
    cpp_stdlib = "@llvm-project//libcxx:libll_cxx",

    # CUDA.
    cuda_toolkit = [
        "@cuda_cudart//:contents",
        "@cuda_nvcc//:contents",
        "@cuda_nvprof//:contents",
        "@libcurand//:contents",
    ],
    exec_compatible_with = [":ll_exec_linux"],

    # HIP.
    hip_libraries = [
        "@hip//:headers",
        "@hipamd//:headers",
    ],
    toolchain_configuration = "hip_nvidia",
    unwind_library = "@llvm-project//libunwind:libll_unwind",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "ll_toolchain",
    exec_compatible_with = [":ll_exec_linux"],
    toolchain = select({
        ":bootstrap": ":ll_bootstrap_toolchain_x86_64-unknown-linux-gnu",
        ":cpp": ":ll_cpp_toolchain_x86_64-unknown-linux-gnu",
        ":cuda_nvidia": ":ll_cuda_nvidia_toolchain_x86_64-unknown-linux-gnu",
        ":hip_nvidia": ":ll_hip_nvidia_toolchain_x86_64-unknown-linux-gnu",
    }),
    toolchain_type = ":toolchain_type",
    visibility = ["//visibility:public"],
)
