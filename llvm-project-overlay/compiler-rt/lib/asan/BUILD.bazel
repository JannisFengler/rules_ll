load("@rules_ll//ll:defs.bzl", "ll_library")

filegroup(
    name = "asan_headers",
    srcs = [
        "asan_activation.h",
        "asan_activation_flags.inc",
        "asan_allocator.h",
        "asan_descriptions.h",
        "asan_errors.h",
        "asan_fake_stack.h",
        "asan_flags.h",
        "asan_flags.inc",
        "asan_init_version.h",
        "asan_interceptors.h",
        "asan_interceptors_memintrinsics.h",
        "asan_interface.inc",
        "asan_interface_internal.h",
        "asan_internal.h",
        "asan_lock.h",
        "asan_mapping.h",
        "asan_poisoning.h",
        "asan_premap_shadow.h",
        "asan_report.h",
        "asan_scariness_score.h",
        "asan_stack.h",
        "asan_stats.h",
        "asan_suppressions.h",
        "asan_thread.h",
    ],
)

filegroup(
    name = "asan_sources",
    srcs = [
        "asan_activation.cpp",
        "asan_allocator.cpp",
        "asan_debugging.cpp",
        "asan_descriptions.cpp",
        "asan_errors.cpp",
        "asan_fake_stack.cpp",
        "asan_flags.cpp",
        "asan_fuchsia.cpp",
        "asan_globals.cpp",
        "asan_globals_win.cpp",
        "asan_interceptors.cpp",
        "asan_interceptors_memintrinsics.cpp",
        "asan_interceptors_vfork.S",  # Not Win32 and not Apple.
        "asan_linux.cpp",
        "asan_mac.cpp",
        "asan_malloc_linux.cpp",
        "asan_malloc_mac.cpp",
        "asan_malloc_win.cpp",
        "asan_memory_profile.cpp",
        "asan_poisoning.cpp",
        "asan_posix.cpp",
        "asan_premap_shadow.cpp",
        "asan_report.cpp",
        "asan_rtl.cpp",
        "asan_shadow_setup.cpp",
        "asan_stack.cpp",
        "asan_stats.cpp",
        "asan_suppressions.cpp",
        "asan_thread.cpp",
        "asan_win.cpp",
    ],
)

filegroup(
    name = "asan_cxx_sources",
    srcs = [
        "asan_new_delete.cpp",
    ],
)

filegroup(
    name = "asan_static_sources",
    srcs = [
        "asan_rtl_static.cpp",
        "asan_rtl_x86_64.S",  # Not Win32 and not Apple.
    ],
)

filegroup(
    name = "asan_preinit_sources",
    srcs = [
        "asan_preinit.cpp",
    ],
)

ll_library(
    name = "RTAsan_dynamic",
    srcs = [
        ":asan_cxx_sources",
        ":asan_sources",
    ],
    hdrs = [
        ":asan_headers",
        "//compiler-rt/lib/interception:interception_headers",
        "//compiler-rt/lib/lsan:lsan_headers",
        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
        "//compiler-rt/lib/ubsan:ubsan_headers",
    ],
    compilation_mode = "bootstrap",
    compile_flags = [
        "-fvisibility=hidden",
    ],
    defines = ["ASAN_DYNAMIC=1"],
    emit = ["objects"],
    relative_includes = ["compiler-rt/lib"],
    visibility = ["//visibility:public"],
)

ll_library(
    name = "RTAsan",
    srcs = [
        ":asan_sources",
    ],
    hdrs = [
        ":asan_headers",
        "//compiler-rt/lib/interception:interception_headers",
        "//compiler-rt/lib/lsan:lsan_headers",
        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
        "//compiler-rt/lib/ubsan:ubsan_headers",
    ],
    compilation_mode = "bootstrap",
    emit = ["objects"],
    relative_includes = ["compiler-rt/lib"],
    visibility = ["//visibility:public"],
)

ll_library(
    name = "RTAsan_cxx",
    srcs = [
        ":asan_cxx_sources",
    ],
    hdrs = [
        ":asan_headers",
        "//compiler-rt/lib/interception:interception_headers",
        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
    ],
    compilation_mode = "bootstrap",
    emit = ["objects"],
    relative_includes = ["compiler-rt/lib"],
    visibility = ["//visibility:public"],
)

ll_library(
    name = "RTAsan_static",
    srcs = [
        "asan_rtl_static.cpp",
        "asan_rtl_x86_64.S",  # Not Win32 and not Apple.
    ],
    hdrs = [
        ":asan_headers",
        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
    ],
    compilation_mode = "bootstrap",
    emit = ["objects"],
    relative_includes = ["compiler-rt/lib"],
    visibility = ["//visibility:public"],
)

ll_library(
    name = "RTAsan_preinit",
    srcs = [
        ":asan_preinit_sources",
    ],
    hdrs = [
        ":asan_headers",
        "//compiler-rt/lib/sanitizer_common:sanitizer_impl_headers",
    ],
    compilation_mode = "bootstrap",
    emit = ["objects"],
    relative_includes = ["compiler-rt/lib"],
    visibility = ["//visibility:public"],
)

ll_library(
    name = "clang_rt.asan",
    compilation_mode = "bootstrap",
    visibility = ["//visibility:public"],
    deps = [
        ":RTAsan",
        ":RTAsan_preinit",
        "//compiler-rt/lib/interception:RTInterception",
        "//compiler-rt/lib/lsan:RTLSanCommon",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
        "//compiler-rt/lib/ubsan:RTUbsan",
    ],
)

ll_library(
    # We want the output library to be named libasan.so. Otherwise it will not
    # be recognized by IsDynamicRTName in asan_linux.cpp.
    name = "libasan",
    compilation_mode = "bootstrap",
    emit = ["shared_object"],
    shared_object_link_flags = [
        "--eh-frame-hdr",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":RTAsan_dynamic",
        "//compiler-rt/lib/interception:RTInterception",
        "//compiler-rt/lib/lsan:RTLSanCommon",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommon",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonCoverage",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonLibc",
        "//compiler-rt/lib/sanitizer_common:RTSanitizerCommonSymbolizer",
        "//compiler-rt/lib/ubsan:RTUbsan",
        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
    ],
)

ll_library(
    name = "clang_rt.asan_cxx",
    compilation_mode = "bootstrap",
    visibility = ["//visibility:public"],
    deps = [
        ":RTAsan_cxx",
        "//compiler-rt/lib/ubsan:RTUbsan_cxx",
    ],
)

ll_library(
    name = "clang_rt.asan_static",
    compilation_mode = "bootstrap",
    visibility = ["//visibility:public"],
    deps = [
        ":RTAsan_static",
    ],
)

ll_library(
    name = "clang_rt.asan-preinit",
    compilation_mode = "bootstrap",
    visibility = ["//visibility:public"],
    deps = [
        ":RTAsan_preinit",
    ],
)
