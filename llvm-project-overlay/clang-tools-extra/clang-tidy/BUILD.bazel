load(
    "@llvm-project//clang-tools-extra/clang-tidy:clang_tidy_module.bzl",
    "clang_tidy_module",
)
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")

cc_library(
    name = "clang_tidy",
    srcs = [
        "ClangTidy.cpp",
        "ClangTidyCheck.cpp",
        "ClangTidyDiagnosticConsumer.cpp",
        "ClangTidyModule.cpp",
        "ClangTidyOptions.cpp",
        "ClangTidyProfiling.cpp",
        "ExpandModularHeadersPPCallbacks.cpp",
        "GlobList.cpp",
        "NoLintDirectiveHandler.cpp",
    ],
    hdrs = [
        "ClangTidy.h",
        "ClangTidyCheck.h",
        "ClangTidyDiagnosticConsumer.h",
        "ClangTidyForceLinker.h",
        "ClangTidyModule.h",
        "ClangTidyModuleRegistry.h",
        "ClangTidyOptions.h",
        "ClangTidyProfiling.h",
        "ExpandModularHeadersPPCallbacks.h",
        "GlobList.h",
        "NoLintDirectiveHandler.h",

        # Added manually to the overlay.
        "clang-tidy-config.h",
    ],
    copts = [
        "-O3",
    ],
    deps = [
        "@llvm-project//clang:analysis",
        "@llvm-project//clang:ast",
        "@llvm-project//clang:ast_matchers",
        "@llvm-project//clang:basic",
        "@llvm-project//clang:format",
        "@llvm-project//clang:frontend",
        "@llvm-project//clang:frontend_rewrite",
        "@llvm-project//clang:lex",
        "@llvm-project//clang:rewrite",
        "@llvm-project//clang:sema",
        "@llvm-project//clang:serialization",
        "@llvm-project//clang:static_analyzer_core",
        "@llvm-project//clang:static_analyzer_frontend",
        "@llvm-project//clang:tooling",
        "@llvm-project//clang:tooling_core",
        "@llvm-project//llvm:FrontendOpenMP",
        "@llvm-project//llvm:Support",
    ],
)

cc_library(
    name = "clang_tidy_utils",
    srcs = glob(["utils/*.cpp"]),
    hdrs = glob(["utils/*.h"]),
    copts = [
        "-O3",
    ],
    deps = [
        ":clang_tidy",
        "@llvm-project//clang:ast",
        "@llvm-project//clang:ast_matchers",
        "@llvm-project//clang:basic",
        "@llvm-project//clang:lex",
        "@llvm-project//clang:sema",
        "@llvm-project//clang:transformer",
    ],
)

clang_tidy_module(
    name = "abseil",
    deps = [
        "@llvm-project//clang:tooling",
        "@llvm-project//clang:transformer",
    ],
)

clang_tidy_module(
    name = "altera",
    deps = [
        "@llvm-project//clang:analysis",
    ],
)

clang_tidy_module(name = "android")

clang_tidy_module(name = "boost")

clang_tidy_module(
    name = "concurrency",
    deps = [
        "@llvm-project//clang:analysis",
        "@llvm-project//clang:serialization",
        "@llvm-project//clang:tooling",
    ],
)

clang_tidy_module(name = "darwin")

clang_tidy_module(
    name = "readability",
    deps = [
        "@llvm-project//clang:analysis",
        "@llvm-project//clang:tooling",
    ],
)

clang_tidy_module(
    name = "google",
    deps = [":readability"],
)

clang_tidy_module(
    name = "fuchsia",
    deps = [":google"],
)

clang_tidy_module(name = "linuxkernel")

clang_tidy_module(
    name = "llvm",
    deps = [":readability"],
)

clang_tidy_module(
    name = "portability",
    deps = ["@llvm-project//clang:tooling"],
)

clang_tidy_module(
    name = "llvmlibc",
    deps = [":portability"],
)

cc_binary(
    name = "make_confusable_table",
    srcs = [
        "misc/ConfusableTable/BuildConfusableTable.cpp",
    ],
    deps = [
        "@llvm-project//llvm:Support",
    ],
)

genrule(
    name = "confusables_inc",
    srcs = ["misc/ConfusableTable/confusables.txt"],
    outs = ["Confusables.inc"],
    cmd = "$(location :make_confusable_table) $< $@",
    message = "Generating confusables table.",
    tools = [":make_confusable_table"],
)

cc_library(
    name = "confusables_gen",
    hdrs = [":confusables_inc"],
    include_prefix = ".",
)

clang_tidy_module(
    name = "misc",
    deps = [
        ":confusables_gen",
        "@llvm-project//clang:serialization",
        "@llvm-project//clang:tooling",
    ],
)

clang_tidy_module(
    name = "modernize",
    deps = [
        ":readability",
        "@llvm-project//clang:tooling",
    ],
)

clang_tidy_module(
    name = "mpi",
    deps = [
        "@llvm-project//clang:analysis",
        "@llvm-project//clang:static_analyzer_checkers",
        "@llvm-project//clang:tooling",
    ],
)

clang_tidy_module(name = "objc")

clang_tidy_module(name = "openmp")

clang_tidy_module(
    name = "performance",
    deps = ["@llvm-project//clang:analysis"],
)

clang_tidy_module(name = "zircon")

clang_tidy_module(
    name = "cppcoreguidelines",
    deps = [
        ":misc",
        ":modernize",
        ":readability",
        "@llvm-project//clang:serialization",
        "@llvm-project//clang:tooling",
    ],
)

clang_tidy_module(
    name = "bugprone",
    deps = [
        ":cppcoreguidelines",
        "@llvm-project//clang:analysis",
        "@llvm-project//clang:tooling",
        "@llvm-project//clang:transformer",
    ],
)

clang_tidy_module(
    name = "cert",
    deps = [
        ":bugprone",
        ":concurrency",
        ":google",
        ":misc",
        ":performance",
        ":readability",
    ],
)

clang_tidy_module(
    name = "hicpp",
    deps = [
        ":bugprone",
        ":cppcoreguidelines",
        ":google",
        ":misc",
        ":modernize",
        ":performance",
        ":readability",
        "@llvm-project//clang:serialization",
    ],
)

ALL_CLANG_TIDY_CHECKS = [
    ":android",
    ":abseil",
    ":altera",
    ":boost",
    ":bugprone",
    ":cert",
    ":concurrency",
    ":cppcoreguidelines",
    ":darwin",
    ":fuchsia",
    ":google",
    ":hicpp",
    ":linuxkernel",
    ":llvm",
    ":llvmlibc",
    ":misc",
    ":modernize",
    ":mpi",
    ":objc",
    ":openmp",
    ":performance",
    ":portability",
    ":readability",
    ":zircon",
]

cc_binary(
    name = "clang_tidy_plugin",
    srcs = ["plugin/ClangTidyPlugin.cpp"],
    copts = [
        "-O3",
    ],
    linkshared = True,
    visibility = ["//visibility:public"],
    deps = ALL_CLANG_TIDY_CHECKS + [
        ":clang_tidy",
        "@llvm-project//clang:ast",
        "@llvm-project//clang:ast_matchers",
        "@llvm-project//clang:basic",
        "@llvm-project//clang:frontend",
        "@llvm-project//clang:sema",
        "@llvm-project//clang:tooling",
    ],
)

cc_library(
    name = "clang_tidy_main",
    srcs = [
        "tool/ClangTidyMain.cpp",
    ],
    hdrs = [
        "tool/ClangTidyMain.h",
    ],
    copts = [
        "-O3",
    ],
    deps = [
        ":clang_tidy",
        "@llvm-project//clang:ast",
        "@llvm-project//clang:ast_matchers",
        "@llvm-project//clang:basic",
        "@llvm-project//clang:tooling",
        "@llvm-project//clang:tooling_core",
    ],
)

cc_binary(
    name = "clang-tidy",
    srcs = [
        "tool/ClangTidyToolMain.cpp",
    ],
    copts = [
        "-O3",
    ],
    visibility = ["//visibility:public"],
    deps = ALL_CLANG_TIDY_CHECKS + [
        ":clang_tidy",
        ":clang_tidy_main",
        "@llvm-project//clang:ast",
        "@llvm-project//clang:ast_matchers",
        "@llvm-project//clang:basic",
        "@llvm-project//clang:tooling",
        "@llvm-project//clang:tooling_core",
    ],
)

native_binary(
    name = "run-clang-tidy",
    src = "tool/run-clang-tidy.py",
    out = "run-clang-tidy",
    data = [":clang-tidy"],
    visibility = ["//visibility:public"],
)
